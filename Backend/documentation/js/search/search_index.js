var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppConfigModule.html",[0,1.233,1,2.788]],["body/modules/AppConfigModule.html",[0,1.837,1,4.155,2,1.972,3,0.105,4,0.135,5,0.12,6,4.66,7,0.359,8,0.012,9,0.811,10,3.165,11,2.22,12,4.66,13,4.072,14,2.316,15,4.66,16,4.66,17,4.66,18,4.66,19,8.553,20,4.66,21,7.255,22,4.66,23,4.66,24,4.66,25,4.66,26,4.66,27,4.66,28,4.66,29,4.66,30,4.66,31,4.66,32,4.66,33,4.66,34,4.66,35,4.66,36,4.66,37,4.66,38,4.66,39,4.66,40,4.66,41,4.66,42,4.66,43,4.66,44,4.66,45,4.072,46,4.66,47,0.135,48,0.155,49,0.009,50,0.009]],["title/controllers/AppController.html",[51,1.615,52,2.992]],["body/controllers/AppController.html",[3,0.123,4,0.158,5,0.141,7,0.357,8,0.012,9,0.953,47,0.158,48,0.182,49,0.01,50,0.01,51,2.666,52,4.94,53,2.152,54,4.782,55,0.667,56,2.103,57,6.728,58,1.753,59,0.953,60,5.472,61,1.697,62,1.529,63,4.698,64,4.782,65,2.842,66,2.231,67,1.697,68,5.472]],["title/modules/AppModule.html",[0,1.233,69,2.992]],["body/modules/AppModule.html",[0,1.735,1,4.761,2,1.437,3,0.077,4,0.098,5,0.087,7,0.42,8,0.012,9,0.591,14,2.443,47,0.098,48,0.113,49,0.007,50,0.007,52,4.211,53,1.933,63,4.472,64,2.967,69,6.135,70,1.617,71,1.763,72,1.763,73,1.617,74,3.002,75,1.763,76,2.967,77,2.967,78,2.967,79,4.761,80,4.761,81,4.761,82,4.472,83,4.761,84,4.761,85,4.761,86,4.761,87,4.761,88,4.472,89,2.554,90,1.763,91,1.763,92,3.395,93,3.395,94,3.395,95,3.395,96,3.395,97,3.395,98,2.967,99,2.967,100,3.395,101,3.395,102,3.395,103,3.395,104,3.395]],["title/injectables/AppService.html",[63,2.619,105,0.789]],["body/injectables/AppService.html",[3,0.129,4,0.165,5,0.147,7,0.301,8,0.012,9,0.995,47,0.165,48,0.19,49,0.01,50,0.01,55,0.697,56,2.16,57,6.83,59,0.995,61,1.773,62,1.571,63,4.441,67,1.773,105,1.338,106,2.024,107,4.995,108,5.716,109,5.716,110,5.716]],["title/classes/Auth.html",[48,0.137,111,2.788]],["body/classes/Auth.html",[3,0.143,4,0.184,5,0.163,8,0.011,47,0.184,48,0.212,49,0.011,50,0.011,111,5.039,112,1.735,113,5.556]],["title/controllers/AuthController.html",[51,1.615,114,2.992]],["body/controllers/AuthController.html",[3,0.031,4,0.04,5,0.035,7,0.359,8,0.013,9,0.239,47,0.04,48,0.046,49,0.003,50,0.003,51,0.54,53,0.54,55,0.168,56,0.739,58,2.051,59,1.114,61,1.985,62,1.249,65,0.714,66,0.56,67,1.985,111,0.933,114,1.735,115,1.201,116,0.828,117,2.99,118,1.883,119,2.081,120,2.081,121,2.381,122,3.758,123,3.151,124,3.758,125,2.381,126,3.758,127,2.381,128,2.738,129,2.081,130,2.381,131,2.381,132,1.201,133,3.59,134,1.374,135,3.049,136,1.374,137,1.374,138,1.905,139,1.622,140,0.919,141,1.622,142,2.417,143,1.201,144,3.161,145,2.381,146,1.374,147,1.201,148,1.374,149,1.374,150,2.129,151,1.374,152,3.758,153,1.79,154,1.374,155,1.374,156,2.552,157,1.374,158,1.441,159,0.828,160,1.374,161,1.374,162,3.495,163,1.374,164,3.289,165,3.36,166,2.738,167,1.374,168,1.374,169,4.355,170,1.374,171,1.374,172,1.374,173,1.374,174,1.374,175,1.374,176,1.374,177,1.374,178,1.374,179,1.374,180,1.201,181,3.161,182,1.374,183,1.374,184,1.201,185,1.374,186,2.081,187,2.381,188,1.374,189,1.374,190,1.374,191,2.738,192,1.374,193,1.374,194,1.374,195,2.081,196,2.552,197,1.374,198,1.374,199,2.661,200,1.374,201,2.381,202,1.992,203,1.374,204,0.786,205,0.828,206,1.374,207,0.933,208,0.786,209,0.933,210,1.001,211,0.828,212,2.296,213,3.151,214,3.392,215,2.296,216,0.877,217,1.001,218,0.471,219,0.56,220,1.898,221,1.087,222,0.933,223,1.617,224,1.201,225,1.201,226,1.617,227,1.201,228,1.001,229,1.374,230,2.886,231,0.933,232,0.786,233,0.933,234,1.201,235,2.081,236,1.001,237,1.374,238,1.001,239,1.374,240,1.001,241,1.374,242,1.001,243,1.201,244,0.828,245,0.54,246,0.604,247,1.374,248,1.374,249,1.374,250,1.374,251,2.516,252,1.374,253,1.374,254,1.374,255,1.374,256,1.374,257,1.374,258,1.374,259,3.096,260,5.286,261,1.374,262,1.374,263,1.374,264,2.429,265,1.001,266,3.335,267,3.151,268,1.374,269,0.877,270,1.001,271,1.374,272,1.374,273,1.087,274,0.877,275,1.617,276,1.374,277,0.877,278,1.374,279,1.374,280,1.374,281,1.374,282,1.374,283,1.374,284,1.374,285,1.374,286,1.374,287,1.374,288,1.374,289,2.081,290,1.374,291,1.374,292,2.381,293,3.151,294,1.374,295,1.374,296,2.381,297,1.374,298,1.374,299,1.374,300,1.374,301,1.374,302,1.374,303,1.374,304,1.374,305,1.374,306,2.381,307,1.374,308,1.374,309,1.001,310,1.374,311,2.381,312,1.374,313,1.374]],["title/modules/AuthModule.html",[0,1.233,79,2.788]],["body/modules/AuthModule.html",[0,1.797,2,1.529,3,0.081,4,0.104,5,0.093,7,0.421,8,0.012,9,0.629,10,3.49,11,1.721,14,2.554,47,0.104,48,0.12,49,0.007,50,0.007,53,2.021,70,1.721,71,1.876,72,1.876,73,1.721,74,3.108,75,1.876,79,5.636,82,4.566,88,4.566,89,2.67,90,1.876,91,1.876,98,3.156,99,3.156,114,4.36,220,4.313,221,2.856,314,3.156,315,3.612,316,3.156,317,4.861,318,4.861,319,4.861,320,4.861,321,4.861,322,3.612,323,3.612,324,2.856,325,5.14,326,1.721,327,3.612,328,3.612,329,6.888,330,3.612,331,3.612,332,3.612,333,3.612,334,3.612,335,3.156]],["title/injectables/AuthService.html",[105,0.789,220,2.474]],["body/injectables/AuthService.html",[3,0.035,4,0.045,5,0.04,7,0.372,8,0.012,9,0.272,11,0.744,45,1.366,47,0.045,48,0.052,49,0.004,50,0.004,55,0.191,56,0.825,59,1.139,61,1.985,62,1.656,66,1.67,67,1.879,105,0.511,106,0.553,117,2.923,118,2.103,119,2.324,120,2.324,128,3.64,129,2.324,132,2.324,133,3.118,138,2.051,139,1.746,140,0.873,141,1.746,142,2.676,143,2.324,144,3.118,147,2.324,150,2.566,153,2.673,158,1.587,159,0.942,180,2.324,181,3.118,184,2.324,195,2.324,196,1.061,199,2.625,202,1.5,208,0.893,219,0.637,220,1.602,222,1.061,223,1.806,224,1.366,225,1.366,226,3.118,227,1.366,234,1.366,235,2.324,243,1.366,244,0.942,245,0.615,246,0.687,251,2.822,264,2.531,266,2.767,273,2.103,274,1.696,277,2.214,289,2.324,324,1.236,336,1.366,337,2.659,338,2.324,339,2.855,340,2.659,341,2.659,342,4.096,343,1.169,344,1.366,345,2.482,346,5.33,347,3.046,348,3.399,349,3.471,350,3.631,351,1.563,352,1.563,353,2.659,354,1.563,355,2.744,356,1.563,357,2.324,358,1.563,359,2.659,360,1.563,361,1.563,362,2.659,363,1.563,364,1.563,365,2.659,366,1.563,367,1.563,368,1.563,369,1.563,370,1.563,371,1.563,372,1.52,373,1.236,374,1.563,375,1.366,376,1.236,377,0.942,378,1.366,379,1.806,380,1.366,381,1.236,382,1.563,383,1.938,384,1.563,385,2.282,386,1.563,387,1.236,388,1.236,389,1.366,390,3.471,391,1.563,392,3.471,393,2.659,394,1.563,395,1.236,396,3.579,397,1.563,398,1.563,399,2.659,400,1.563,401,1.563,402,2.341,403,1.873,404,1.381,405,1.563,406,1.563,407,1.366,408,3.033,409,2.659,410,3.471,411,1.563,412,2.659,413,1.563,414,3.471,415,1.563,416,1.563,417,1.563,418,2.659,419,1.563,420,1.563,421,1.563,422,1.366,423,1.563,424,1.563,425,1.447,426,2.659,427,1.563,428,1.236,429,2.324,430,1.563,431,1.563,432,1.563,433,1.563,434,1.563,435,1.563,436,1.563,437,1.938,438,1.366,439,1.366,440,1.139,441,1.563,442,1.563,443,1.061,444,1.139,445,1.563,446,1.563,447,2.659,448,1.563,449,2.324,450,1.563,451,1.563,452,1.061]],["title/classes/BaseAPIDocument.html",[48,0.137,453,3.247]],["body/classes/BaseAPIDocument.html",[3,0.109,4,0.14,5,0.124,7,0.254,8,0.012,47,0.14,48,0.161,49,0.009,50,0.009,55,0.589,56,1.944,59,1.091,61,1.5,67,1.5,112,1.319,139,1.319,140,0.66,218,1.656,266,2.913,339,4.465,403,2.867,407,4.226,429,4.226,453,4.957,454,4.226,455,1.765,456,6.955,457,7.358,458,2.126,459,3.524,460,6.955,461,4.836,462,4.836,463,4.836,464,4.836,465,4.836,466,4.836,467,4.836,468,4.836,469,4.836,470,4.836,471,4.836,472,4.836,473,3.824,474,4.226,475,4.836,476,4.836]],["title/classes/ChangePasswordDto.html",[48,0.137,133,2.788]],["body/classes/ChangePasswordDto.html",[3,0.1,4,0.128,5,0.114,7,0.311,8,0.012,47,0.128,48,0.197,49,0.009,50,0.009,55,0.54,58,1.895,59,1.03,62,1.604,112,1.207,128,4.853,133,4.016,135,2.817,140,0.807,218,1.516,266,4.463,404,3.072,455,1.665,458,3.125,477,5.82,478,3.5,479,3.563,480,4.283,481,3.868,482,5.621,483,4.677,484,3.868,485,4.427,486,4.463,487,4.427,488,3.624,489,3.226,490,3.226,491,2.299,492,3.226,493,3.5,494,3.5,495,3.5,496,3.226,497,3.5,498,3.5]],["title/entities/Comment.html",[499,1.956,500,2.133]],["body/entities/Comment.html",[3,0.095,4,0.122,5,0.108,7,0.367,8,0.012,47,0.122,48,0.14,49,0.008,50,0.008,55,0.514,58,2.082,59,1.131,62,1.291,140,0.886,202,2.407,219,1.719,245,3.152,246,1.853,339,4.531,455,1.611,499,2.726,500,2.972,501,2.189,502,3.684,503,3.914,504,4.412,505,4.215,506,4.525,507,4.215,508,4.215,509,4.215,510,4.215,511,4.412,512,4.734,513,2.008,514,3.271,515,2.863,516,1.307,517,4.215,518,4.215]],["title/controllers/CommentController.html",[51,1.615,519,2.992]],["body/controllers/CommentController.html",[3,0.084,4,0.107,5,0.095,7,0.38,8,0.012,9,0.645,47,0.107,48,0.123,49,0.008,50,0.008,51,1.458,53,1.458,55,0.452,56,1.624,58,1.677,59,0.911,61,1.624,62,1.369,65,1.925,66,1.511,67,1.624,116,2.233,117,2.74,135,2.891,138,1.677,139,1.428,140,0.828,141,1.428,142,2.394,156,2.517,158,2.394,164,3.769,169,4.206,191,2.701,204,2.992,205,2.233,207,2.517,211,2.233,212,3.815,214,3.815,215,3.815,216,2.364,217,2.701,218,1.269,230,2.517,231,2.517,232,2.119,233,2.517,251,2.216,259,2.701,264,1.407,265,2.701,266,2.233,269,3.339,270,2.701,500,3.425,519,3.815,520,3.239,521,5.303,522,5.235,523,3.707,524,4.834,525,3.707,526,3.707,527,3.239,528,3.154,529,3.707,530,2.931,531,3.707,532,3.707,533,3.707,534,3.871,535,3.239,536,3.239,537,2.931,538,3.707,539,3.707,540,3.707,541,3.707,542,3.707,543,3.707]],["title/modules/CommentModule.html",[0,1.233,80,2.788]],["body/modules/CommentModule.html",[0,2.13,2,2.134,3,0.114,4,0.146,5,0.13,7,0.406,8,0.012,9,0.878,14,2.506,47,0.146,48,0.168,49,0.009,50,0.009,53,2.532,70,2.402,71,2.619,72,2.619,73,2.402,74,3.685,75,2.619,80,5.364,89,3.345,90,2.619,91,2.619,500,2.619,519,5.17,534,5.038,535,4.406,544,4.406,545,4.406,546,5.043,547,3.216,548,2.402,549,5.043,550,3.674,551,5.043]],["title/injectables/CommentService.html",[105,0.789,534,2.619]],["body/injectables/CommentService.html",[3,0.086,4,0.111,5,0.099,7,0.384,8,0.012,9,0.668,47,0.111,48,0.128,49,0.008,50,0.008,55,0.468,56,1.664,59,1.077,61,1.664,62,1.395,67,1.664,105,1.031,106,1.359,117,2.77,138,1.982,139,1.687,140,0.844,141,1.687,142,2.453,158,3.062,202,2.332,208,2.194,219,1.565,251,2.617,264,2.036,343,2.359,372,2.194,385,1.907,402,2.194,403,1.755,500,3.478,513,1.828,521,4.687,524,4.656,534,3.422,536,3.353,537,3.035,548,1.828,550,2.796,552,3.353,553,5.364,554,3.838,555,4.547,556,3.838,557,5.364,558,5.364,559,3.838,560,5.364,561,3.838,562,2.606,563,3.838,564,5.364,565,3.838,566,3.838,567,3.838,568,3.838,569,3.838,570,3.838,571,3.353,572,3.035,573,3.035]],["title/classes/CommonEntity.html",[48,0.137,514,2.347]],["body/classes/CommonEntity.html",[3,0.113,4,0.145,5,0.129,7,0.263,8,0.012,47,0.145,48,0.167,49,0.009,50,0.009,55,0.61,58,2.266,59,1.231,62,1.446,112,1.366,140,0.965,158,3.234,339,4.686,455,1.805,513,2.385,514,3.664,574,4.375,575,7.071,576,7.071,577,5.895,578,7.071,579,5.007,580,6.411,581,5.007,582,7.071,583,5.007,584,5.007,585,5.007]],["title/classes/ConfirmEmailDto.html",[48,0.137,144,2.788]],["body/classes/ConfirmEmailDto.html",[3,0.129,4,0.165,5,0.147,8,0.012,47,0.165,48,0.19,49,0.01,50,0.01,55,0.697,59,1.212,62,1.763,112,1.559,140,0.95,144,4.729,150,3.434,422,6.562,455,1.961,586,6.562,587,4.995,588,5.716,589,5.716]],["title/classes/CreateAuthDto.html",[48,0.137,590,2.992]],["body/classes/CreateAuthDto.html",[3,0.143,4,0.183,5,0.163,8,0.011,47,0.183,48,0.211,49,0.011,50,0.011,112,1.727,590,5.393,591,5.532,592,5.005]],["title/classes/CreateCommentDto.html",[48,0.137,524,2.619]],["body/classes/CreateCommentDto.html",[3,0.109,4,0.139,5,0.124,7,0.365,8,0.012,47,0.139,48,0.208,49,0.009,50,0.009,55,0.587,58,2.004,59,1.089,62,1.411,112,1.315,135,2.979,140,0.853,218,1.65,245,3.069,246,2.119,455,1.761,458,3.231,479,3.768,480,4.428,486,4.184,488,3.778,491,2.503,500,2.503,503,4.588,524,3.989,593,6.068,594,3.811,595,4.211,596,4.819,597,5.491,598,4.211,599,4.819]],["title/classes/CreateOrderDto.html",[48,0.137,600,2.619]],["body/classes/CreateOrderDto.html",[3,0.143,4,0.183,5,0.163,8,0.011,47,0.183,48,0.211,49,0.011,50,0.011,112,1.727,600,4.721,601,5.532,602,5.005]],["title/classes/CreateProductDto.html",[48,0.137,603,2.619]],["body/classes/CreateProductDto.html",[3,0.072,4,0.093,5,0.082,7,0.248,8,0.012,47,0.093,48,0.157,49,0.007,50,0.007,55,0.39,58,2.275,59,1.236,62,1.808,112,0.874,135,3.382,139,1.525,140,1.014,141,1.987,218,1.097,274,2.043,452,2.175,455,1.327,458,3.474,479,4.278,480,4.761,486,3.713,488,3.964,491,1.663,503,4.138,603,3.005,604,6.366,605,2.533,606,5.739,607,4.786,608,5.739,609,5.739,610,5.739,611,3.203,612,3.203,613,4.711,614,3.203,615,3.203,616,4.711,617,3.203,618,6.163,619,3.203,620,3.203,621,2.447,622,3.203,623,3.203,624,3.203,625,3.203,626,3.203,627,5.386,628,4.884,629,4.711,630,2.799,631,2.799,632,3.203]],["title/classes/CreateRatingDto.html",[48,0.137,633,2.619]],["body/classes/CreateRatingDto.html",[3,0.126,4,0.162,5,0.144,7,0.295,8,0.012,47,0.162,48,0.186,49,0.01,50,0.01,55,0.683,59,1.197,112,1.528,140,0.938,202,2.235,219,2.284,455,1.937,621,3.573,633,4.387,634,6.505,635,4.43,636,6.505,637,4.255,638,5.602,639,5.602]],["title/classes/CreateReservationDto.html",[48,0.137,640,2.619]],["body/classes/CreateReservationDto.html",[3,0.086,4,0.11,5,0.098,7,0.324,8,0.012,47,0.11,48,0.178,49,0.008,50,0.008,55,0.464,58,2.251,59,1.223,62,1.505,112,1.038,135,3.346,140,0.958,153,2.541,218,1.303,245,2.863,246,1.674,274,2.428,403,1.741,425,2.071,455,1.502,458,3.454,479,4.232,480,4.733,486,4.232,488,3.962,491,1.977,500,1.977,503,4.232,577,5.555,595,3.326,597,4.869,598,3.326,640,3.402,641,6.363,642,3.01,643,6.139,644,6.139,645,5.38,646,3.807,647,3.807,648,3.807,649,3.887,650,3.807,651,3.807,652,3.807,653,5.334]],["title/classes/CreateUserDto.html",[48,0.137,199,2.347]],["body/classes/CreateUserDto.html",[3,0.077,4,0.099,5,0.088,7,0.306,8,0.012,47,0.099,48,0.165,49,0.007,50,0.007,55,0.419,58,2.165,59,1.176,62,1.707,112,0.937,135,3.035,139,1.587,140,0.922,141,1.92,150,3.219,199,2.835,218,1.177,404,3.509,455,1.397,458,3.266,479,3.839,480,4.476,482,5.038,483,3.922,486,3.839,488,3.83,489,2.504,490,2.504,491,1.785,492,2.504,493,5.342,494,2.717,495,2.717,496,2.504,497,2.717,498,3.922,628,5.085,654,6.151,655,2.504,656,4.24,657,3.859,658,3.003,659,3.436,660,5.085,661,3.436,662,3.436,663,3.436,664,3.436,665,3.436,666,3.436,667,3.436,668,3.436,669,4.334,670,4.334,671,1.87,672,3.003,673,2.504,674,2.717]],["title/modules/DatabaseModule.html",[0,1.233,81,2.788]],["body/modules/DatabaseModule.html",[0,1.916,2,2.104,3,0.112,4,0.144,5,0.128,7,0.391,8,0.012,9,0.865,10,4.334,11,2.368,14,3.171,47,0.144,48,0.165,49,0.009,50,0.009,81,4.334,140,0.678,347,4.028,373,3.931,404,2.582,425,3.472,499,2.368,501,2.582,547,3.171,548,2.368,660,4.344,675,4.972,676,6.382,677,4.972,678,4.344,679,4.344,680,4.972,681,3.931,682,4.972,683,4.344,684,4.972,685,4.972,686,4.972,687,4.972,688,4.972,689,4.972,690,4.972,691,4.972,692,4.972]],["title/modules/EmailModule.html",[0,1.233,82,2.619]],["body/modules/EmailModule.html",[0,2.141,2,2.157,3,0.115,4,0.147,5,0.131,7,0.375,8,0.012,9,0.887,10,4.403,11,2.428,14,2.533,47,0.147,48,0.17,49,0.009,50,0.009,70,2.428,71,2.647,72,2.647,73,2.428,74,3.704,75,3.704,82,5.133,89,3.368,90,2.647,91,2.647,348,5.348,378,4.454,693,4.454,694,4.454,695,4.454,696,5.097]],["title/injectables/EmailService.html",[105,0.789,348,2.619]],["body/injectables/EmailService.html",[3,0.101,4,0.129,5,0.115,7,0.375,8,0.012,9,0.778,11,2.129,47,0.129,48,0.149,49,0.009,50,0.009,55,0.545,56,1.846,59,1.165,61,1.386,65,2.321,66,1.822,67,1.386,105,1.144,106,1.583,111,3.035,138,1.907,139,1.623,140,0.913,141,1.623,202,1.342,335,3.905,343,1.965,347,4.368,348,3.796,385,3.325,455,1.676,697,3.905,698,6.692,699,5.952,700,3.256,701,5.952,702,5.952,703,6.692,704,4.469,705,4.469,706,6.692,707,4.469,708,5.952,709,3.905,710,4.469,711,4.469,712,4.469,713,4.469,714,4.469,715,4.469,716,4.469]],["title/injectables/GoogleAuthGuard.html",[105,0.789,236,2.992]],["body/injectables/GoogleAuthGuard.html",[3,0.131,4,0.168,5,0.149,7,0.398,8,0.012,9,1.011,47,0.168,48,0.193,49,0.01,50,0.01,105,1.351,106,2.058,236,5.124,326,2.767,516,2.181,657,3.018,671,3.161,717,5.077,718,3.706,719,7.033,720,3.945]],["title/injectables/GoogleAuthStrategy.html",[105,0.789,317,2.788]],["body/injectables/GoogleAuthStrategy.html",[3,0.074,4,0.094,5,0.084,7,0.364,8,0.012,9,0.568,11,1.554,47,0.094,48,0.109,49,0.007,50,0.007,55,0.398,56,1.481,59,0.831,61,1.012,62,1.56,66,1.947,105,0.918,106,1.155,117,2.144,138,1.53,139,1.696,140,0.651,141,1.303,150,2.843,162,2.729,202,1.696,208,1.864,251,2.021,264,2.36,277,4.41,317,3.243,326,1.554,343,2.1,345,3.549,347,3.952,372,2.729,377,1.965,385,2.373,402,1.864,403,1.492,440,2.377,443,2.215,444,2.377,516,1.481,656,2.377,657,3.437,671,1.775,700,2.377,721,4.936,722,2.081,723,3.836,724,3.836,725,4.775,726,3.836,727,2.579,728,3.262,729,5.649,730,4.467,731,6.217,732,2.85,733,4.775,734,2.081,735,2.579,736,2.85,737,2.215,738,2.579,739,3.262,740,2.85,741,3.262,742,2.579,743,3.262,744,2.85,745,4.467,746,4.936,747,4.936,748,2.85,749,2.85,750,2.85,751,4.173,752,2.85,753,2.85,754,2.579,755,3.262,756,2.85,757,2.85,758,4.173,759,2.85]],["title/classes/HttpExceptionFilter.html",[48,0.137,760,3.247]],["body/classes/HttpExceptionFilter.html",[3,0.096,4,0.123,5,0.109,7,0.303,8,0.012,9,0.74,47,0.123,48,0.142,49,0.008,50,0.008,55,0.518,56,1.786,59,0.74,61,1.319,62,1.649,112,1.16,138,1.363,139,1.16,140,0.58,141,1.16,166,4.195,209,3.91,242,3.099,264,2.774,275,3.91,372,2.431,403,2.633,443,4.432,449,6.112,621,2.209,674,4.553,681,5.161,760,4.553,761,5.031,762,3.717,763,5.031,764,6.527,765,5.758,766,6.994,767,4.253,768,4.253,769,4.253,770,3.717,771,4.253,772,4.253,773,4.253,774,6.527,775,4.253,776,4.253,777,5.161,778,5.161,779,3.717,780,5.758,781,5.758,782,5.758,783,4.253]],["title/injectables/JwtAuthGuard.html",[105,0.789,232,2.347]],["body/injectables/JwtAuthGuard.html",[3,0.134,4,0.171,5,0.152,7,0.375,8,0.012,9,1.033,47,0.171,48,0.197,49,0.01,50,0.01,105,1.368,106,2.101,232,4.07,326,2.825,516,2.208,718,3.783,720,4.028,784,5.183,785,7.121]],["title/injectables/JwtAuthStrategy.html",[105,0.789,318,2.788]],["body/injectables/JwtAuthStrategy.html",[3,0.096,4,0.124,5,0.11,7,0.397,8,0.012,9,0.745,11,2.038,47,0.124,48,0.142,49,0.008,50,0.008,55,0.522,56,1.793,59,1.006,61,1.327,67,1.327,105,1.111,106,1.515,117,2.485,138,1.852,139,1.577,140,0.789,141,1.577,142,1.957,318,3.926,326,2.038,343,2.542,344,3.739,345,3.75,347,4.41,377,2.578,379,4.762,380,3.739,385,2.873,408,3.739,473,3.384,516,1.793,722,2.729,723,2.906,724,2.906,726,3.926,734,2.729,737,2.906,786,5.721,787,5.052,788,4.279,789,5.781,790,4.279,791,4.279,792,4.279,793,4.279,794,4.279,795,4.279,796,4.279,797,4.279]],["title/classes/KakaoAuthGuard.html",[48,0.137,238,2.992]],["body/classes/KakaoAuthGuard.html",[3,0.134,4,0.172,5,0.153,7,0.376,8,0.012,47,0.172,48,0.198,49,0.01,50,0.01,112,1.625,238,5.202,326,2.837,516,2.214,657,3.094,671,3.241,718,3.799,720,4.045,798,5.205,799,7.139]],["title/injectables/KakaoAuthStrategy.html",[105,0.789,319,2.788]],["body/injectables/KakaoAuthStrategy.html",[3,0.075,4,0.097,5,0.086,7,0.367,8,0.012,9,0.583,11,1.594,47,0.097,48,0.111,49,0.007,50,0.007,55,0.408,56,1.509,59,0.847,61,1.038,62,1.574,66,1.984,105,0.935,106,1.185,117,2.176,138,1.559,139,1.717,140,0.664,141,1.327,150,2.622,162,2.781,202,1.461,208,1.913,251,2.059,264,2.647,277,4.014,319,3.304,326,1.594,343,2.139,345,3.577,347,3.987,372,2.781,377,2.016,385,2.418,402,1.913,403,1.531,440,2.439,443,2.273,444,2.439,516,1.509,656,2.439,657,3.473,671,1.821,700,2.439,722,2.135,723,3.893,724,3.893,726,3.893,727,2.646,730,4.533,734,2.135,737,2.273,738,2.646,742,2.646,745,3.847,746,5.009,747,2.925,748,2.925,749,2.925,750,2.925,751,4.252,752,2.925,753,2.925,754,2.646,756,2.925,757,2.925,758,4.252,759,2.925,800,5.009,801,4.866,802,2.925,803,5.009,804,3.347,805,4.252,806,2.646,807,3.347,808,3.347,809,5.733,810,3.347,811,3.347]],["title/injectables/LocalAuthGuard.html",[105,0.789,228,2.992]],["body/injectables/LocalAuthGuard.html",[3,0.131,4,0.168,5,0.149,7,0.398,8,0.012,9,1.011,47,0.168,48,0.193,49,0.01,50,0.01,105,1.351,106,2.058,228,5.124,326,2.767,516,2.181,657,3.018,671,3.161,718,3.706,720,3.945,812,5.077,813,7.033]],["title/injectables/LocalAuthStrategy.html",[105,0.789,320,2.788]],["body/injectables/LocalAuthStrategy.html",[3,0.099,4,0.127,5,0.113,7,0.389,8,0.012,9,0.763,47,0.127,48,0.146,49,0.008,50,0.008,55,0.535,56,1.823,59,1.023,61,1.36,62,1.715,65,2.278,67,1.36,105,1.129,106,1.553,117,2.516,138,1.883,139,1.603,140,0.802,141,1.603,150,3.032,162,3.359,202,1.765,219,1.788,220,4.58,221,3.468,320,3.991,326,2.089,343,1.928,404,3.678,516,1.823,673,3.196,722,2.797,723,2.978,724,2.978,726,3.991,734,2.797,737,2.978,787,5.136,814,5.793,815,4.385,816,4.385,817,5.877,818,4.385,819,4.385,820,4.385]],["title/classes/LoginUserDto.html",[48,0.137,226,2.788]],["body/classes/LoginUserDto.html",[3,0.109,4,0.14,5,0.125,7,0.331,8,0.012,47,0.14,48,0.209,49,0.009,50,0.009,55,0.591,58,2.013,59,1.094,62,1.662,112,1.324,135,2.992,140,0.857,150,3.49,218,1.661,226,4.266,404,3.964,455,1.769,458,3.24,479,3.785,480,4.439,486,3.785,488,3.791,489,3.536,490,3.536,491,2.52,492,3.536,655,3.536,658,4.24,669,5.49,672,4.24,821,6.088,822,4.852,823,4.852,824,4.852]],["title/injectables/NaverAuthGuard.html",[105,0.789,240,2.992]],["body/injectables/NaverAuthGuard.html",[3,0.131,4,0.168,5,0.149,7,0.398,8,0.012,9,1.011,47,0.168,48,0.193,49,0.01,50,0.01,105,1.351,106,2.058,240,5.124,326,2.767,516,2.181,657,3.018,671,3.161,718,3.706,720,3.945,825,5.077,826,7.033]],["title/injectables/NaverAuthStrategy.html",[105,0.789,321,2.788]],["body/injectables/NaverAuthStrategy.html",[3,0.089,4,0.115,5,0.102,7,0.388,8,0.012,9,0.691,11,1.89,47,0.115,48,0.132,49,0.008,50,0.008,55,0.484,56,1.702,59,0.956,61,1.23,62,1.664,66,2.238,105,1.055,106,1.405,117,2.389,138,1.759,139,1.717,140,0.749,141,1.497,150,1.814,162,3.138,277,4.916,309,2.891,321,3.728,326,1.89,343,2.413,345,3.758,347,4.216,377,2.39,385,2.728,516,1.702,657,2.06,671,2.158,700,2.891,722,2.53,723,4.275,724,4.275,726,4.275,727,3.137,730,4.977,732,3.466,734,2.53,737,2.694,738,3.137,740,3.466,742,3.137,744,3.466,745,3.137,802,3.466,803,5.5,805,4.797,827,5.5,828,5.489,829,3.466,830,3.967,831,3.967,832,3.967,833,3.967]],["title/classes/NewPasswordDto.html",[48,0.137,181,2.788]],["body/classes/NewPasswordDto.html",[3,0.11,4,0.142,5,0.126,7,0.333,8,0.012,47,0.142,48,0.211,49,0.009,50,0.009,55,0.598,58,1.571,59,0.853,62,1.427,112,1.337,128,5.102,135,2.335,140,0.669,181,4.295,218,1.679,404,3.285,455,1.781,458,2.781,478,3.877,479,2.954,480,3.81,481,4.284,482,5.849,483,5.001,484,4.284,486,3.81,488,3.441,489,3.572,490,3.572,491,2.546,492,3.572,493,3.877,494,3.877,495,3.877,496,3.572,497,3.877,498,3.877,834,5.527,835,4.903]],["title/classes/Order.html",[48,0.137,836,2.619]],["body/classes/Order.html",[3,0.143,4,0.184,5,0.163,8,0.011,47,0.184,48,0.212,49,0.011,50,0.011,112,1.735,836,4.733,837,5.556]],["title/controllers/OrderController.html",[51,1.615,838,2.992]],["body/controllers/OrderController.html",[3,0.081,4,0.103,5,0.092,7,0.361,8,0.012,9,0.622,47,0.103,48,0.119,49,0.007,50,0.007,51,1.406,53,1.406,55,0.436,56,1.583,58,2.198,59,1.194,61,2.128,62,1.724,65,1.857,66,1.458,67,2.128,116,2.154,138,2.079,139,1.77,140,0.885,141,1.77,158,3.263,191,2.605,204,2.917,205,3.585,211,2.154,216,2.281,218,1.224,269,3.255,528,3.074,600,4.551,836,2.281,838,3.718,839,3.124,840,5.67,841,4.459,842,4.459,843,4.035,844,3.124,845,3.575,846,3.575,847,3.124,848,3.575,849,3.124,850,4.035,851,3.575,852,3.124,853,5.099,854,5.103,855,3.575,856,2.827,857,2.428,858,3.795,859,3.124,860,3.124,861,4.035,862,3.124,863,3.575,864,3.575,865,3.575,866,3.575,867,3.575,868,3.575,869,3.575,870,3.575,871,3.575,872,3.575,873,3.575]],["title/modules/OrderModule.html",[0,1.233,83,2.788]],["body/modules/OrderModule.html",[0,2.174,2,2.23,3,0.119,4,0.152,5,0.135,7,0.381,8,0.012,9,0.917,47,0.152,48,0.175,49,0.01,50,0.01,53,2.603,70,2.509,71,2.736,72,2.736,73,2.509,74,3.761,75,2.736,83,5.425,89,3.439,90,2.736,91,2.736,838,5.276,858,5.095,859,4.604,874,4.604,875,4.604,876,5.268,877,5.268]],["title/injectables/OrderService.html",[105,0.789,858,2.619]],["body/injectables/OrderService.html",[3,0.087,4,0.112,5,0.099,7,0.327,8,0.012,9,0.674,47,0.112,48,0.129,49,0.008,50,0.008,55,0.472,56,1.673,59,1.23,61,2.329,62,1.594,67,2.192,105,1.037,106,1.37,138,2.153,139,1.833,140,0.917,141,1.833,158,3.347,403,1.769,528,3.25,600,4.508,621,4.042,836,4.508,840,5.872,841,4.714,842,4.714,843,4.266,844,4.714,847,4.714,849,4.714,852,4.714,853,5.1,858,3.441,860,3.381,861,4.266,862,3.381,878,3.381,879,3.869,880,3.869,881,3.869,882,3.869,883,3.869,884,6.175,885,3.869,886,3.869,887,3.869]],["title/classes/PageDto.html",[48,0.137,888,2.788]],["body/classes/PageDto.html",[3,0.101,4,0.13,5,0.116,7,0.353,8,0.012,47,0.13,48,0.199,49,0.009,50,0.009,55,0.548,58,1.915,59,1.169,66,3.122,112,1.227,138,1.441,139,1.227,140,0.976,141,1.227,218,1.54,275,5.057,343,1.977,425,3.252,455,1.683,488,3.653,491,2.336,627,5.866,888,4.059,889,3.93,890,5.693,891,5.977,892,6.507,893,5.199,894,5.977,895,4.497,896,4.497,897,4.497,898,3.277,899,3.93,900,4.497,901,4.497]],["title/classes/PageMetaDto.html",[48,0.137,893,2.788]],["body/classes/PageMetaDto.html",[3,0.084,4,0.107,5,0.095,7,0.275,8,0.012,47,0.107,48,0.123,49,0.008,50,0.008,55,0.452,58,2.313,59,1.292,66,3.37,112,1.011,138,1.188,139,1.011,140,1.012,141,1.011,218,1.269,343,2.302,452,2.517,455,1.474,488,4.375,621,3.936,649,4.805,890,2.701,893,3.555,902,5.993,903,3.239,904,6.069,905,6.069,906,5.5,907,5.303,908,6.069,909,5.303,910,3.707,911,4.805,912,5.235,913,3.707,914,3.707,915,3.707,916,3.707,917,3.707,918,3.707,919,2.931,920,3.707,921,2.233,922,5.303,923,3.707,924,4.575,925,3.707,926,3.707,927,3.707,928,3.707,929,3.707,930,3.707]],["title/interfaces/PageMetaDtoParametersInterface.html",[911,2.992,931,2.04]],["body/interfaces/PageMetaDtoParametersInterface.html",[3,0.126,4,0.161,5,0.143,7,0.294,8,0.012,47,0.161,49,0.01,50,0.01,55,0.68,140,0.936,455,1.932,621,3.859,890,4.066,898,4.066,906,6.13,911,5,919,4.413,921,4.995,931,2.773,932,3.559,933,4.876,934,4.876,935,4.413]],["title/classes/PageOptionsDto.html",[48,0.137,921,2.474]],["body/classes/PageOptionsDto.html",[3,0.082,4,0.105,5,0.094,7,0.344,8,0.012,47,0.105,48,0.2,49,0.007,50,0.007,55,0.444,58,1.925,59,1.139,66,3.129,67,1.129,112,0.993,140,0.979,141,1.958,218,1.246,428,2.878,452,5.122,455,1.455,458,3.374,459,4.378,491,1.891,621,3.834,670,5.716,836,3.833,902,5.462,907,5.251,909,5.251,921,3.114,922,3.181,924,3.181,936,3.181,937,5.168,938,6.009,939,6.037,940,6.009,941,3.64,942,3.64,943,3.64,944,5.168,945,3.64,946,3.64,947,4.516,948,5.168,949,5.168,950,3.64,951,3.64,952,3.64,953,3.64,954,6.541,955,3.64,956,3.64,957,6.009,958,3.181,959,3.64,960,3.181,961,3.181,962,3.64,963,5.168,964,5.168,965,3.64]],["title/entities/Product.html",[245,1.615,499,1.956]],["body/entities/Product.html",[3,0.063,4,0.081,5,0.072,7,0.327,8,0.012,47,0.081,48,0.094,49,0.006,50,0.006,55,0.343,58,2.385,59,1.296,62,1.702,139,1.411,140,1.015,141,1.576,153,3.488,202,2.043,219,1.147,244,1.695,245,1.682,339,4.778,395,2.225,425,3.984,455,1.204,458,1.237,499,2.037,500,3.533,501,1.461,503,3.117,504,4.972,506,2.225,511,3.513,512,3.116,513,1.34,514,2.444,515,1.911,516,0.873,550,2.05,606,4.52,607,3.769,608,4.52,609,4.52,610,4.52,621,2.687,630,2.459,649,3.116,966,2.459,967,4.091,968,5.173,969,4.52,970,2.814,971,6.545,972,6.545,973,2.814,974,2.459,975,4.277,976,2.814,977,3.737,978,2.814,979,2.225,980,2.814,981,2.814,982,2.814,983,2.814,984,2.814,985,2.459,986,2.814,987,2.814,988,2.814,989,2.814,990,3.382,991,3.737,992,2.814,993,2.459,994,2.814,995,2.459]],["title/controllers/ProductController.html",[51,1.615,996,2.992]],["body/controllers/ProductController.html",[3,0.053,4,0.068,5,0.06,7,0.357,8,0.013,9,0.406,47,0.068,48,0.078,49,0.005,50,0.005,51,0.918,53,0.918,55,0.285,56,1.147,58,1.826,59,0.992,61,1.767,62,1.652,65,1.213,66,0.952,67,1.88,116,1.407,117,2.875,135,3.378,138,1.826,139,1.555,140,0.827,141,1.555,142,2.391,156,1.586,158,3.013,159,1.407,162,2.115,164,2.988,169,3.335,204,2.627,205,1.407,207,1.586,210,2.696,211,1.407,212,2.696,214,4.418,215,2.696,216,1.489,217,1.701,218,0.799,230,1.586,231,1.586,232,1.335,233,1.586,245,2.789,246,1.027,251,2.566,259,4.153,264,1.984,265,1.701,266,1.407,269,1.489,270,1.701,528,2.229,530,1.846,603,4.784,607,4.153,843,1.846,850,1.846,857,2.513,888,1.586,898,1.701,921,3.653,935,1.846,996,2.696,997,2.04,998,4.596,999,3.7,1000,4.016,1001,3.7,1002,4.596,1003,2.335,1004,2.335,1005,2.335,1006,2.335,1007,2.335,1008,2.335,1009,2.335,1010,2.335,1011,2.335,1012,2.04,1013,2.04,1014,2.335,1015,2.335,1016,2.04,1017,2.335,1018,2.335,1019,2.335,1020,2.335,1021,2.335,1022,2.931,1023,2.04,1024,1.846,1025,1.846,1026,2.04,1027,2.335,1028,2.335,1029,2.335,1030,4.016,1031,2.335,1032,2.335,1033,2.335,1034,2.04,1035,3.233,1036,2.335,1037,2.335,1038,2.335,1039,2.335,1040,2.335,1041,2.335,1042,2.335,1043,2.335]],["title/interfaces/ProductInterface.html",[931,2.04,1044,3.247]],["body/interfaces/ProductInterface.html",[3,0.13,4,0.167,5,0.149,7,0.304,8,0.012,47,0.167,49,0.01,50,0.01,55,0.705,140,0.789,209,4.764,245,3.281,246,2.544,455,1.975,516,2.176,931,2.875,932,3.691,1044,5.547,1045,5.056]],["title/modules/ProductModule.html",[0,1.233,84,2.788]],["body/modules/ProductModule.html",[0,2.13,2,2.134,3,0.114,4,0.146,5,0.13,7,0.406,8,0.012,9,0.878,14,2.506,47,0.146,48,0.168,49,0.009,50,0.009,53,2.532,70,2.402,71,2.619,72,2.619,73,2.402,74,3.685,75,2.619,84,5.364,89,3.345,90,2.619,91,2.619,245,1.983,246,2.217,547,3.216,548,2.402,996,5.17,1022,5.038,1023,4.406,1046,4.406,1047,4.406,1048,5.043,1049,5.043,1050,5.043]],["title/injectables/ProductService.html",[105,0.789,1022,2.619]],["body/injectables/ProductService.html",[3,0.048,4,0.062,5,0.055,7,0.347,8,0.013,9,0.373,47,0.062,48,0.071,49,0.005,50,0.005,55,0.261,56,1.07,59,1.016,61,1.692,62,1.616,67,1.903,105,0.663,106,0.758,117,2.823,138,1.869,139,1.591,140,0.796,141,1.591,142,2.275,158,3.095,159,1.29,162,1.973,202,1.979,208,1.223,219,0.873,245,2.661,246,0.941,251,3.075,264,2.626,274,1.365,343,1.518,372,1.223,385,1.064,388,1.693,402,1.223,403,1.983,425,1.165,437,3.16,501,2.253,513,1.02,548,1.02,555,3.379,562,1.454,571,1.87,572,1.693,573,1.693,603,4.57,607,5.042,888,1.454,893,3.379,898,2.515,899,1.87,906,2.729,921,3.697,935,1.693,967,3.429,969,4.769,1000,3.79,1012,1.87,1022,2.201,1024,1.693,1025,1.693,1026,1.87,1035,3.016,1051,1.87,1052,3.451,1053,3.451,1054,3.451,1055,3.451,1056,2.14,1057,2.14,1058,3.451,1059,2.14,1060,3.451,1061,2.14,1062,3.451,1063,2.14,1064,3.451,1065,2.14,1066,3.451,1067,2.14,1068,2.14,1069,2.14,1070,2.14,1071,2.14,1072,3.451,1073,3.451,1074,3.451,1075,2.14,1076,1.693,1077,2.14,1078,2.14,1079,2.729,1080,2.14,1081,2.14,1082,3.451,1083,2.14,1084,2.14,1085,2.14,1086,2.14,1087,2.14,1088,2.14,1089,2.14,1090,2.14,1091,2.14,1092,2.14,1093,2.14,1094,2.14,1095,3.451,1096,1.693,1097,2.14,1098,2.14,1099,3.451,1100,2.14,1101,2.14,1102,2.14]],["title/entities/Rating.html",[499,1.956,637,2.347]],["body/entities/Rating.html",[3,0.108,4,0.139,5,0.123,7,0.365,8,0.012,47,0.139,48,0.16,49,0.009,50,0.009,55,0.585,58,2,59,1.086,140,0.851,202,2.383,219,1.958,339,4.457,452,4.238,455,1.757,458,2.112,499,2.973,501,2.495,504,4.238,511,4.238,512,3.5,513,2.288,514,3.567,515,3.262,516,1.489,621,3.241,636,6.058,637,4.348,979,3.798,1103,4.197,1104,4.197,1105,4.803,1106,4.803,1107,4.803,1108,5.453,1109,4.803]],["title/controllers/RatingController.html",[51,1.615,1110,2.992]],["body/controllers/RatingController.html",[3,0.11,4,0.141,5,0.125,7,0.402,8,0.012,9,0.848,47,0.141,48,0.162,49,0.009,50,0.009,51,1.915,53,1.915,65,2.529,66,1.985,67,1.51,116,2.934,117,1.848,156,3.307,164,2.783,169,3.106,204,2.783,205,3.794,207,3.307,211,2.934,230,3.307,231,3.307,232,2.783,233,3.307,251,2.061,264,1.848,633,4.451,637,2.783,856,3.85,857,3.307,1110,4.588,1111,4.255,1112,4.451,1113,4.869,1114,3.85,1115,3.85,1116,4.869,1117,4.869,1118,5.502,1119,4.869,1120,4.869]],["title/modules/RatingModule.html",[0,1.233,85,2.788]],["body/modules/RatingModule.html",[0,2.13,2,2.134,3,0.114,4,0.146,5,0.13,7,0.406,8,0.012,9,0.878,14,2.506,47,0.146,48,0.168,49,0.009,50,0.009,53,2.532,70,2.402,71,2.619,72,2.619,73,2.402,74,3.685,75,2.619,85,5.364,89,3.345,90,2.619,91,2.619,547,3.216,548,2.402,637,2.882,1110,5.17,1112,5.038,1121,4.406,1122,4.406,1123,5.043,1124,5.043,1125,5.043,1126,5.043,1127,5.043]],["title/injectables/RatingService.html",[105,0.789,1112,2.619]],["body/injectables/RatingService.html",[3,0.102,4,0.131,5,0.116,7,0.404,8,0.012,9,0.788,47,0.131,48,0.151,49,0.009,50,0.009,55,0.552,56,1.861,59,1.045,61,1.404,67,1.404,105,1.153,106,1.603,117,2.556,138,1.923,139,1.637,140,0.819,141,1.637,142,2.07,202,1.359,219,1.846,251,2.54,264,1.718,343,2.639,385,2.249,513,2.156,548,2.156,555,4.87,562,3.074,633,4.892,637,2.587,1112,3.828,1114,3.579,1115,3.579,1118,5.245,1128,3.955,1129,6.002,1130,4.526,1131,4.526,1132,6.002,1133,6.002,1134,4.526,1135,3.955,1136,4.526,1137,4.526,1138,4.526,1139,4.526]],["title/modules/RedisModule.html",[0,1.233,86,2.788]],["body/modules/RedisModule.html",[0,1.951,2,2.165,3,0.115,4,0.148,5,0.131,7,0.395,8,0.012,9,0.891,10,4.413,11,2.437,14,3.23,47,0.148,48,0.17,49,0.009,50,0.009,86,4.413,202,1.536,347,4.083,350,4.045,373,4.045,375,4.47,376,4.045,387,4.045,404,2.657,425,2.784,678,4.47,679,4.47,681,4.045,683,4.47,1140,5.116,1141,5.116,1142,6.499,1143,5.679,1144,5.116,1145,5.116,1146,5.116,1147,5.116,1148,5.116,1149,5.116,1150,5.116,1151,5.116]],["title/interfaces/RequestWithUserInterface.html",[164,2.347,931,2.04]],["body/interfaces/RequestWithUserInterface.html",[3,0.128,4,0.164,5,0.146,7,0.365,8,0.012,47,0.164,49,0.01,50,0.01,55,0.691,140,0.774,164,3.961,202,2.496,209,5.082,219,2.312,242,4.131,455,1.951,516,2.149,931,2.818,932,3.616,1152,4.955]],["title/entities/Reservation.html",[153,1.956,499,1.956]],["body/entities/Reservation.html",[3,0.084,4,0.108,5,0.096,7,0.348,8,0.012,47,0.108,48,0.124,49,0.008,50,0.008,55,0.454,58,2.317,59,1.259,62,1.491,140,1.014,153,2.503,202,2.348,219,1.519,245,3.075,246,1.638,339,4.726,425,2.859,455,1.48,458,1.638,499,1.775,501,1.935,503,3.667,504,5.047,506,2.947,511,4.133,512,3.829,513,1.775,514,3.003,515,2.531,516,1.156,577,4.155,631,3.256,643,5.319,644,5.319,645,5.319,649,3.829,979,2.947,985,3.256,990,2.947,991,4.592,1153,3.256,1154,3.726,1155,3.726,1156,3.726,1157,3.726,1158,3.726,1159,3.256,1160,5.255,1161,3.726,1162,3.726,1163,3.726,1164,3.726,1165,3.726,1166,3.726]],["title/controllers/ReservationController.html",[51,1.615,1167,2.992]],["body/controllers/ReservationController.html",[3,0.059,4,0.076,5,0.067,7,0.361,8,0.012,9,0.457,47,0.076,48,0.087,49,0.006,50,0.006,51,1.032,53,1.032,55,0.32,56,1.258,58,1.786,59,0.97,61,1.729,62,1.437,65,1.364,66,1.071,67,1.729,116,1.582,117,2.819,135,3.352,138,1.786,139,1.52,140,0.822,141,1.52,142,2.549,153,3.162,156,2.754,158,2.549,159,2.444,164,3.919,165,5.035,169,4.062,191,3.611,196,1.783,202,2.113,204,2.318,205,2.444,207,1.783,210,1.913,211,1.582,212,2.955,214,4.39,215,2.955,216,1.675,217,1.913,218,0.899,219,1.071,230,1.783,231,1.783,232,1.501,233,1.783,245,2.696,246,1.154,251,2.359,259,4.061,264,2.286,265,1.913,266,1.582,269,1.675,270,1.913,527,2.294,530,2.076,640,4.488,850,2.076,857,1.783,1013,2.294,1016,2.294,1167,2.955,1168,2.294,1169,4.955,1170,3.544,1171,4.955,1172,4.056,1173,2.626,1174,2.626,1175,2.626,1176,2.626,1177,2.626,1178,2.294,1179,2.626,1180,2.626,1181,2.626,1182,2.626,1183,2.626,1184,2.626,1185,3.161,1186,2.294,1187,2.076,1188,2.076,1189,2.626,1190,2.626,1191,3.544,1192,2.626,1193,2.626,1194,2.626,1195,3.207,1196,2.626,1197,2.626,1198,2.626,1199,2.626,1200,2.626]],["title/modules/ReservationModule.html",[0,1.233,87,2.788]],["body/modules/ReservationModule.html",[0,2.13,2,2.134,3,0.114,4,0.146,5,0.13,7,0.406,8,0.012,9,0.878,14,2.506,47,0.146,48,0.168,49,0.009,50,0.009,53,2.532,70,2.402,71,2.619,72,2.619,73,2.402,74,3.685,75,2.619,87,5.364,89,3.345,90,2.619,91,2.619,153,2.402,244,3.038,547,3.216,548,2.402,1167,5.17,1185,5.038,1186,4.406,1201,4.406,1202,4.406,1203,5.043,1204,5.043,1205,5.043]],["title/injectables/ReservationService.html",[105,0.789,1185,2.619]],["body/injectables/ReservationService.html",[3,0.061,4,0.078,5,0.069,7,0.352,8,0.012,9,0.468,47,0.078,48,0.09,49,0.006,50,0.006,55,0.328,56,1.282,59,1.061,61,1.751,62,1.451,67,1.889,105,0.794,106,0.953,117,2.835,138,1.952,139,1.662,140,0.831,141,1.662,142,2.582,153,3.376,158,2.301,159,2.49,165,2.128,202,2.43,208,1.538,219,1.097,244,1.621,245,2.974,246,1.183,251,2.925,264,2.542,343,1.817,372,1.538,385,1.337,402,2.362,403,1.89,437,1.961,501,2.147,513,1.282,548,1.282,555,3.834,562,1.827,572,2.128,573,2.128,640,4.272,1079,2.128,1096,3.268,1170,3.611,1178,3.611,1185,2.636,1187,2.128,1188,2.128,1191,3.611,1195,3.268,1206,2.351,1207,5.032,1208,4.133,1209,4.133,1210,2.691,1211,2.691,1212,4.133,1213,2.691,1214,2.691,1215,2.691,1216,4.133,1217,2.691,1218,4.133,1219,2.691,1220,2.691,1221,2.691,1222,2.691,1223,2.691,1224,3.268,1225,2.691,1226,2.691,1227,2.691,1228,2.691,1229,2.691,1230,2.691,1231,2.691,1232,2.691,1233,2.351,1234,2.691,1235,2.691,1236,2.691,1237,2.691,1238,2.691]],["title/interfaces/TokenPayloadInterface.html",[379,2.788,931,2.04]],["body/interfaces/TokenPayloadInterface.html",[3,0.135,4,0.174,5,0.154,8,0.012,47,0.174,49,0.01,50,0.01,55,0.732,62,1.731,140,0.82,355,6.285,379,4.873,455,2.021,931,2.985,932,3.832,1239,5.249]],["title/injectables/TransformInterceptor.html",[105,0.789,1240,3.247]],["body/injectables/TransformInterceptor.html",[3,0.164,4,0.136,5,0.121,7,0.323,8,0.012,9,0.817,47,0.198,48,0.156,49,0.009,50,0.009,55,0.572,56,1.906,59,0.817,61,1.455,67,1.455,105,1.181,106,1.661,138,1.503,139,1.28,140,0.838,141,1.28,166,3.418,196,3.186,264,1.78,275,4.174,763,4.099,777,3.709,778,3.709,779,4.099,892,4.099,1240,4.86,1241,3.418,1242,6.854,1243,4.691,1244,6.356,1245,6.854,1246,7.273,1247,4.691,1248,6.146,1249,6.854,1250,6.146,1251,4.691,1252,4.099,1253,3.709,1254,4.691,1255,4.691]],["title/classes/UpdateAuthDto.html",[48,0.137,1256,3.247]],["body/classes/UpdateAuthDto.html",[3,0.133,4,0.171,5,0.152,7,0.374,8,0.012,47,0.171,48,0.197,49,0.01,50,0.01,112,1.611,516,2.203,528,3.559,590,4.304,592,4.671,1256,5.617,1257,5.162,1258,7.103,1259,3.559,1260,4.011,1261,4.011,1262,5.907]],["title/classes/UpdateCommentDto.html",[48,0.137,1263,3.247]],["body/classes/UpdateCommentDto.html",[3,0.134,4,0.171,5,0.152,7,0.375,8,0.012,47,0.171,48,0.197,49,0.01,50,0.01,112,1.618,218,2.031,516,2.208,524,3.783,528,3.574,537,4.69,594,4.69,1259,3.574,1263,5.631,1264,5.183,1265,7.121]],["title/classes/UpdateOrderDto.html",[48,0.137,853,2.788]],["body/classes/UpdateOrderDto.html",[3,0.133,4,0.171,5,0.152,7,0.374,8,0.012,47,0.171,48,0.197,49,0.01,50,0.01,112,1.611,516,2.203,528,3.559,600,3.768,602,4.671,853,4.824,861,4.671,1259,3.559,1260,4.011,1261,4.011,1266,5.162,1267,7.103]],["title/classes/UpdateProductDto.html",[48,0.137,1268,3.247]],["body/classes/UpdateProductDto.html",[3,0.133,4,0.171,5,0.152,7,0.374,8,0.012,47,0.171,48,0.197,49,0.01,50,0.01,112,1.611,516,2.203,603,3.768,605,4.671,1024,4.671,1025,4.671,1259,3.559,1260,4.011,1261,4.011,1268,5.617,1269,5.162,1270,7.103]],["title/classes/UpdateRatingDto.html",[48,0.137,1271,3.247]],["body/classes/UpdateRatingDto.html",[3,0.134,4,0.171,5,0.152,7,0.375,8,0.012,47,0.171,48,0.197,49,0.01,50,0.01,112,1.618,218,2.031,516,2.208,633,3.783,635,4.69,1114,4.69,1115,4.69,1259,3.574,1271,5.631,1272,5.183,1273,7.121]],["title/classes/UpdateReservationDto.html",[48,0.137,1274,3.247]],["body/classes/UpdateReservationDto.html",[3,0.134,4,0.171,5,0.152,7,0.375,8,0.012,47,0.171,48,0.197,49,0.01,50,0.01,112,1.618,218,2.031,516,2.208,640,3.783,642,4.69,1187,4.69,1188,4.69,1259,3.574,1274,5.631,1275,5.183,1276,7.121]],["title/classes/UpdateUserDto.html",[48,0.137,1277,3.247]],["body/classes/UpdateUserDto.html",[3,0.133,4,0.171,5,0.152,7,0.374,8,0.012,47,0.171,48,0.197,49,0.01,50,0.01,112,1.611,199,3.376,222,4.011,223,4.011,516,2.203,655,4.304,1259,3.559,1260,4.011,1261,4.011,1277,5.617,1278,5.162,1279,7.103]],["title/entities/User.html",[202,1.233,499,1.956]],["body/entities/User.html",[3,0.052,4,0.067,5,0.06,7,0.365,8,0.013,9,0.403,47,0.067,48,0.077,49,0.005,50,0.005,55,0.282,58,2.168,59,1.178,62,1.527,67,1.14,117,1.395,139,1.247,140,0.946,141,1.42,150,2.09,153,3.526,162,1.324,202,1.104,208,1.324,244,1.395,245,2.49,246,1.018,251,2.202,264,1.395,274,1.477,339,4.622,372,1.324,402,2.101,403,1.681,404,2.374,425,3.287,440,2.679,443,2.496,444,2.679,455,1.035,458,1.616,499,1.751,500,3.289,501,1.203,504,4.3,511,3.104,513,1.103,514,2.101,515,1.573,516,0.718,550,1.687,637,3.963,656,3.331,657,3.515,671,1.26,674,1.831,754,1.831,961,4.548,967,3.614,974,3.994,977,3.212,990,4.488,1030,3.994,1104,2.024,1108,3.212,1135,2.024,1159,2.024,1195,1.831,1233,3.212,1253,1.831,1280,2.024,1281,3.676,1282,2.316,1283,2.316,1284,2.316,1285,2.316,1286,3.676,1287,2.316,1288,2.316,1289,2.316,1290,2.316,1291,2.316,1292,2.316,1293,2.316,1294,2.316,1295,3.676,1296,3.676,1297,2.024,1298,1.831,1299,3.212,1300,2.316,1301,2.316,1302,3.676,1303,3.212,1304,2.316,1305,2.316,1306,2.316,1307,2.316,1308,3.676,1309,2.316,1310,3.676,1311,2.316,1312,2.316,1313,2.316,1314,2.316,1315,2.316,1316,2.024,1317,2.316,1318,2.316,1319,2.316,1320,2.316,1321,3.676,1322,2.316,1323,3.676,1324,2.316,1325,2.316]],["title/controllers/UsersController.html",[51,1.615,1326,2.992]],["body/controllers/UsersController.html",[3,0.091,4,0.116,5,0.103,7,0.36,8,0.012,9,0.7,47,0.116,48,0.134,49,0.008,50,0.008,51,1.582,53,1.582,55,0.49,56,1.719,58,1.776,59,0.965,61,1.719,62,1.431,65,2.09,66,1.641,67,1.967,116,2.424,117,2.881,138,1.776,139,1.512,140,0.756,141,1.512,142,2.535,158,2.535,199,4.235,202,1.664,204,2.3,205,2.424,211,2.424,216,2.566,218,1.378,222,2.732,223,2.732,251,2.684,264,2.407,269,3.536,345,3.151,377,2.424,389,3.516,438,3.516,856,3.181,857,2.732,1034,4.844,1224,5.014,1326,4.039,1327,3.516,1328,4.844,1329,5.543,1330,3.516,1331,4.023,1332,4.023,1333,4.023,1334,4.023,1335,4.023,1336,4.023,1337,4.023,1338,4.844,1339,4.023,1340,4.023]],["title/modules/UsersModule.html",[0,1.233,88,2.619]],["body/modules/UsersModule.html",[0,2.085,2,2.039,3,0.109,4,0.139,5,0.124,7,0.401,8,0.012,9,0.839,14,2.395,47,0.139,48,0.16,49,0.009,50,0.009,53,2.459,70,2.296,71,2.503,72,2.503,73,2.296,74,3.607,75,3.607,88,5.067,89,3.249,90,2.503,91,2.503,202,1.447,219,1.965,345,4.134,377,2.904,547,3.074,548,2.296,1326,5.06,1341,4.211,1342,4.211,1343,4.211,1344,4.819,1345,4.819,1346,4.819,1347,4.819]],["title/injectables/UsersService.html",[105,0.789,345,2.04]],["body/injectables/UsersService.html",[3,0.05,4,0.064,5,0.057,7,0.339,8,0.013,9,0.383,47,0.064,48,0.073,49,0.005,50,0.005,55,0.268,56,1.094,59,1.028,61,1.716,62,1.65,67,2,105,0.678,106,0.779,117,2.867,118,2.791,138,1.893,139,1.611,140,0.806,141,1.611,142,2.531,150,2.701,153,3.629,158,2.838,159,1.326,169,1.404,199,3.163,202,2.196,210,1.603,219,0.897,222,1.494,223,1.494,244,1.326,245,1.988,246,0.967,251,2.952,264,2.591,273,1.74,277,2.251,338,3.084,343,1.552,345,1.754,355,2.791,357,3.084,385,1.093,388,1.74,402,2.017,403,1.614,404,2.295,428,1.74,437,2.571,439,3.861,501,2.626,513,1.048,548,1.048,555,3.433,562,1.494,597,2.791,995,1.923,1079,2.791,1096,1.74,1224,1.74,1297,1.923,1298,1.74,1303,1.923,1328,3.084,1330,3.084,1338,3.084,1348,1.923,1349,3.529,1350,2.2,1351,2.2,1352,3.529,1353,3.529,1354,2.2,1355,2.2,1356,3.529,1357,2.2,1358,2.2,1359,2.2,1360,2.2,1361,2.2,1362,2.2,1363,2.2,1364,2.2,1365,3.529,1366,3.529,1367,3.529,1368,2.2,1369,2.2,1370,2.2,1371,2.2,1372,2.2,1373,3.529,1374,2.2,1375,2.2,1376,2.2,1377,2.2,1378,2.2,1379,2.2,1380,2.2,1381,2.2,1382,2.2,1383,2.2,1384,2.2,1385,4.418,1386,3.529,1387,2.2,1388,2.2]],["title/interfaces/VerificationTokenPayloadInterface.html",[383,2.992,931,2.04]],["body/interfaces/VerificationTokenPayloadInterface.html",[3,0.135,4,0.174,5,0.154,8,0.012,47,0.174,49,0.01,50,0.01,55,0.732,62,1.731,140,0.82,150,3.635,383,5.228,455,2.021,931,2.985,932,3.832,1389,5.249]],["title/coverage.html",[1390,4.912]],["body/coverage.html",[3,0.048,5,0.055,8,0.012,48,0.265,49,0.005,50,0.005,51,2.506,52,1.553,54,1.862,63,1.359,73,1.015,105,1.466,107,1.862,111,1.447,113,1.862,114,1.553,115,1.862,133,1.447,140,0.291,144,1.447,153,1.015,164,1.218,181,1.447,199,1.218,202,0.64,220,1.284,226,1.447,228,1.553,232,1.218,236,1.553,238,1.553,240,1.553,245,0.838,317,1.447,318,1.447,319,1.447,320,1.447,321,1.447,336,1.862,345,1.059,348,1.359,379,1.447,381,1.685,383,1.553,403,0.974,453,1.685,454,1.862,477,1.862,478,2.719,499,2.593,500,1.107,502,1.862,514,1.218,519,1.553,520,1.862,524,1.359,534,1.359,552,1.862,574,1.862,586,1.862,587,1.862,590,1.553,591,1.862,592,2.719,593,1.862,594,2.719,600,1.359,601,1.862,602,2.719,603,1.359,604,1.862,605,2.719,633,1.359,634,1.862,635,2.719,637,1.218,640,1.359,641,1.862,642,2.719,654,1.862,655,3.151,697,1.862,717,1.862,718,3.473,721,1.862,722,3.473,760,1.685,761,1.862,762,1.862,784,1.862,786,1.862,798,1.862,800,1.862,812,1.862,814,1.862,821,1.862,825,1.862,827,1.862,834,1.862,836,1.359,837,1.862,838,1.553,839,1.862,853,1.447,858,1.359,878,1.862,888,1.447,889,1.862,890,1.553,893,1.447,902,2.719,903,1.862,911,1.553,919,1.685,921,1.284,931,2.705,933,1.862,934,1.862,936,1.862,966,1.862,996,1.553,997,1.862,1022,1.359,1044,1.685,1045,1.862,1051,1.862,1076,6.729,1103,1.862,1110,1.553,1111,1.862,1112,1.359,1128,1.862,1152,1.862,1153,1.862,1167,1.553,1168,1.862,1185,1.359,1206,1.862,1239,1.862,1240,1.685,1241,2.506,1256,1.685,1257,1.862,1263,1.685,1264,1.862,1266,1.862,1268,1.685,1269,1.862,1271,1.685,1272,1.862,1274,1.685,1275,1.862,1277,1.685,1278,1.862,1280,1.862,1326,1.553,1327,1.862,1348,1.862,1389,1.862,1390,1.862,1391,2.131,1392,2.131,1393,2.131,1394,6.582,1395,2.131,1396,2.131,1397,7.937,1398,7.349,1399,5.444,1400,1.862,1401,4.324,1402,1.862,1403,3.439,1404,1.862,1405,1.862,1406,2.131,1407,5.822,1408,3.439,1409,2.131,1410,2.131,1411,1.862]],["title/dependencies.html",[70,2.355,1412,2.989]],["body/dependencies.html",[8,0.012,9,0.687,11,1.879,13,3.447,48,0.182,49,0.008,50,0.008,70,1.879,218,1.351,242,2.874,309,4.573,324,3.119,326,1.879,350,4.324,376,4.324,387,3.119,473,4.324,491,2.049,513,1.879,548,1.879,673,3.984,709,3.447,734,4.816,735,4.324,736,4.778,806,4.324,829,3.447,960,3.447,1143,3.447,1252,3.447,1260,2.679,1261,2.679,1298,3.119,1299,3.447,1316,3.447,1413,3.945,1414,3.945,1415,3.945,1416,7.117,1417,3.945,1418,3.945,1419,3.945,1420,3.945,1421,3.945,1422,3.945,1423,3.945,1424,3.945,1425,5.468,1426,3.945,1427,3.945,1428,3.945,1429,3.945,1430,3.945,1431,3.945,1432,3.945,1433,7.117,1434,3.945,1435,3.945,1436,5.468,1437,3.945,1438,5.468,1439,3.945,1440,3.945,1441,3.945,1442,3.945,1443,3.945,1444,3.945,1445,3.945,1446,3.945,1447,3.945,1448,3.945,1449,3.945,1450,3.945,1451,3.945,1452,3.945,1453,3.945,1454,3.945,1455,3.945,1456,3.945,1457,3.945,1458,3.945]],["title/miscellaneous/enumerations.html",[1459,1.955,1460,4.32]],["body/miscellaneous/enumerations.html",[8,0.012,49,0.01,50,0.01,55,0.697,309,5.074,459,5.938,503,4.195,657,3.617,673,5.074,735,5.506,806,5.506,939,6.085,1459,3.267,1460,4.995,1461,5.716,1462,5.716,1463,5.716,1464,6.963,1465,5.716]],["title/miscellaneous/functions.html",[1459,1.955,1466,4.32]],["body/miscellaneous/functions.html",[8,0.011,49,0.011,50,0.011,55,0.782,73,3.757,1405,5.607,1459,3.668,1466,5.607,1467,6.416]],["title/index.html",[55,0.501,1468,3.588]],["body/index.html",[0,0.989,1,3.857,2,1.393,8,0.012,49,0.007,50,0.007,53,1.295,63,3.622,69,6.091,70,1.568,71,1.71,72,1.71,73,1.568,74,1.71,75,1.71,76,2.877,77,2.877,78,2.877,79,5.551,80,4.511,81,3.857,82,4.568,83,4.511,84,4.511,85,4.511,86,3.857,87,4.511,88,4.568,89,2.497,90,1.71,91,1.71,106,1.166,112,0.898,220,3.422,314,2.877,316,2.877,317,3.857,318,3.857,319,3.857,320,3.857,321,3.857,345,3.559,348,4.568,496,2.399,501,1.71,534,3.622,544,2.877,545,2.877,693,2.877,694,2.877,695,2.877,858,3.622,874,2.877,875,2.877,932,2.1,947,4.201,1022,3.622,1046,2.877,1047,2.877,1112,3.622,1121,2.877,1122,2.877,1185,3.622,1201,2.877,1202,2.877,1341,2.877,1342,2.877,1343,2.877,1468,2.877,1469,3.292,1470,3.292,1471,3.292]],["title/modules.html",[2,2.379]],["body/modules.html",[1,3.551,2,2.213,8,0.009,49,0.009,50,0.009,69,3.81,79,3.551,80,3.551,81,3.551,82,3.335,83,3.551,84,3.551,85,3.551,86,3.551,87,3.551,88,3.335,1472,7.216,1473,7.216,1474,8.414,1475,8.262,1476,8.262,1477,8.262]],["title/properties.html",[455,1.392,1412,2.989]],["body/properties.html",[8,0.012,49,0.011,50,0.011,135,3.015,455,1.783,1478,6.33,1479,6.33,1480,6.33,1481,6.33,1482,6.33]],["title/miscellaneous/typealiases.html",[1459,1.955,1483,4.943]],["body/miscellaneous/typealiases.html",[8,0.011,49,0.011,50,0.011,55,0.782,140,0.875,166,5.435,1241,4.675,1459,3.668,1484,6.416,1485,5.607]],["title/miscellaneous/variables.html",[1459,1.955,1486,4.32]],["body/miscellaneous/variables.html",[3,0.053,8,0.012,49,0.003,50,0.003,55,0.166,67,0.422,140,0.186,142,0.622,150,1.43,186,1.189,196,0.924,202,0.409,204,1.788,209,0.924,264,0.517,275,0.924,381,1.867,395,5.385,396,1.189,458,1.375,459,2.279,474,1.189,621,1.227,770,1.189,777,1.076,778,1.076,884,1.189,958,4.598,993,1.189,1076,5.675,1241,0.992,1244,1.189,1253,1.076,1400,1.189,1402,2.064,1404,1.189,1411,4.817,1459,0.778,1485,1.189,1486,1.189,1487,1.361,1488,1.361,1489,1.361,1490,1.361,1491,1.361,1492,3.733,1493,1.361,1494,1.361,1495,1.361,1496,1.361,1497,1.361,1498,1.361,1499,2.361,1500,6.717,1501,4.63,1502,2.361,1503,1.361,1504,1.361,1505,1.361,1506,7.177,1507,6.504,1508,5.512,1509,6.81,1510,3.128,1511,7.236,1512,4.63,1513,3.733,1514,3.733,1515,2.361,1516,1.361,1517,1.361,1518,6.093,1519,3.733,1520,4.224,1521,5.261,1522,2.361,1523,6.615,1524,5.923,1525,2.361,1526,1.361,1527,1.361,1528,3.128,1529,1.361,1530,2.361,1531,1.361,1532,4.971,1533,1.361,1534,5.923,1535,4.224,1536,3.733,1537,1.361,1538,1.361,1539,4.224,1540,4.63,1541,1.361,1542,1.361,1543,1.361,1544,1.361,1545,1.361,1546,1.361,1547,4.224,1548,7.291,1549,1.361,1550,1.361,1551,3.128,1552,4.971,1553,1.361,1554,1.361,1555,3.128,1556,5.261,1557,3.733,1558,4.63,1559,3.128,1560,3.733,1561,3.733,1562,1.361,1563,2.361,1564,2.361,1565,5.261,1566,3.733,1567,2.361,1568,4.63,1569,4.224,1570,3.128,1571,1.361,1572,2.361,1573,1.361,1574,3.128,1575,1.361,1576,1.361,1577,1.361,1578,1.361,1579,4.63,1580,1.361,1581,1.361,1582,1.361,1583,1.361,1584,2.361,1585,2.361,1586,3.128,1587,3.128,1588,1.361,1589,2.361,1590,3.128,1591,1.361,1592,1.361,1593,1.361,1594,1.361,1595,3.733,1596,3.128,1597,4.63,1598,4.224,1599,1.361,1600,1.361,1601,5.923,1602,1.361,1603,1.361,1604,2.361,1605,2.361,1606,1.361,1607,1.361,1608,1.361,1609,1.361,1610,1.361,1611,3.733,1612,3.128,1613,1.361,1614,1.361,1615,1.361,1616,3.128,1617,1.361,1618,1.361,1619,2.361,1620,1.361,1621,1.361,1622,1.361,1623,2.361,1624,1.361,1625,1.361,1626,2.361,1627,1.361,1628,2.361,1629,1.361,1630,1.361,1631,2.361,1632,1.361,1633,1.361,1634,6.504,1635,1.361,1636,1.361,1637,1.361,1638,1.361,1639,1.361,1640,4.971,1641,1.361,1642,1.361,1643,1.361,1644,5.73,1645,1.361,1646,1.361,1647,3.128,1648,1.361,1649,1.361,1650,1.361,1651,1.361,1652,2.361,1653,1.361,1654,1.361,1655,1.361,1656,1.361,1657,1.361,1658,1.361,1659,1.361,1660,1.361,1661,1.361,1662,1.361,1663,1.361,1664,1.361,1665,1.361,1666,1.361,1667,1.361,1668,1.361,1669,1.361,1670,1.361,1671,1.361,1672,1.361,1673,1.361,1674,1.361,1675,1.361,1676,1.361,1677,1.361,1678,1.361,1679,1.361,1680,1.361,1681,1.361,1682,1.361]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1076,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":1479,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1456,"title":{},"body":{"dependencies.html":{}}}],["0.1.5",{"_index":1434,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":1443,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1449,"title":{},"body":{"dependencies.html":{}}}],["0.3.17",{"_index":1458,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1442,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1448,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1397,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1396,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1395,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1394,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1398,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1399,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1409,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1407,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1408,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1403,"title":{},"body":{"coverage.html":{}}}],["000000",{"_index":1578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0pt",{"_index":1530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"entities/Rating.html":{}}}],["1.0",{"_index":468,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["1.0.0",{"_index":1436,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":1438,"title":{},"body":{"dependencies.html":{}}}],["1.0.35",{"_index":1437,"title":{},"body":{"dependencies.html":{}}}],["1.0.6",{"_index":1451,"title":{},"body":{"dependencies.html":{}}}],["1.1.22",{"_index":1414,"title":{},"body":{"dependencies.html":{}}}],["1.4",{"_index":1522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.4.3",{"_index":1426,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1445,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":1446,"title":{},"body":{"dependencies.html":{}}}],["1.8.3",{"_index":1428,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{},"classes/PageOptionsDto.html":{},"injectables/UsersService.html":{}}}],["10.0.0",{"_index":1416,"title":{},"body":{"dependencies.html":{}}}],["10.1.0",{"_index":1419,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10px",{"_index":1552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10})@type(undefined)@isint()@min(1)@max(50)@isoptional",{"_index":950,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["12",{"_index":1469,"title":{},"body":{"index.html":{}}}],["12px",{"_index":1572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["14px",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["15px",{"_index":1589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["16px",{"_index":1636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["17.1.1",{"_index":1415,"title":{},"body":{"dependencies.html":{}}}],["17.1.9",{"_index":1430,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":1470,"title":{},"body":{"index.html":{}}}],["1px",{"_index":1605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1})@isnumber",{"_index":622,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["1})@type(undefined)@isint()@min(1)@isoptional",{"_index":945,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["2.0",{"_index":1441,"title":{},"body":{"dependencies.html":{}}}],["2.0.8",{"_index":1452,"title":{},"body":{"dependencies.html":{}}}],["2.4.2",{"_index":1423,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1439,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1253,"title":{},"body":{"injectables/TransformInterceptor.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["20px",{"_index":1564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["25px",{"_index":1610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["27",{"_index":1471,"title":{},"body":{"index.html":{}}}],["28px",{"_index":1635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":1672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.0",{"_index":1417,"title":{},"body":{"dependencies.html":{}}}],["3.0.9",{"_index":1435,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":1583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["30px",{"_index":1581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["34495e",{"_index":1647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3498db",{"_index":1597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["35px",{"_index":1582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3px",{"_index":1562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":1304,"title":{},"body":{"entities/User.html":{}}}],["4.0.1",{"_index":1450,"title":{},"body":{"dependencies.html":{}}}],["4.1",{"_index":1440,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["404",{"_index":757,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["5",{"_index":947,"title":{},"body":{"classes/PageOptionsDto.html":{},"index.html":{}}}],["50",{"_index":949,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["580px",{"_index":1551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5px",{"_index":1596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.4.9",{"_index":1432,"title":{},"body":{"dependencies.html":{}}}],["6.9.4",{"_index":1447,"title":{},"body":{"dependencies.html":{}}}],["620px",{"_index":1633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7",{"_index":495,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["7.1.8",{"_index":1421,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1457,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":496,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/NewPasswordDto.html":{},"index.html":{}}}],["8.11.1",{"_index":1453,"title":{},"body":{"dependencies.html":{}}}],["94102",{"_index":1678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["999999",{"_index":1571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["__dirname",{"_index":689,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["_accesstoken",{"_index":733,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["_refreshtoken",{"_index":729,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["a1234567",{"_index":492,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["a1234567!'})@isstring()@minlength(7)@matches(/^(?=.*[a",{"_index":663,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["a1234567!'})@minlength(7)@matches(/^(?=.*[a",{"_index":481,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/NewPasswordDto.html":{}}}],["a1234567@'})@isstring",{"_index":823,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["a:hover",{"_index":1648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abbey",{"_index":1673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abcd@google.com",{"_index":672,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{}}}],["abcd@google.com'})@isemail",{"_index":658,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{}}}],["abstract",{"_index":585,"title":{},"body":{"classes/CommonEntity.html":{}}}],["access",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{}}}],["accessors",{"_index":937,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["accesstoken",{"_index":805,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["accesstoken_expiration_time",{"_index":26,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["accesstoken_secret_key",{"_index":25,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["action",{"_index":884,"title":{},"body":{"injectables/OrderService.html":{},"miscellaneous/variables.html":{}}}],["addbearerauth",{"_index":469,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["adds",{"_index":885,"title":{},"body":{"injectables/OrderService.html":{}}}],["adjust",{"_index":1525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aliases",{"_index":1484,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["already",{"_index":752,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["antialiased",{"_index":1517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["any(product.category",{"_index":1078,"title":{},"body":{"injectables/ProductService.html":{}}}],["api",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/OrderController.html":{},"controllers/ReservationController.html":{}}}],["api'})@apicreatedresponse({description",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["api'})@apiresponse({description",{"_index":527,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ReservationController.html":{}}}],["apibearerauth",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["apibearerauth('access",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["apibody",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["apibody({type",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["apicreatedresponse",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["apiproperty",{"_index":488,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{}}}],["apiproperty()@isoptional",{"_index":665,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty({description",{"_index":479,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["apiproperty({type",{"_index":897,"title":{},"body":{"classes/PageDto.html":{}}}],["apipropertyoptional",{"_index":954,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["apipropertyoptional({enum",{"_index":941,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["apipropertyoptional({minimum",{"_index":944,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["apiresponse",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["apiresponse({description",{"_index":1006,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('comment",{"_index":538,"title":{},"body":{"controllers/CommentController.html":{}}}],["apitags('order",{"_index":863,"title":{},"body":{"controllers/OrderController.html":{}}}],["apitags('product",{"_index":1027,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags('reservation",{"_index":1189,"title":{},"body":{"controllers/ReservationController.html":{}}}],["apitags('users",{"_index":1334,"title":{},"body":{"controllers/UsersController.html":{}}}],["appconfigmodule",{"_index":1,"title":{"modules/AppConfigModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["appcontroller",{"_index":52,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["apple",{"_index":1642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":69,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["appservice",{"_index":63,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["argumentshost",{"_index":766,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":972,"title":{},"body":{"entities/Product.html":{}}}],["array.isarray(category",{"_index":1081,"title":{},"body":{"injectables/ProductService.html":{}}}],["article",{"_index":1637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["asc",{"_index":1464,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["async",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/RatingController.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":111,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"injectables/EmailService.html":{},"coverage.html":{}}}],["auth.dto",{"_index":1262,"title":{},"body":{"classes/UpdateAuthDto.html":{}}}],["auth.dto.ts",{"_index":592,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["auth.guard",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{}}}],["auth.guard.ts",{"_index":718,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"classes/KakaoAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/NaverAuthGuard.html":{},"coverage.html":{}}}],["auth.strategy",{"_index":329,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.strategy.ts",{"_index":722,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"coverage.html":{}}}],["auth.strategy.ts:10",{"_index":788,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["auth.strategy.ts:12",{"_index":727,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["auth.strategy.ts:16",{"_index":818,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["auth.strategy.ts:21",{"_index":790,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["auth.strategy.ts:23",{"_index":804,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["auth.strategy.ts:25",{"_index":732,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["auth.strategy.ts:9",{"_index":816,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["auth/auth.controller",{"_index":327,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalAuthStrategy.html":{}}}],["auth/guards/google",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/guards/jwt",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{}}}],["auth/guards/kakao",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/guards/local",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/guards/naver",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/interfaces/requestwithuser.interface",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{}}}],["auth/interfaces/tokenpayload.interface",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthStrategy.html":{}}}],["auth/interfaces/verificationtokenpayload.interface",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth/strategies/google",{"_index":331,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/strategies/jwt",{"_index":330,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/strategies/kakao",{"_index":332,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/strategies/local",{"_index":328,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/strategies/naver",{"_index":333,"title":{},"body":{"modules/AuthModule.html":{}}}],["authcontroller",{"_index":114,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":720,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"classes/KakaoAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/NaverAuthGuard.html":{}}}],["authguard('jwt",{"_index":785,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard(provider.google",{"_index":719,"title":{},"body":{"injectables/GoogleAuthGuard.html":{}}}],["authguard(provider.kakao",{"_index":799,"title":{},"body":{"classes/KakaoAuthGuard.html":{}}}],["authguard(provider.local",{"_index":813,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authguard(provider.naver",{"_index":826,"title":{},"body":{"injectables/NaverAuthGuard.html":{}}}],["authmodule",{"_index":79,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"index.html":{},"modules.html":{}}}],["author",{"_index":1482,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":220,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalAuthStrategy.html":{},"coverage.html":{},"index.html":{}}}],["auto",{"_index":1547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["autoloadentities",{"_index":691,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["automatically",{"_index":1541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["available",{"_index":1473,"title":{},"body":{"modules.html":{}}}],["await",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/RatingController.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["background",{"_index":1508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["badrequestexception",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('token",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('wrong",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["baseapidocument",{"_index":453,"title":{"classes/BaseAPIDocument.html":{}},"body":{"classes/BaseAPIDocument.html":{},"coverage.html":{}}}],["bcrypt",{"_index":1297,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["bcrypt.compare(apassword",{"_index":1324,"title":{},"body":{"entities/User.html":{}}}],["bcrypt.gensalt(10",{"_index":1309,"title":{},"body":{"entities/User.html":{}}}],["bcrypt.hash(password",{"_index":1387,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(this.password",{"_index":1311,"title":{},"body":{"entities/User.html":{}}}],["bcryptjs",{"_index":1298,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bearer",{"_index":472,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["beartoken",{"_index":794,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["beforeinsert",{"_index":1295,"title":{},"body":{"entities/User.html":{}}}],["beforesavefunction",{"_index":1306,"title":{},"body":{"entities/User.html":{}}}],["bicubic",{"_index":1505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["block",{"_index":1540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["body",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["bold",{"_index":1609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":649,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/PageMetaDto.html":{},"entities/Product.html":{},"entities/Reservation.html":{}}}],["bootstrap",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["border",{"_index":1500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["both",{"_index":1567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bottom",{"_index":1565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["box",{"_index":1556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brand",{"_index":606,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["browse",{"_index":1474,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1475,"title":{},"body":{"modules.html":{}}}],["btn",{"_index":1601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":476,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["builder",{"_index":456,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["button",{"_index":1664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buttons",{"_index":1600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buyer",{"_index":636,"title":{},"body":{"classes/CreateRatingDto.html":{},"entities/Rating.html":{}}}],["ca",{"_index":1677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cache",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{},"modules/RedisModule.html":{},"dependencies.html":{}}}],["cache_manager",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["cachemanger",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["cachemodule",{"_index":1141,"title":{},"body":{"modules/RedisModule.html":{}}}],["cachemodule.registerasync",{"_index":1144,"title":{},"body":{"modules/RedisModule.html":{}}}],["call",{"_index":1657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callbackurl",{"_index":742,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["callhandler",{"_index":1246,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["capitalize",{"_index":1585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KakaoAuthStrategy.html":{},"entities/User.html":{}}}],["catch(exception",{"_index":765,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":769,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["category",{"_index":607,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["category.length",{"_index":1075,"title":{},"body":{"injectables/ProductService.html":{}}}],["center",{"_index":1568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["centered",{"_index":1550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cfg",{"_index":679,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["cfg.get('postgres_db",{"_index":688,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["cfg.get('postgres_host",{"_index":682,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["cfg.get('postgres_password",{"_index":686,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["cfg.get('postgres_port",{"_index":684,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["cfg.get('postgres_username",{"_index":685,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["cfg.get('redis_host",{"_index":1145,"title":{},"body":{"modules/RedisModule.html":{}}}],["cfg.get('redis_password",{"_index":1148,"title":{},"body":{"modules/RedisModule.html":{}}}],["cfg.get('redis_port",{"_index":1146,"title":{},"body":{"modules/RedisModule.html":{}}}],["cfg.get('redis_ttl",{"_index":1150,"title":{},"body":{"modules/RedisModule.html":{}}}],["cfg.get('redis_user",{"_index":1147,"title":{},"body":{"modules/RedisModule.html":{}}}],["changepassword",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["changepassword(@body",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["changepassword(changepassworddto",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["changepassword(email",{"_index":1353,"title":{},"body":{"injectables/UsersService.html":{}}}],["changepassworddto",{"_index":133,"title":{"classes/ChangePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["changepassworddto.newpassword",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["changepasswordwithtoken",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["changepasswordwithtoken(userid",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":48,"title":{"classes/Auth.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/KakaoAuthGuard.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":112,"title":{},"body":{"classes/Auth.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/KakaoAuthGuard.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["clear",{"_index":1566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["click",{"_index":1663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clientid",{"_index":738,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["clients",{"_index":1649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clientsecret",{"_index":740,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["cluster_appmodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authmodule",{"_index":314,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_imports",{"_index":315,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":316,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_commentmodule",{"_index":544,"title":{},"body":{"modules/CommentModule.html":{},"index.html":{}}}],["cluster_commentmodule_providers",{"_index":545,"title":{},"body":{"modules/CommentModule.html":{},"index.html":{}}}],["cluster_emailmodule",{"_index":693,"title":{},"body":{"modules/EmailModule.html":{},"index.html":{}}}],["cluster_emailmodule_exports",{"_index":694,"title":{},"body":{"modules/EmailModule.html":{},"index.html":{}}}],["cluster_emailmodule_providers",{"_index":695,"title":{},"body":{"modules/EmailModule.html":{},"index.html":{}}}],["cluster_ordermodule",{"_index":874,"title":{},"body":{"modules/OrderModule.html":{},"index.html":{}}}],["cluster_ordermodule_providers",{"_index":875,"title":{},"body":{"modules/OrderModule.html":{},"index.html":{}}}],["cluster_productmodule",{"_index":1046,"title":{},"body":{"modules/ProductModule.html":{},"index.html":{}}}],["cluster_productmodule_providers",{"_index":1047,"title":{},"body":{"modules/ProductModule.html":{},"index.html":{}}}],["cluster_ratingmodule",{"_index":1121,"title":{},"body":{"modules/RatingModule.html":{},"index.html":{}}}],["cluster_ratingmodule_providers",{"_index":1122,"title":{},"body":{"modules/RatingModule.html":{},"index.html":{}}}],["cluster_reservationmodule",{"_index":1201,"title":{},"body":{"modules/ReservationModule.html":{},"index.html":{}}}],["cluster_reservationmodule_providers",{"_index":1202,"title":{},"body":{"modules/ReservationModule.html":{},"index.html":{}}}],["cluster_usersmodule",{"_index":1341,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["cluster_usersmodule_exports",{"_index":1343,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["cluster_usersmodule_providers",{"_index":1342,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["code",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfirmEmailDto.html":{}}}],["collapse",{"_index":1526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color",{"_index":1509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":504,"title":{},"body":{"entities/Comment.html":{},"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"entities/User.html":{}}}],["column('text",{"_index":971,"title":{},"body":{"entities/Product.html":{}}}],["column({default",{"_index":979,"title":{},"body":{"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{}}}],["column({nullable",{"_index":1286,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":1159,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["column({unique",{"_index":1283,"title":{},"body":{"entities/User.html":{}}}],["comment",{"_index":500,"title":{"entities/Comment.html":{}},"body":{"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateReservationDto.html":{},"entities/Product.html":{},"entities/User.html":{},"coverage.html":{}}}],["comment'})@apibearerauth('access",{"_index":529,"title":{},"body":{"controllers/CommentController.html":{}}}],["comment'})@isstring",{"_index":595,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateReservationDto.html":{}}}],["comment.dto",{"_index":537,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/UpdateCommentDto.html":{}}}],["comment.dto.ts",{"_index":594,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:11",{"_index":596,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.dto.ts:18",{"_index":599,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.product",{"_index":975,"title":{},"body":{"entities/Product.html":{}}}],["comment.user",{"_index":1281,"title":{},"body":{"entities/User.html":{}}}],["comment/comment.controller",{"_index":549,"title":{},"body":{"modules/CommentModule.html":{}}}],["comment/comment.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["comment/comment.service",{"_index":535,"title":{},"body":{"controllers/CommentController.html":{},"modules/CommentModule.html":{}}}],["comment/dto/create",{"_index":536,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{}}}],["comment/entities/comment.entity",{"_index":550,"title":{},"body":{"modules/CommentModule.html":{},"injectables/CommentService.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["commentcontroller",{"_index":519,"title":{"controllers/CommentController.html":{}},"body":{"controllers/CommentController.html":{},"modules/CommentModule.html":{},"coverage.html":{}}}],["commentgeybyid",{"_index":553,"title":{},"body":{"injectables/CommentService.html":{}}}],["commentgeybyid(id",{"_index":558,"title":{},"body":{"injectables/CommentService.html":{}}}],["commentmodule",{"_index":80,"title":{"modules/CommentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"index.html":{},"modules.html":{}}}],["commentrepository",{"_index":557,"title":{},"body":{"injectables/CommentService.html":{}}}],["comments",{"_index":967,"title":{},"body":{"entities/Product.html":{},"injectables/ProductService.html":{},"entities/User.html":{}}}],["commentservice",{"_index":534,"title":{"injectables/CommentService.html":{}},"body":{"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"coverage.html":{},"index.html":{}}}],["common/config/config.module",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["common/constants/order.constants",{"_index":955,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["common/dtos/page",{"_index":898,"title":{},"body":{"classes/PageDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["common/dtos/page.dto",{"_index":1026,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["common/entities/common.entity",{"_index":515,"title":{},"body":{"entities/Comment.html":{},"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"entities/User.html":{}}}],["common/interfaces/page",{"_index":918,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["common/template/verificationemail",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["commonentity",{"_index":514,"title":{"classes/CommonEntity.html":{}},"body":{"entities/Comment.html":{},"classes/CommonEntity.html":{},"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"entities/User.html":{},"coverage.html":{}}}],["company",{"_index":1670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compodoc/compodoc",{"_index":1413,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":10,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/RedisModule.html":{}}}],["configmodule.forroot",{"_index":15,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["configservice",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"modules/RedisModule.html":{}}}],["configservice.get('accesstoken_secret_key",{"_index":796,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["configservice.get('email_password",{"_index":714,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_service",{"_index":711,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_user",{"_index":712,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('google_auth_callback_url",{"_index":743,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["configservice.get('google_auth_clientid",{"_index":739,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["configservice.get('google_auth_clientsecret",{"_index":741,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["configservice.get('kakao_auth_callback_url",{"_index":808,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["configservice.get('kakao_auth_clientid",{"_index":807,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["configservice.get('naver_auth_callback_url",{"_index":832,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["configservice.get('naver_auth_clientid",{"_index":830,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["configservice.get('naver_auth_clientsecret",{"_index":831,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["confirmemail",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["confirmemail(@body",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmemail(confirmemaildto",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["confirmemaildto",{"_index":144,"title":{"classes/ConfirmEmailDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["confirmemaildto.code",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(\"dsdad\",reservationquery",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('adadsdad",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('dddddd",{"_index":755,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["console.log(category",{"_index":1080,"title":{},"body":{"injectables/ProductService.html":{}}}],["console.log(createratingdto",{"_index":1138,"title":{},"body":{"injectables/RatingService.html":{}}}],["console.log(err",{"_index":1321,"title":{},"body":{"entities/User.html":{}}}],["console.log(newrating",{"_index":1120,"title":{},"body":{"controllers/RatingController.html":{}}}],["console.log(userinput",{"_index":749,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["const",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KakaoAuthStrategy.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/RatingController.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"injectables/ReservationService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":815,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["constructor(commentrepository",{"_index":554,"title":{},"body":{"injectables/CommentService.html":{}}}],["constructor(configservice",{"_index":700,"title":{},"body":{"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["constructor(data",{"_index":891,"title":{},"body":{"classes/PageDto.html":{}}}],["constructor(private",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CommentController.html":{},"injectables/EmailService.html":{},"injectables/LocalAuthStrategy.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{}}}],["constructor(productrepository",{"_index":1056,"title":{},"body":{"injectables/ProductService.html":{}}}],["constructor(ratingrepository",{"_index":1130,"title":{},"body":{"injectables/RatingService.html":{}}}],["constructor(reservationrepository",{"_index":1210,"title":{},"body":{"injectables/ReservationService.html":{}}}],["constructor(undefined",{"_index":910,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["constructor(userrepository",{"_index":1350,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthStrategy.html":{}}}],["container",{"_index":1536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["content",{"_index":1555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["context",{"_index":1248,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["controller",{"_index":51,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('comment",{"_index":539,"title":{},"body":{"controllers/CommentController.html":{}}}],["controller('order",{"_index":864,"title":{},"body":{"controllers/OrderController.html":{}}}],["controller('product",{"_index":1028,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller('rating",{"_index":1116,"title":{},"body":{"controllers/RatingController.html":{}}}],["controller('reservation",{"_index":1190,"title":{},"body":{"controllers/ReservationController.html":{}}}],["controller('users",{"_index":1335,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["cookie",{"_index":1444,"title":{},"body":{"dependencies.html":{}}}],["count",{"_index":1225,"title":{},"body":{"injectables/ReservationService.html":{}}}],["coverage",{"_index":1390,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":528,"title":{},"body":{"controllers/CommentController.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"controllers/ProductController.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{}}}],["create(@body",{"_index":865,"title":{},"body":{"controllers/OrderController.html":{}}}],["create(createorderdto",{"_index":844,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["createauthdto",{"_index":590,"title":{"classes/CreateAuthDto.html":{}},"body":{"classes/CreateAuthDto.html":{},"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["createcomment",{"_index":521,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{}}}],["createcomment(createcommentdto",{"_index":560,"title":{},"body":{"injectables/CommentService.html":{}}}],["createcomment(req",{"_index":523,"title":{},"body":{"controllers/CommentController.html":{}}}],["createcommentdto",{"_index":524,"title":{"classes/CreateCommentDto.html":{}},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CreateCommentDto.html":{},"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["createcommentdto})@apioperation({summary",{"_index":526,"title":{},"body":{"controllers/CommentController.html":{}}}],["createdat",{"_index":575,"title":{},"body":{"classes/CommonEntity.html":{}}}],["createdatecolumn",{"_index":578,"title":{},"body":{"classes/CommonEntity.html":{}}}],["createorderdto",{"_index":600,"title":{"classes/CreateOrderDto.html":{}},"body":{"classes/CreateOrderDto.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":1489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createproduct",{"_index":998,"title":{},"body":{"controllers/ProductController.html":{}}}],["createproduct(req",{"_index":1003,"title":{},"body":{"controllers/ProductController.html":{}}}],["createproductdto",{"_index":603,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createproductdto})@apioperation({summary",{"_index":1005,"title":{},"body":{"controllers/ProductController.html":{}}}],["createquerybuilder('comment",{"_index":568,"title":{},"body":{"injectables/CommentService.html":{}}}],["createquerybuilder('product",{"_index":1090,"title":{},"body":{"injectables/ProductService.html":{}}}],["createrating",{"_index":1129,"title":{},"body":{"injectables/RatingService.html":{}}}],["createrating(@body",{"_index":1117,"title":{},"body":{"controllers/RatingController.html":{}}}],["createrating(createratingdto",{"_index":1133,"title":{},"body":{"injectables/RatingService.html":{}}}],["createratingdto",{"_index":633,"title":{"classes/CreateRatingDto.html":{}},"body":{"classes/CreateRatingDto.html":{},"controllers/RatingController.html":{},"injectables/RatingService.html":{},"classes/UpdateRatingDto.html":{},"coverage.html":{}}}],["createreservation",{"_index":1169,"title":{},"body":{"controllers/ReservationController.html":{}}}],["createreservation(req",{"_index":1173,"title":{},"body":{"controllers/ReservationController.html":{}}}],["createreservationdto",{"_index":640,"title":{"classes/CreateReservationDto.html":{}},"body":{"classes/CreateReservationDto.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["createreservationdto})@apioperation({summary",{"_index":1175,"title":{},"body":{"controllers/ReservationController.html":{}}}],["createtransport",{"_index":708,"title":{},"body":{"injectables/EmailService.html":{}}}],["createuser",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":199,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["ctx",{"_index":770,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":773,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":772,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cursor",{"_index":1606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customuser",{"_index":1402,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["d",{"_index":1317,"title":{},"body":{"entities/User.html":{}}}],["data",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"classes/PageDto.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":687,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":81,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"index.html":{},"modules.html":{}}}],["date",{"_index":577,"title":{},"body":{"classes/CommonEntity.html":{},"classes/CreateReservationDto.html":{},"entities/Reservation.html":{}}}],["date().toisostring",{"_index":782,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["db",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProductService.html":{},"injectables/UsersService.html":{}}}],["declarations",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["decodedconfirmationtoken",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodedconfirmationtoken(token",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoration",{"_index":1598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"classes/CommonEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"controllers/OrderController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":458,"title":{},"body":{"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":59,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"injectables/RatingService.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":857,"title":{},"body":{"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":850,"title":{},"body":{"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":1010,"title":{},"body":{"controllers/ProductController.html":{}}}],["delete(':id')@useguards(jwtauthguard)@apioperation({summary",{"_index":1179,"title":{},"body":{"controllers/ReservationController.html":{}}}],["deleted",{"_index":1098,"title":{},"body":{"injectables/ProductService.html":{}}}],["deleteproductbyiid",{"_index":999,"title":{},"body":{"controllers/ProductController.html":{}}}],["deleteproductbyiid(@param('id",{"_index":1042,"title":{},"body":{"controllers/ProductController.html":{}}}],["deleteproductbyiid(id",{"_index":1009,"title":{},"body":{"controllers/ProductController.html":{}}}],["deletereservationbyid",{"_index":1170,"title":{},"body":{"controllers/ReservationController.html":{},"injectables/ReservationService.html":{}}}],["deletereservationbyid(@param('id",{"_index":1199,"title":{},"body":{"controllers/ReservationController.html":{}}}],["deletereservationbyid(id",{"_index":1178,"title":{},"body":{"controllers/ReservationController.html":{},"injectables/ReservationService.html":{}}}],["dependencies",{"_index":70,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{}}}],["desc",{"_index":503,"title":{},"body":{"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"entities/Product.html":{},"entities/Reservation.html":{},"miscellaneous/enumerations.html":{}}}],["description",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"controllers/CommentController.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{},"properties.html":{}}}],["design",{"_index":1656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["display",{"_index":1539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["displayname",{"_index":746,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["distractions",{"_index":1665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["div",{"_index":1641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":1391,"title":{},"body":{"coverage.html":{}}}],["documentbuilder",{"_index":460,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["don't",{"_index":1679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["done",{"_index":730,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["done(null",{"_index":745,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["down",{"_index":1544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto",{"_index":919,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"coverage.html":{}}}],["element",{"_index":1553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthStrategy.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"miscellaneous/variables.html":{}}}],["email.dto",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["email.dto.ts",{"_index":587,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["email.dto.ts:2",{"_index":589,"title":{},"body":{"classes/ConfirmEmailDto.html":{}}}],["email.dto.ts:3",{"_index":588,"title":{},"body":{"classes/ConfirmEmailDto.html":{}}}],["email/email.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["email/email.service",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{},"modules/EmailModule.html":{}}}],["email_password",{"_index":29,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["email_service",{"_index":27,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["email_user",{"_index":28,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["emailcodebyredis",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailmodule",{"_index":82,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"index.html":{},"modules.html":{}}}],["emails",{"_index":1680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emailservice",{"_index":348,"title":{"injectables/EmailService.html":{}},"body":{"injectables/AuthService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"coverage.html":{},"index.html":{}}}],["entities",{"_index":501,"title":{},"body":{"entities/Comment.html":{},"modules/DatabaseModule.html":{},"entities/Product.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["entities/rating.entity",{"_index":1126,"title":{},"body":{"modules/RatingModule.html":{}}}],["entity",{"_index":499,"title":{"entities/Comment.html":{},"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"entities/User.html":{}},"body":{"entities/Comment.html":{},"modules/DatabaseModule.html":{},"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity({synchronize",{"_index":1164,"title":{},"body":{"entities/Reservation.html":{}}}],["entity{.ts,.js",{"_index":690,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["enum",{"_index":961,"title":{},"body":{"classes/PageOptionsDto.html":{},"entities/User.html":{}}}],["enumerations",{"_index":1460,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":46,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["err",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"entities/User.html":{}}}],["err.status",{"_index":756,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["err?.name",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["error",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{}}}],["error.message",{"_index":783,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ex",{"_index":630,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["exception",{"_index":768,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":762,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:11",{"_index":767,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":776,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":775,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":764,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["executioncontext",{"_index":1244,"title":{},"body":{"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["expired",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":47,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{}}}],["exports",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["express",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/RequestWithUserInterface.html":{},"dependencies.html":{}}}],["extends",{"_index":516,"title":{},"body":{"entities/Comment.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"entities/Product.html":{},"interfaces/ProductInterface.html":{},"entities/Rating.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["externalclass",{"_index":1640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":791,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":793,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["f6f6f6",{"_index":1510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":631,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Reservation.html":{}}}],["false})@isarray",{"_index":614,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["family",{"_index":1512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ffffff",{"_index":1560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{}}}],["fill",{"_index":1554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["findall",{"_index":840,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["findone",{"_index":841,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["findone(@param('id",{"_index":868,"title":{},"body":{"controllers/OrderController.html":{}}}],["findone(id",{"_index":847,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["findoperator",{"_index":1362,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":1615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["font",{"_index":1511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["footer",{"_index":1558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forgot",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpassword",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["forgotpassword(@body('email",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpassword(email",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["francisco",{"_index":1676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["friendly",{"_index":1630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":1406,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1466,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateaccesstoken",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateaccesstoken(userid",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatenumber",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateotp",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(':id",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apibearerauth('access",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':id')@apioperation({summary",{"_index":1016,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["get('google",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/callback",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('kakao",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('kakao/callback",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('naver",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('naver/callback",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apioperation({summary",{"_index":1013,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["getallproducts",{"_index":1000,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["getallproducts(@query('category",{"_index":1029,"title":{},"body":{"controllers/ProductController.html":{}}}],["getallproducts(pageoptionsdto",{"_index":1012,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["getallreservation",{"_index":1171,"title":{},"body":{"controllers/ReservationController.html":{}}}],["getallreservation(user",{"_index":1181,"title":{},"body":{"controllers/ReservationController.html":{}}}],["getallusers",{"_index":1336,"title":{},"body":{"controllers/UsersController.html":{}}}],["getcommentbyid",{"_index":522,"title":{},"body":{"controllers/CommentController.html":{}}}],["getcommentbyid(@param('id",{"_index":542,"title":{},"body":{"controllers/CommentController.html":{}}}],["getcommentbyid(id",{"_index":532,"title":{},"body":{"controllers/CommentController.html":{}}}],["gethello",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getone",{"_index":571,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ProductService.html":{}}}],["getproductbyid",{"_index":1001,"title":{},"body":{"controllers/ProductController.html":{}}}],["getproductbyid(@param('id",{"_index":1037,"title":{},"body":{"controllers/ProductController.html":{}}}],["getproductbyid(id",{"_index":1015,"title":{},"body":{"controllers/ProductController.html":{}}}],["getreservationbyid",{"_index":1172,"title":{},"body":{"controllers/ReservationController.html":{}}}],["getreservationbyid(@param('id",{"_index":1197,"title":{},"body":{"controllers/ReservationController.html":{}}}],["getreservationbyid(id",{"_index":1183,"title":{},"body":{"controllers/ReservationController.html":{}}}],["getskip",{"_index":952,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["getuserbyemail",{"_index":1349,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":1356,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid",{"_index":1328,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyid(@param('id",{"_index":1339,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(id",{"_index":1330,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserinfobytoken",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["getuserinfobytoken(@param('id",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["getuserinfobytoken(id",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["global",{"_index":1494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["goes",{"_index":1497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["good",{"_index":1666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["google",{"_index":735,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["google_auth_callback_url",{"_index":37,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["google_auth_clientid",{"_index":35,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["google_auth_clientsecret",{"_index":36,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["googleauthguard",{"_index":236,"title":{"injectables/GoogleAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthGuard.html":{},"coverage.html":{}}}],["googleauthstrategy",{"_index":317,"title":{"injectables/GoogleAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthStrategy.html":{},"coverage.html":{},"index.html":{}}}],["googlelogin",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogincallback",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogincallback(req",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["graph",{"_index":1472,"title":{},"body":{"modules.html":{}}}],["gravatar",{"_index":1299,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["gravatar.url(this.email",{"_index":1313,"title":{},"body":{"entities/User.html":{}}}],["guard",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["h1",{"_index":1574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["h2",{"_index":1575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["h3",{"_index":1576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["h4",{"_index":1577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hapi/joi",{"_index":13,"title":{},"body":{"modules/AppConfigModule.html":{},"dependencies.html":{}}}],["hasnextpage",{"_index":904,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":905,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["head",{"_index":1639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["header",{"_index":474,"title":{},"body":{"classes/BaseAPIDocument.html":{},"miscellaneous/variables.html":{}}}],["height",{"_index":1521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hello",{"_index":109,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":1498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hi",{"_index":1653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hidden",{"_index":1623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hide",{"_index":1624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hope",{"_index":1668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":681,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/RedisModule.html":{}}}],["host.switchtohttp",{"_index":771,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["hr",{"_index":1627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["html",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["htmlemail",{"_index":1682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":470,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["http://localhost:3000",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@get('google')@useguards(googleauthguard",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@get('google/callback')@useguards(googleauthguard",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@get('kakao')@useguards(kakaoauthguard",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@get('kakao/callback')@useguards(kakaoauthguard",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@get('naver')@useguards(naverauthguard",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@get('naver/callback')@useguards(naverauthguard",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/ProductService.html":{},"injectables/ReservationService.html":{},"entities/User.html":{}}}],["httpexception(\"not",{"_index":1237,"title":{},"body":{"injectables/ReservationService.html":{}}}],["httpexception('no",{"_index":572,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ProductService.html":{},"injectables/ReservationService.html":{}}}],["httpexception(err.message",{"_index":1325,"title":{},"body":{"entities/User.html":{}}}],["httpexceptionfilter",{"_index":760,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https",{"_index":1320,"title":{},"body":{"entities/User.html":{}}}],["httpstatus",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CommentService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/ProductService.html":{},"injectables/ReservationService.html":{},"entities/User.html":{}}}],["httpstatus.bad_request",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.conflict",{"_index":754,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"entities/User.html":{}}}],["httpstatus.forbidden",{"_index":1238,"title":{},"body":{"injectables/ReservationService.html":{}}}],["httpstatus.not_found",{"_index":573,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ProductService.html":{},"injectables/ReservationService.html":{}}}],["httpstatus.ok",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["id",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1392,"title":{},"body":{"coverage.html":{}}}],["if(res.user",{"_index":1235,"title":{},"body":{"injectables/ReservationService.html":{}}}],["img",{"_index":1499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implements",{"_index":763,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{}}}],["import",{"_index":7,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["important",{"_index":1548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["imports",{"_index":14,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/RedisModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{}}}],["inc",{"_index":1671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["index",{"_index":55,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"injectables/RatingService.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["inherit",{"_index":1644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initializeoptions",{"_index":457,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["inject",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["inject(cache_manager",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":105,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CommentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/OrderService.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CommentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/OrderService.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":106,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CommentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/OrderService.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["injectrepository",{"_index":562,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"injectables/ReservationService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(comment",{"_index":563,"title":{},"body":{"injectables/CommentService.html":{}}}],["injectrepository(product",{"_index":1068,"title":{},"body":{"injectables/ProductService.html":{}}}],["injectrepository(rating",{"_index":1136,"title":{},"body":{"injectables/RatingService.html":{}}}],["injectrepository(reservation",{"_index":1220,"title":{},"body":{"injectables/ReservationService.html":{}}}],["injectrepository(user",{"_index":1363,"title":{},"body":{"injectables/UsersService.html":{}}}],["inline",{"_index":1608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insert",{"_index":480,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["inside",{"_index":1594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intercept",{"_index":1242,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":1243,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["interface",{"_index":931,"title":{"interfaces/PageMetaDtoParametersInterface.html":{},"interfaces/ProductInterface.html":{},"interfaces/RequestWithUserInterface.html":{},"interfaces/TokenPayloadInterface.html":{},"interfaces/VerificationTokenPayloadInterface.html":{}},"body":{"interfaces/PageMetaDtoParametersInterface.html":{},"interfaces/ProductInterface.html":{},"interfaces/RequestWithUserInterface.html":{},"interfaces/TokenPayloadInterface.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":932,"title":{},"body":{"interfaces/PageMetaDtoParametersInterface.html":{},"interfaces/ProductInterface.html":{},"interfaces/RequestWithUserInterface.html":{},"interfaces/TokenPayloadInterface.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"index.html":{}}}],["internalservererrorexception",{"_index":1296,"title":{},"body":{"entities/User.html":{}}}],["interpolation",{"_index":1503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isarray",{"_index":627,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/PageDto.html":{}}}],["isarray()@apiproperty({isarray",{"_index":895,"title":{},"body":{"classes/PageDto.html":{}}}],["isboolean",{"_index":653,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["isemail",{"_index":669,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{}}}],["isenum",{"_index":956,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(orderconstants",{"_index":962,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isglobal",{"_index":1151,"title":{},"body":{"modules/RedisModule.html":{}}}],["isint",{"_index":957,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isnotempty",{"_index":628,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":629,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isoptional",{"_index":670,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PageOptionsDto.html":{}}}],["ispasswordmatch",{"_index":1323,"title":{},"body":{"entities/User.html":{}}}],["ispasswordmatched",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["isselling",{"_index":968,"title":{},"body":{"entities/Product.html":{}}}],["isstring",{"_index":486,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["itemcount",{"_index":906,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"injectables/ProductService.html":{}}}],["joi",{"_index":12,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.number().required",{"_index":21,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.object",{"_index":17,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().required",{"_index":19,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joincolumn",{"_index":511,"title":{},"body":{"entities/Comment.html":{},"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"entities/User.html":{}}}],["json.stringify(user",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["jwt",{"_index":473,"title":{},"body":{"classes/BaseAPIDocument.html":{},"injectables/JwtAuthStrategy.html":{},"dependencies.html":{}}}],["jwt_chagne_password_expiresin",{"_index":44,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["jwt_chagne_password_secret",{"_index":43,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["jwtauthguard",{"_index":232,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"coverage.html":{}}}],["jwtauthstrategy",{"_index":318,"title":{"injectables/JwtAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthStrategy.html":{},"coverage.html":{},"index.html":{}}}],["jwtfromrequest",{"_index":792,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["jwtmodule",{"_index":323,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":334,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["kakao",{"_index":806,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["kakao_auth_callback_url",{"_index":39,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["kakao_auth_clientid",{"_index":38,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["kakaoauthguard",{"_index":238,"title":{"classes/KakaoAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"classes/KakaoAuthGuard.html":{},"coverage.html":{}}}],["kakaoauthstrategy",{"_index":319,"title":{"injectables/KakaoAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/KakaoAuthStrategy.html":{},"coverage.html":{},"index.html":{}}}],["kakaologin",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaologincallback",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaologincallback(@req",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaologincallback(req",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["koreamarket",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["koreamarketapi",{"_index":466,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["koreanmarket",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["last",{"_index":1614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["left",{"_index":1595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leftjoinandselect('comment.user",{"_index":569,"title":{},"body":{"injectables/CommentService.html":{}}}],["leftjoinandselect('comments.user",{"_index":1093,"title":{},"body":{"injectables/ProductService.html":{}}}],["leftjoinandselect('product.comments",{"_index":1092,"title":{},"body":{"injectables/ProductService.html":{}}}],["leftjoinandselect('product.seller",{"_index":1091,"title":{},"body":{"injectables/ProductService.html":{}}}],["leftjoinandselect('user.reservation",{"_index":1369,"title":{},"body":{"injectables/UsersService.html":{}}}],["legend",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["li",{"_index":1590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":1480,"title":{},"body":{"properties.html":{}}}],["line",{"_index":1520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["link",{"_index":1643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["list",{"_index":1591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["local",{"_index":673,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/LocalAuthStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["local'})@isstring()@isnotempty",{"_index":667,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["localauthguard",{"_index":228,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localauthstrategy",{"_index":320,"title":{"injectables/LocalAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalAuthStrategy.html":{},"coverage.html":{},"index.html":{}}}],["location",{"_index":643,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/Reservation.html":{}}}],["login",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(loginuserdto",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuserdto",{"_index":226,"title":{"classes/LoginUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["loginuserdto.password",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuserdto})@httpcode(200)@useguards(localauthguard)@apiresponse({description",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["lspace",{"_index":1529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["luck",{"_index":1667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mail",{"_index":706,"title":{},"body":{"injectables/EmailService.html":{}}}],["mail.options",{"_index":703,"title":{},"body":{"injectables/EmailService.html":{}}}],["main",{"_index":1559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mainpageurl",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["make",{"_index":1538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["makes",{"_index":1549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manager",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"modules/RedisModule.html":{},"dependencies.html":{}}}],["manytomany",{"_index":1108,"title":{},"body":{"entities/Rating.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":1104,"title":{},"body":{"entities/Rating.html":{},"entities/User.html":{}}}],["manytoone",{"_index":512,"title":{},"body":{"entities/Comment.html":{},"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{}}}],["manytoone(undefined",{"_index":506,"title":{},"body":{"entities/Comment.html":{},"entities/Product.html":{},"entities/Reservation.html":{}}}],["map",{"_index":1251,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["margin",{"_index":1523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matched",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["matches",{"_index":489,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["matches(/^(?=.*[a",{"_index":497,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["matching",{"_index":50,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.itemcount",{"_index":928,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["max",{"_index":958,"title":{},"body":{"classes/PageOptionsDto.html":{},"miscellaneous/variables.html":{}}}],["max(50",{"_index":965,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["maximum",{"_index":948,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["mb0",{"_index":1618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["media",{"_index":1631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":778,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["messageviewbody",{"_index":1645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meta",{"_index":890,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"coverage.html":{}}}],["meta.dto",{"_index":899,"title":{},"body":{"classes/PageDto.html":{},"injectables/ProductService.html":{}}}],["meta.dto.ts",{"_index":903,"title":{},"body":{"classes/PageMetaDto.html":{},"coverage.html":{}}}],["meta.dto.ts:12",{"_index":914,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:15",{"_index":916,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:18",{"_index":913,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:21",{"_index":912,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:6",{"_index":915,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:9",{"_index":917,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["metadata",{"_index":1455,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":959,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["min(1",{"_index":964,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["minimum",{"_index":963,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["minlength",{"_index":490,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["minlength(7",{"_index":494,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["miscellaneous",{"_index":1459,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":1318,"title":{},"body":{"entities/User.html":{}}}],["mobile",{"_index":1629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":1504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["model",{"_index":992,"title":{},"body":{"entities/Product.html":{}}}],["module",{"_index":0,"title":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/RedisModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/RedisModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/RedisModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["ms",{"_index":1502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mso",{"_index":1528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mt0",{"_index":1617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["navaer_auth_callback_url",{"_index":42,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["naver",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{},"injectables/NaverAuthStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["naver_auth_clientid",{"_index":40,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["naver_auth_clientsecret",{"_index":41,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["naverauthguard",{"_index":240,"title":{"injectables/NaverAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/NaverAuthGuard.html":{},"coverage.html":{}}}],["naverauthstrategy",{"_index":321,"title":{"injectables/NaverAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/NaverAuthStrategy.html":{},"coverage.html":{},"index.html":{}}}],["naverlogin",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["naverlogincallback",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["naverlogincallback(@req",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["naverlogincallback(req",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["nbsp",{"_index":1652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestinterceptor",{"_index":1250,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/common/cache",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{},"modules/RedisModule.html":{}}}],["nestjs/config",{"_index":11,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"modules/RedisModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1418,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":324,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1260,"title":{},"body":{"classes/UpdateAuthDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":326,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1420,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"controllers/CommentController.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"controllers/OrderController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":548,"title":{},"body":{"modules/CommentModule.html":{},"injectables/CommentService.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"injectables/CommentService.html":{},"classes/CreateReservationDto.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/OrderService.html":{},"injectables/ProductService.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newcomment",{"_index":564,"title":{},"body":{"injectables/CommentService.html":{}}}],["newpassword",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/NewPasswordDto.html":{}}}],["newpassword(@body",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["newpassword(newpassworddto",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["newpassworddto",{"_index":181,"title":{"classes/NewPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/NewPasswordDto.html":{},"coverage.html":{}}}],["newpassworddto.newpassword",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["newproduct",{"_index":1035,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["newrating",{"_index":1118,"title":{},"body":{"controllers/RatingController.html":{},"injectables/RatingService.html":{}}}],["newreservation",{"_index":1191,"title":{},"body":{"controllers/ReservationController.html":{},"injectables/ReservationService.html":{}}}],["newsignup",{"_index":1338,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["newsignup.provider",{"_index":1383,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser",{"_index":758,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["next",{"_index":1245,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1254,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["nickname",{"_index":833,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["nodemailer",{"_index":709,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":707,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":698,"title":{},"body":{"injectables/EmailService.html":{}}}],["none",{"_index":1501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["normal",{"_index":1588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":1361,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception('no",{"_index":1386,"title":{},"body":{"injectables/UsersService.html":{}}}],["null",{"_index":674,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"entities/User.html":{}}}],["nullable",{"_index":977,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["number",{"_index":621,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/OrderService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"entities/Rating.html":{},"miscellaneous/variables.html":{}}}],["oauth2",{"_index":736,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{}}}],["object",{"_index":993,"title":{},"body":{"entities/Product.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":1255,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["observable",{"_index":1249,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["ol",{"_index":1587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onetomany",{"_index":990,"title":{},"body":{"entities/Product.html":{},"entities/Reservation.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":974,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["onetoone",{"_index":991,"title":{},"body":{"entities/Product.html":{},"entities/Reservation.html":{}}}],["onetoone(undefined",{"_index":985,"title":{},"body":{"entities/Product.html":{},"entities/Reservation.html":{}}}],["opacity",{"_index":1621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["option",{"_index":715,"title":{},"body":{"injectables/EmailService.html":{}}}],["optional",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":705,"title":{},"body":{"injectables/EmailService.html":{}}}],["options.dto",{"_index":935,"title":{},"body":{"interfaces/PageMetaDtoParametersInterface.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["options.dto.ts",{"_index":936,"title":{},"body":{"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:10",{"_index":943,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:20",{"_index":946,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:32",{"_index":951,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:34",{"_index":953,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["order",{"_index":836,"title":{"classes/Order.html":{}},"body":{"classes/Order.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["order.dto",{"_index":861,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/UpdateOrderDto.html":{}}}],["order.dto.ts",{"_index":602,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["order/dto/create",{"_index":860,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["order/dto/update",{"_index":862,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["order/order.controller",{"_index":877,"title":{},"body":{"modules/OrderModule.html":{}}}],["order/order.module",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["order/order.service",{"_index":859,"title":{},"body":{"controllers/OrderController.html":{},"modules/OrderModule.html":{}}}],["orderby('product.createdat",{"_index":1083,"title":{},"body":{"injectables/ProductService.html":{}}}],["orderconstants",{"_index":939,"title":{},"body":{"classes/PageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["orderconstants.asc",{"_index":940,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["ordercontroller",{"_index":838,"title":{"controllers/OrderController.html":{}},"body":{"controllers/OrderController.html":{},"modules/OrderModule.html":{},"coverage.html":{}}}],["ordermodule",{"_index":83,"title":{"modules/OrderModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OrderModule.html":{},"index.html":{},"modules.html":{}}}],["orderservice",{"_index":858,"title":{"injectables/OrderService.html":{}},"body":{"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"coverage.html":{},"index.html":{}}}],["otp",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["out",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["overflow",{"_index":1622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overview",{"_index":1468,"title":{"index.html":{}},"body":{"index.html":{}}}],["p",{"_index":1569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["package",{"_index":1412,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":1524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["page",{"_index":907,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["pagecount",{"_index":908,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":888,"title":{"classes/PageDto.html":{}},"body":{"classes/PageDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["pagedto(entities",{"_index":1088,"title":{},"body":{"injectables/ProductService.html":{}}}],["pagemetadto",{"_index":893,"title":{"classes/PageMetaDto.html":{}},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["pagemetadtoparametersinterface",{"_index":911,"title":{"interfaces/PageMetaDtoParametersInterface.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"coverage.html":{}}}],["pageoptionsdto",{"_index":921,"title":{"classes/PageOptionsDto.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["pageoptionsdto.order",{"_index":1084,"title":{},"body":{"injectables/ProductService.html":{}}}],["pageoptionsdto.page",{"_index":923,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.take",{"_index":925,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["param",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":1040,"title":{},"body":{"controllers/ProductController.html":{}}}],["parameters",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parameters.interface",{"_index":920,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["parameters.interface.ts",{"_index":934,"title":{},"body":{"interfaces/PageMetaDtoParametersInterface.html":{},"coverage.html":{}}}],["parser",{"_index":1425,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":1259,"title":{},"body":{"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createauthdto",{"_index":1258,"title":{},"body":{"classes/UpdateAuthDto.html":{}}}],["partialtype(createcommentdto",{"_index":1265,"title":{},"body":{"classes/UpdateCommentDto.html":{}}}],["partialtype(createorderdto",{"_index":1267,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["partialtype(createproductdto",{"_index":1270,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createratingdto",{"_index":1273,"title":{},"body":{"classes/UpdateRatingDto.html":{}}}],["partialtype(createreservationdto",{"_index":1276,"title":{},"body":{"classes/UpdateReservationDto.html":{}}}],["partialtype(createuserdto",{"_index":1279,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pass",{"_index":713,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":734,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":325,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":723,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["passportstrategy(strategy",{"_index":787,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{}}}],["password",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"modules/RedisModule.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["password.dto",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["password.dto.ts",{"_index":478,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/NewPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:10",{"_index":487,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:13",{"_index":835,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["password.dto.ts:20",{"_index":485,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password_change_url",{"_index":45,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AuthService.html":{}}}],["patch",{"_index":856,"title":{},"body":{"controllers/OrderController.html":{},"controllers/RatingController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":854,"title":{},"body":{"controllers/OrderController.html":{}}}],["payload",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthStrategy.html":{}}}],["payload.email",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["pg",{"_index":1316,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["phone",{"_index":1545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["picture",{"_index":747,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["pointer",{"_index":1607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["port",{"_index":683,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["position",{"_index":1593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{}}}],["post('/create",{"_index":1034,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["post('/create')@apibody({type",{"_index":1004,"title":{},"body":{"controllers/ProductController.html":{}}}],["post('change/password",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('change/password')@apioperation({summary",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('confirm/email",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('create",{"_index":540,"title":{},"body":{"controllers/CommentController.html":{}}}],["post('create')@apibody({type",{"_index":525,"title":{},"body":{"controllers/CommentController.html":{}}}],["post('forgot/password",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('forgot/password')@apioperation({summary",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@apioperation({summary",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('newpassword",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('newpassword')@apioperation({summary",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('send/email",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('send/email')@apiresponse({description",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup')@apicreatedresponse({description",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apibody({type",{"_index":1174,"title":{},"body":{"controllers/ReservationController.html":{}}}],["postgres",{"_index":680,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres_db",{"_index":24,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["postgres_host",{"_index":18,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["postgres_password",{"_index":23,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["postgres_port",{"_index":20,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["postgres_username",{"_index":22,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["postsignup",{"_index":1329,"title":{},"body":{"controllers/UsersController.html":{}}}],["postsignup(@body",{"_index":1337,"title":{},"body":{"controllers/UsersController.html":{}}}],["postsignup(createuserdto",{"_index":1332,"title":{},"body":{"controllers/UsersController.html":{}}}],["powered",{"_index":1626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{}}}],["preheader",{"_index":1619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preserve",{"_index":1638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preview",{"_index":1651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["price",{"_index":608,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["primary",{"_index":1611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primarygeneratedcolumn",{"_index":584,"title":{},"body":{"classes/CommonEntity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":580,"title":{},"body":{"classes/CommonEntity.html":{}}}],["private",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"injectables/ReservationService.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":676,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["product",{"_index":245,"title":{"entities/Product.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateReservationDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["product.comments",{"_index":518,"title":{},"body":{"entities/Comment.html":{}}}],["product.comments)@joincolumn",{"_index":507,"title":{},"body":{"entities/Comment.html":{}}}],["product.dto",{"_index":1025,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts",{"_index":605,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:11",{"_index":620,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:19",{"_index":617,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:26",{"_index":623,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:34",{"_index":624,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:42",{"_index":615,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:49",{"_index":626,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:57",{"_index":612,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.id",{"_index":1376,"title":{},"body":{"injectables/UsersService.html":{}}}],["product.reservation",{"_index":1165,"title":{},"body":{"entities/Reservation.html":{}}}],["product.reservation)@joincolumn",{"_index":1156,"title":{},"body":{"entities/Reservation.html":{}}}],["product.seller",{"_index":1233,"title":{},"body":{"injectables/ReservationService.html":{},"entities/User.html":{}}}],["product/dto/create",{"_index":1024,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{}}}],["product/entities/product.entity",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateReservationDto.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["product/product.controller",{"_index":1049,"title":{},"body":{"modules/ProductModule.html":{}}}],["product/product.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["product/product.service",{"_index":1023,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{}}}],["productbrand",{"_index":632,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["productbrand'})@isstring()@isnotempty",{"_index":611,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["productcontroller",{"_index":996,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["productcreate",{"_index":1052,"title":{},"body":{"injectables/ProductService.html":{}}}],["productcreate(createproductdto",{"_index":1060,"title":{},"body":{"injectables/ProductService.html":{}}}],["productdeletebyid",{"_index":1053,"title":{},"body":{"injectables/ProductService.html":{}}}],["productdeletebyid(id",{"_index":1062,"title":{},"body":{"injectables/ProductService.html":{}}}],["productgetall(category",{"_index":1071,"title":{},"body":{"injectables/ProductService.html":{}}}],["productgetbyid",{"_index":1054,"title":{},"body":{"injectables/ProductService.html":{}}}],["productgetbyid(id",{"_index":1064,"title":{},"body":{"injectables/ProductService.html":{}}}],["productid",{"_index":597,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateReservationDto.html":{},"injectables/UsersService.html":{}}}],["productid'})@isstring",{"_index":598,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateReservationDto.html":{}}}],["productimg",{"_index":609,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["productinterface",{"_index":1044,"title":{"interfaces/ProductInterface.html":{}},"body":{"interfaces/ProductInterface.html":{},"coverage.html":{}}}],["productmodule",{"_index":84,"title":{"modules/ProductModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"index.html":{},"modules.html":{}}}],["productname",{"_index":618,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["productname'})@isstring",{"_index":625,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["productname'})@isstring()@isnotempty",{"_index":619,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["productrepository",{"_index":1058,"title":{},"body":{"injectables/ProductService.html":{}}}],["productreservation",{"_index":1207,"title":{},"body":{"injectables/ReservationService.html":{}}}],["productreservation(createreservationdto",{"_index":1214,"title":{},"body":{"injectables/ReservationService.html":{}}}],["products",{"_index":1030,"title":{},"body":{"controllers/ProductController.html":{},"entities/User.html":{}}}],["products'})@apibearerauth('access",{"_index":1007,"title":{},"body":{"controllers/ProductController.html":{}}}],["productservice",{"_index":1022,"title":{"injectables/ProductService.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{},"index.html":{}}}],["productupdatebyid",{"_index":1055,"title":{},"body":{"injectables/ProductService.html":{}}}],["productupdatebyid(id",{"_index":1066,"title":{},"body":{"injectables/ProductService.html":{}}}],["profile",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/UsersService.html":{}}}],["profile(id",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["profile._json.kakao_account",{"_index":811,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["profile._json.properties",{"_index":810,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["profile_image",{"_index":809,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["profileimg",{"_index":656,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"entities/User.html":{}}}],["promise",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/User.html":{}}}],["properties",{"_index":455,"title":{"properties.html":{}},"body":{"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"interfaces/ProductInterface.html":{},"entities/Rating.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"interfaces/TokenPayloadInterface.html":{},"entities/User.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"properties.html":{}}}],["protocol",{"_index":1319,"title":{},"body":{"entities/User.html":{}}}],["provided",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["provider",{"_index":657,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["provider.google",{"_index":725,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["provider.kakao",{"_index":801,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["provider.local",{"_index":1303,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["provider.naver",{"_index":828,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["providers",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["public",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"entities/Comment.html":{},"classes/CommonEntity.html":{},"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"entities/User.html":{}}}],["purchase",{"_index":644,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/Reservation.html":{}}}],["purpose",{"_index":1661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["put",{"_index":1021,"title":{},"body":{"controllers/ProductController.html":{}}}],["put(':id",{"_index":1039,"title":{},"body":{"controllers/ProductController.html":{}}}],["put(':id')@apioperation({summary",{"_index":1019,"title":{},"body":{"controllers/ProductController.html":{}}}],["query",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{},"injectables/UsersService.html":{}}}],["query('category",{"_index":1032,"title":{},"body":{"controllers/ProductController.html":{}}}],["query('product",{"_index":1194,"title":{},"body":{"controllers/ReservationController.html":{}}}],["query('reservation",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{}}}],["query('user",{"_index":1193,"title":{},"body":{"controllers/ReservationController.html":{}}}],["query.andwhere('product.id",{"_index":1375,"title":{},"body":{"injectables/UsersService.html":{}}}],["query.andwhere('reservation.id",{"_index":1372,"title":{},"body":{"injectables/UsersService.html":{}}}],["query.getone",{"_index":1377,"title":{},"body":{"injectables/UsersService.html":{}}}],["querybuilder",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProductService.html":{},"injectables/ReservationService.html":{},"injectables/UsersService.html":{}}}],["querybuilder.andwhere(':category",{"_index":1077,"title":{},"body":{"injectables/ProductService.html":{}}}],["querybuilder.andwhere('product.category",{"_index":1082,"title":{},"body":{"injectables/ProductService.html":{}}}],["querybuilder.getcount",{"_index":1087,"title":{},"body":{"injectables/ProductService.html":{}}}],["querybuilder.getrawandentities",{"_index":1079,"title":{},"body":{"injectables/ProductService.html":{},"injectables/ReservationService.html":{},"injectables/UsersService.html":{}}}],["querybuilder.leftjoinandselect('product.comments",{"_index":1074,"title":{},"body":{"injectables/ProductService.html":{}}}],["querybuilder.leftjoinandselect('product.seller",{"_index":1073,"title":{},"body":{"injectables/ProductService.html":{}}}],["querybuilder.leftjoinandselect('reservation.product",{"_index":1229,"title":{},"body":{"injectables/ReservationService.html":{}}}],["querybuilder.leftjoinandselect('reservation.user",{"_index":1228,"title":{},"body":{"injectables/ReservationService.html":{}}}],["querybuilder.leftjoinandselect('user.reservation",{"_index":1366,"title":{},"body":{"injectables/UsersService.html":{}}}],["querybuilder.where('reservation.product.id",{"_index":1231,"title":{},"body":{"injectables/ReservationService.html":{}}}],["querybuilder.where('reservation.user",{"_index":1230,"title":{},"body":{"injectables/ReservationService.html":{}}}],["querybuilder.where('user.reservation",{"_index":1367,"title":{},"body":{"injectables/UsersService.html":{}}}],["r",{"_index":1315,"title":{},"body":{"entities/User.html":{}}}],["radius",{"_index":1561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rating",{"_index":637,"title":{"entities/Rating.html":{}},"body":{"classes/CreateRatingDto.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"entities/User.html":{},"coverage.html":{}}}],["rating.buyer",{"_index":1305,"title":{},"body":{"entities/User.html":{}}}],["rating.buyer)@joincolumn",{"_index":1291,"title":{},"body":{"entities/User.html":{}}}],["rating.controller",{"_index":1125,"title":{},"body":{"modules/RatingModule.html":{}}}],["rating.dto",{"_index":1115,"title":{},"body":{"controllers/RatingController.html":{},"injectables/RatingService.html":{},"classes/UpdateRatingDto.html":{}}}],["rating.dto.ts",{"_index":635,"title":{},"body":{"classes/CreateRatingDto.html":{},"classes/UpdateRatingDto.html":{},"coverage.html":{}}}],["rating.dto.ts:4",{"_index":639,"title":{},"body":{"classes/CreateRatingDto.html":{}}}],["rating.dto.ts:5",{"_index":638,"title":{},"body":{"classes/CreateRatingDto.html":{}}}],["rating.service",{"_index":1124,"title":{},"body":{"modules/RatingModule.html":{}}}],["rating/dto/create",{"_index":1114,"title":{},"body":{"controllers/RatingController.html":{},"injectables/RatingService.html":{},"classes/UpdateRatingDto.html":{}}}],["rating/entities/rating.entity",{"_index":1135,"title":{},"body":{"injectables/RatingService.html":{},"entities/User.html":{}}}],["rating/rating.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["rating/rating.service",{"_index":1113,"title":{},"body":{"controllers/RatingController.html":{}}}],["ratingcontroller",{"_index":1110,"title":{"controllers/RatingController.html":{}},"body":{"controllers/RatingController.html":{},"modules/RatingModule.html":{},"coverage.html":{}}}],["ratingmodule",{"_index":85,"title":{"modules/RatingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RatingModule.html":{},"index.html":{},"modules.html":{}}}],["ratingrepository",{"_index":1132,"title":{},"body":{"injectables/RatingService.html":{}}}],["ratingservice",{"_index":1112,"title":{"injectables/RatingService.html":{}},"body":{"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"coverage.html":{},"index.html":{}}}],["readonly",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentController.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{}}}],["really",{"_index":1658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recipient",{"_index":1662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["record",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["redis",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{},"modules/RedisModule.html":{},"dependencies.html":{}}}],["redis/redis.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_host",{"_index":30,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["redis_password",{"_index":33,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["redis_port",{"_index":31,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["redis_ttl",{"_index":34,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["redis_user",{"_index":32,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["redismodule",{"_index":86,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"index.html":{},"modules.html":{}}}],["redisstore",{"_index":1142,"title":{},"body":{"modules/RedisModule.html":{}}}],["reflect",{"_index":1454,"title":{},"body":{"dependencies.html":{}}}],["refreshtoken",{"_index":803,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["region",{"_index":610,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["relations",{"_index":1096,"title":{},"body":{"injectables/ProductService.html":{},"injectables/ReservationService.html":{},"injectables/UsersService.html":{}}}],["remove",{"_index":842,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["remove(@param('id",{"_index":872,"title":{},"body":{"controllers/OrderController.html":{}}}],["remove(id",{"_index":849,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["removes",{"_index":887,"title":{},"body":{"injectables/OrderService.html":{}}}],["repository",{"_index":555,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"injectables/ReservationService.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"injectables/UsersService.html":{}}}],["req.user",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["req.user.email",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ProductInterface.html":{},"interfaces/RequestWithUserInterface.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":1491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestwithuserinterface",{"_index":164,"title":{"interfaces/RequestWithUserInterface.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"interfaces/RequestWithUserInterface.html":{},"controllers/ReservationController.html":{},"coverage.html":{}}}],["required",{"_index":613,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["res",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{}}}],["res.send(script",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["reservation",{"_index":153,"title":{"entities/Reservation.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateReservationDto.html":{},"entities/Product.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["reservation.dto",{"_index":1188,"title":{},"body":{"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"classes/UpdateReservationDto.html":{}}}],["reservation.dto.ts",{"_index":642,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["reservation.dto.ts:11",{"_index":647,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:18",{"_index":646,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:25",{"_index":651,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:32",{"_index":648,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:38",{"_index":652,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.id",{"_index":1374,"title":{},"body":{"injectables/UsersService.html":{}}}],["reservation.product",{"_index":995,"title":{},"body":{"entities/Product.html":{},"injectables/UsersService.html":{}}}],["reservation.product)@joincolumn",{"_index":986,"title":{},"body":{"entities/Product.html":{}}}],["reservation.product.seller",{"_index":1380,"title":{},"body":{"injectables/UsersService.html":{}}}],["reservation.user",{"_index":1302,"title":{},"body":{"entities/User.html":{}}}],["reservation.user)@joincolumn",{"_index":1293,"title":{},"body":{"entities/User.html":{}}}],["reservation/dto/create",{"_index":1187,"title":{},"body":{"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"classes/UpdateReservationDto.html":{}}}],["reservation/entities/reservation.entity",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Product.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["reservation/reservation.controller",{"_index":1204,"title":{},"body":{"modules/ReservationModule.html":{}}}],["reservation/reservation.module",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["reservation/reservation.service",{"_index":1186,"title":{},"body":{"controllers/ReservationController.html":{},"modules/ReservationModule.html":{}}}],["reservationcontroller",{"_index":1167,"title":{"controllers/ReservationController.html":{}},"body":{"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"coverage.html":{}}}],["reservationdate",{"_index":645,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/Reservation.html":{}}}],["reservationgetall",{"_index":1208,"title":{},"body":{"injectables/ReservationService.html":{}}}],["reservationgetall(user",{"_index":1216,"title":{},"body":{"injectables/ReservationService.html":{}}}],["reservationgetbyid",{"_index":1209,"title":{},"body":{"injectables/ReservationService.html":{}}}],["reservationgetbyid(id",{"_index":1218,"title":{},"body":{"injectables/ReservationService.html":{}}}],["reservationid",{"_index":1373,"title":{},"body":{"injectables/UsersService.html":{}}}],["reservationmodule",{"_index":87,"title":{"modules/ReservationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ReservationModule.html":{},"index.html":{},"modules.html":{}}}],["reservationquery",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["reservationrepository",{"_index":1212,"title":{},"body":{"injectables/ReservationService.html":{}}}],["reservations",{"_index":1195,"title":{},"body":{"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"entities/User.html":{}}}],["reservations.length",{"_index":1226,"title":{},"body":{"injectables/ReservationService.html":{}}}],["reservationservice",{"_index":1185,"title":{"injectables/ReservationService.html":{}},"body":{"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"coverage.html":{},"index.html":{}}}],["reset",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["resets",{"_index":1495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/typealiases.html":{}}}],["response.status(status).json",{"_index":780,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["responsive",{"_index":1628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["results",{"_index":49,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/EmailService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageOptionsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/RatingController.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["right",{"_index":1616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["road",{"_index":1674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["root/app.controller",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["root/app.service",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["rspace",{"_index":1531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":1252,"title":{},"body":{"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["s",{"_index":1314,"title":{},"body":{"entities/User.html":{}}}],["saltvalue",{"_index":1308,"title":{},"body":{"entities/User.html":{}}}],["san",{"_index":1675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sans",{"_index":1513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scheme",{"_index":471,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["scope",{"_index":744,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["screen",{"_index":1632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["script",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["secret",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":795,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["seller",{"_index":969,"title":{},"body":{"entities/Product.html":{},"injectables/ProductService.html":{}}}],["send",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["sendemail",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["sendemail(@body('email",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendemail(createuserdto.name",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendemail(email",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["sendmail",{"_index":699,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(options",{"_index":702,"title":{},"body":{"injectables/EmailService.html":{}}}],["separate",{"_index":1527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serif",{"_index":1514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["service",{"_index":335,"title":{},"body":{"modules/AuthModule.html":{},"injectables/EmailService.html":{}}}],["set",{"_index":1537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setbasepath('api",{"_index":475,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["setdescription('public",{"_index":465,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["settitle('koreanmarketapi",{"_index":464,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["setversion('1.0",{"_index":467,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["show",{"_index":1650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shrink",{"_index":1543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["simple",{"_index":1492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["size",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sizing",{"_index":1557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skip",{"_index":938,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["skip(pageoptionsdto.skip",{"_index":1085,"title":{},"body":{"injectables/ProductService.html":{}}}],["smoothing",{"_index":1516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sole",{"_index":1660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["solid",{"_index":1604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["something",{"_index":1546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sometimes",{"_index":1654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{}}}],["span",{"_index":1570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1467,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../order.constants.ts",{"_index":1461,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../provider.enum.ts",{"_index":1462,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../transform.interceptor.ts",{"_index":1485,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":1487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../verificationemail.ts",{"_index":1488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":60,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":107,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":108,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:101",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:108",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:115",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:129",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:137",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:161",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:168",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:178",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:184",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:49",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:57",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:62",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:75",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:87",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":322,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:115",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:123",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:127",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:134",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:150",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:157",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:27",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:37",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:49",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:66",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:76",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:88",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:96",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/create",{"_index":591,"title":{},"body":{"classes/CreateAuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/update",{"_index":1257,"title":{},"body":{"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":113,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/guards/google",{"_index":717,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":784,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/kakao",{"_index":798,"title":{},"body":{"classes/KakaoAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":812,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/naver",{"_index":825,"title":{},"body":{"injectables/NaverAuthGuard.html":{},"coverage.html":{}}}],["src/auth/interfaces/product.interface.ts",{"_index":1045,"title":{},"body":{"interfaces/ProductInterface.html":{},"coverage.html":{}}}],["src/auth/interfaces/requestwithuser.interface.ts",{"_index":1152,"title":{},"body":{"interfaces/RequestWithUserInterface.html":{},"coverage.html":{}}}],["src/auth/interfaces/tokenpayload.interface.ts",{"_index":1239,"title":{},"body":{"interfaces/TokenPayloadInterface.html":{},"coverage.html":{}}}],["src/auth/interfaces/verificationtokenpayload.interface.ts",{"_index":1389,"title":{},"body":{"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{}}}],["src/auth/strategies/google",{"_index":721,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt",{"_index":786,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/kakao",{"_index":800,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local",{"_index":814,"title":{},"body":{"injectables/LocalAuthStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/naver",{"_index":827,"title":{},"body":{"injectables/NaverAuthStrategy.html":{},"coverage.html":{}}}],["src/comment/comment.controller.ts",{"_index":520,"title":{},"body":{"controllers/CommentController.html":{},"coverage.html":{}}}],["src/comment/comment.controller.ts:36",{"_index":531,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/comment/comment.controller.ts:44",{"_index":533,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/comment/comment.module.ts",{"_index":546,"title":{},"body":{"modules/CommentModule.html":{}}}],["src/comment/comment.service.ts",{"_index":552,"title":{},"body":{"injectables/CommentService.html":{},"coverage.html":{}}}],["src/comment/comment.service.ts:15",{"_index":561,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comment/comment.service.ts:24",{"_index":559,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comment/comment.service.ts:9",{"_index":556,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comment/dto/create",{"_index":593,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/comment/dto/update",{"_index":1264,"title":{},"body":{"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["src/comment/entities/comment.entity.ts",{"_index":502,"title":{},"body":{"entities/Comment.html":{},"coverage.html":{}}}],["src/comment/entities/comment.entity.ts:10",{"_index":505,"title":{},"body":{"entities/Comment.html":{}}}],["src/comment/entities/comment.entity.ts:14",{"_index":510,"title":{},"body":{"entities/Comment.html":{}}}],["src/comment/entities/comment.entity.ts:18",{"_index":508,"title":{},"body":{"entities/Comment.html":{}}}],["src/common/config/config.module.ts",{"_index":6,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["src/common/config/swagger.document.ts",{"_index":454,"title":{},"body":{"classes/BaseAPIDocument.html":{},"coverage.html":{}}}],["src/common/config/swagger.document.ts:4",{"_index":461,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["src/common/config/swagger.document.ts:6",{"_index":462,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["src/common/constants/order.constants.ts",{"_index":1463,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/decorator/user.decorator.ts",{"_index":1400,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dtos/page",{"_index":902,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts",{"_index":889,"title":{},"body":{"classes/PageDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts:11",{"_index":894,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dtos/page.dto.ts:8",{"_index":896,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/entities/common.entity.ts",{"_index":574,"title":{},"body":{"classes/CommonEntity.html":{},"coverage.html":{}}}],["src/common/entities/common.entity.ts:12",{"_index":579,"title":{},"body":{"classes/CommonEntity.html":{}}}],["src/common/entities/common.entity.ts:15",{"_index":583,"title":{},"body":{"classes/CommonEntity.html":{}}}],["src/common/entities/common.entity.ts:9",{"_index":581,"title":{},"body":{"classes/CommonEntity.html":{}}}],["src/common/filters/http",{"_index":761,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/interceptors/transform.interceptor.ts",{"_index":1241,"title":{},"body":{"injectables/TransformInterceptor.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/common/interceptors/transform.interceptor.ts:22",{"_index":1247,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/common/interfaces/page",{"_index":933,"title":{},"body":{"interfaces/PageMetaDtoParametersInterface.html":{},"coverage.html":{}}}],["src/common/template/verificationemail.ts",{"_index":1404,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/database.module.ts",{"_index":675,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/email/email.module.ts",{"_index":696,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service.ts",{"_index":697,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:19",{"_index":704,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:8",{"_index":701,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/main.ts",{"_index":1405,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/order/dto/create",{"_index":601,"title":{},"body":{"classes/CreateOrderDto.html":{},"coverage.html":{}}}],["src/order/dto/update",{"_index":1266,"title":{},"body":{"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["src/order/entities/order.entity.ts",{"_index":837,"title":{},"body":{"classes/Order.html":{},"coverage.html":{}}}],["src/order/order.controller.ts",{"_index":839,"title":{},"body":{"controllers/OrderController.html":{},"coverage.html":{}}}],["src/order/order.controller.ts:21",{"_index":845,"title":{},"body":{"controllers/OrderController.html":{}}}],["src/order/order.controller.ts:26",{"_index":846,"title":{},"body":{"controllers/OrderController.html":{}}}],["src/order/order.controller.ts:31",{"_index":848,"title":{},"body":{"controllers/OrderController.html":{}}}],["src/order/order.controller.ts:36",{"_index":855,"title":{},"body":{"controllers/OrderController.html":{}}}],["src/order/order.controller.ts:41",{"_index":851,"title":{},"body":{"controllers/OrderController.html":{}}}],["src/order/order.module.ts",{"_index":876,"title":{},"body":{"modules/OrderModule.html":{}}}],["src/order/order.service.ts",{"_index":878,"title":{},"body":{"injectables/OrderService.html":{},"coverage.html":{}}}],["src/order/order.service.ts:11",{"_index":880,"title":{},"body":{"injectables/OrderService.html":{}}}],["src/order/order.service.ts:15",{"_index":881,"title":{},"body":{"injectables/OrderService.html":{}}}],["src/order/order.service.ts:19",{"_index":883,"title":{},"body":{"injectables/OrderService.html":{}}}],["src/order/order.service.ts:23",{"_index":882,"title":{},"body":{"injectables/OrderService.html":{}}}],["src/order/order.service.ts:7",{"_index":879,"title":{},"body":{"injectables/OrderService.html":{}}}],["src/product/dto/create",{"_index":604,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/product/dto/update",{"_index":1269,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/product/entities/product.entity.ts",{"_index":966,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["src/product/entities/product.entity.ts:17",{"_index":981,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:23",{"_index":978,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:26",{"_index":982,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:32",{"_index":983,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:37",{"_index":973,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:40",{"_index":984,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:45",{"_index":980,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:48",{"_index":970,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:52",{"_index":989,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:55",{"_index":976,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:62",{"_index":987,"title":{},"body":{"entities/Product.html":{}}}],["src/product/product.controller.ts",{"_index":997,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/product/product.controller.ts:40",{"_index":1014,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:56",{"_index":1008,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:73",{"_index":1017,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:81",{"_index":1020,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:90",{"_index":1011,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.module.ts",{"_index":1048,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/product/product.service.ts",{"_index":1051,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/product/product.service.ts:103",{"_index":1063,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:107",{"_index":1067,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:13",{"_index":1057,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:20",{"_index":1061,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:46",{"_index":1059,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:82",{"_index":1065,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/rating/dto/create",{"_index":634,"title":{},"body":{"classes/CreateRatingDto.html":{},"coverage.html":{}}}],["src/rating/dto/update",{"_index":1272,"title":{},"body":{"classes/UpdateRatingDto.html":{},"coverage.html":{}}}],["src/rating/entities/rating.entity.ts",{"_index":1103,"title":{},"body":{"entities/Rating.html":{},"coverage.html":{}}}],["src/rating/entities/rating.entity.ts:13",{"_index":1107,"title":{},"body":{"entities/Rating.html":{}}}],["src/rating/entities/rating.entity.ts:8",{"_index":1106,"title":{},"body":{"entities/Rating.html":{}}}],["src/rating/rating.controller.ts",{"_index":1111,"title":{},"body":{"controllers/RatingController.html":{},"coverage.html":{}}}],["src/rating/rating.module.ts",{"_index":1123,"title":{},"body":{"modules/RatingModule.html":{}}}],["src/rating/rating.service.ts",{"_index":1128,"title":{},"body":{"injectables/RatingService.html":{},"coverage.html":{}}}],["src/rating/rating.service.ts:15",{"_index":1134,"title":{},"body":{"injectables/RatingService.html":{}}}],["src/rating/rating.service.ts:9",{"_index":1131,"title":{},"body":{"injectables/RatingService.html":{}}}],["src/redis/redis.module.ts",{"_index":1140,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/reservation/dto/create",{"_index":641,"title":{},"body":{"classes/CreateReservationDto.html":{},"coverage.html":{}}}],["src/reservation/dto/update",{"_index":1275,"title":{},"body":{"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["src/reservation/entities/reservation.entity.ts",{"_index":1153,"title":{},"body":{"entities/Reservation.html":{},"coverage.html":{}}}],["src/reservation/entities/reservation.entity.ts:16",{"_index":1155,"title":{},"body":{"entities/Reservation.html":{}}}],["src/reservation/entities/reservation.entity.ts:20",{"_index":1157,"title":{},"body":{"entities/Reservation.html":{}}}],["src/reservation/entities/reservation.entity.ts:25",{"_index":1158,"title":{},"body":{"entities/Reservation.html":{}}}],["src/reservation/entities/reservation.entity.ts:29",{"_index":1163,"title":{},"body":{"entities/Reservation.html":{}}}],["src/reservation/entities/reservation.entity.ts:32",{"_index":1154,"title":{},"body":{"entities/Reservation.html":{}}}],["src/reservation/entities/reservation.entity.ts:35",{"_index":1161,"title":{},"body":{"entities/Reservation.html":{}}}],["src/reservation/reservation.controller.ts",{"_index":1168,"title":{},"body":{"controllers/ReservationController.html":{},"coverage.html":{}}}],["src/reservation/reservation.controller.ts:39",{"_index":1177,"title":{},"body":{"controllers/ReservationController.html":{}}}],["src/reservation/reservation.controller.ts:55",{"_index":1182,"title":{},"body":{"controllers/ReservationController.html":{}}}],["src/reservation/reservation.controller.ts:69",{"_index":1184,"title":{},"body":{"controllers/ReservationController.html":{}}}],["src/reservation/reservation.controller.ts:77",{"_index":1180,"title":{},"body":{"controllers/ReservationController.html":{}}}],["src/reservation/reservation.module.ts",{"_index":1203,"title":{},"body":{"modules/ReservationModule.html":{}}}],["src/reservation/reservation.service.ts",{"_index":1206,"title":{},"body":{"injectables/ReservationService.html":{},"coverage.html":{}}}],["src/reservation/reservation.service.ts:10",{"_index":1211,"title":{},"body":{"injectables/ReservationService.html":{}}}],["src/reservation/reservation.service.ts:17",{"_index":1215,"title":{},"body":{"injectables/ReservationService.html":{}}}],["src/reservation/reservation.service.ts:28",{"_index":1217,"title":{},"body":{"injectables/ReservationService.html":{}}}],["src/reservation/reservation.service.ts:49",{"_index":1219,"title":{},"body":{"injectables/ReservationService.html":{}}}],["src/reservation/reservation.service.ts:58",{"_index":1213,"title":{},"body":{"injectables/ReservationService.html":{}}}],["src/users/dto/change",{"_index":477,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["src/users/dto/confirm",{"_index":586,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":654,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/login",{"_index":821,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/users/dto/new",{"_index":834,"title":{},"body":{"classes/NewPasswordDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":1278,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/provider.enum.ts",{"_index":1465,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/users/entities/user.entity.ts",{"_index":1280,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:27",{"_index":1285,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:29",{"_index":1284,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":1287,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:34",{"_index":1288,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":1294,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:47",{"_index":1290,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:50",{"_index":1282,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:53",{"_index":1289,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:57",{"_index":1292,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1327,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:27",{"_index":1333,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:33",{"_index":1331,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1344,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1348,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:13",{"_index":1351,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:47",{"_index":1360,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:67",{"_index":1355,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:75",{"_index":1358,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:84",{"_index":1357,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:93",{"_index":1354,"title":{},"body":{"injectables/UsersService.html":{}}}],["statements",{"_index":1393,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":774,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":777,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["store",{"_index":1143,"title":{},"body":{"modules/RedisModule.html":{},"dependencies.html":{}}}],["strategy",{"_index":724,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["stretch",{"_index":1542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{}}}],["string,reservation",{"_index":1378,"title":{},"body":{"injectables/UsersService.html":{}}}],["style",{"_index":1592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["styles",{"_index":1612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["styling",{"_index":1496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subject",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["subscribed",{"_index":753,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["success",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ReservationController.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["success'})@apibearerauth('access",{"_index":1176,"title":{},"body":{"controllers/ReservationController.html":{}}}],["summary",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["super",{"_index":737,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["support",{"_index":1476,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1477,"title":{},"body":{"modules.html":{}}}],["swag",{"_index":493,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["synchronize",{"_index":692,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["t",{"_index":892,"title":{},"body":{"classes/PageDto.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":1411,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["table.body",{"_index":1634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1410,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":909,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["take(pageoptionsdto.take",{"_index":1086,"title":{},"body":{"injectables/ProductService.html":{}}}],["tbody",{"_index":1602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["td",{"_index":1532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["td:hover",{"_index":1646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["template",{"_index":1659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["text",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{},"entities/Product.html":{},"miscellaneous/variables.html":{}}}],["this.appservice.gethello",{"_index":68,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.changepassword(changepassworddto",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.changepasswordwithtoken(user",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.confirmemail(confirmemaildto",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.createuser(createuserdto",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.forgotpassword(email",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.generateaccesstoken(user.id",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login",{"_index":820,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["this.authservice.login(loginuserdto",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.profile",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.sendemail(email",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.builder",{"_index":463,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["this.cachemanger.del(confirmemaildto.email",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cachemanger.get(confirmemaildto.email",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cachemanger.set(email",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.commentrepository",{"_index":567,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentrepository.create",{"_index":565,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentrepository.save(newcomment",{"_index":566,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentservice.commentgeybyid(id",{"_index":543,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.createcomment(createcommentdto",{"_index":541,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.configservice.get",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('accesstoken_expiration_time')}m",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('accesstoken_secret_key",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_chagne_password_expiresin",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_chagne_password_secret",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.data",{"_index":900,"title":{},"body":{"classes/PageDto.html":{}}}],["this.decodedconfirmationtoken(changepassworddto.token",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.emailservice.sendmail",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generateotp",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hasnextpage",{"_index":930,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":929,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.itemcount",{"_index":926,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.jwtservice.sign(payload",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.meta",{"_index":901,"title":{},"body":{"classes/PageDto.html":{}}}],["this.nodemailertransport",{"_index":710,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail(options",{"_index":716,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.orderservice.create(createorderdto",{"_index":866,"title":{},"body":{"controllers/OrderController.html":{}}}],["this.orderservice.findall",{"_index":867,"title":{},"body":{"controllers/OrderController.html":{}}}],["this.orderservice.findone(+id",{"_index":869,"title":{},"body":{"controllers/OrderController.html":{}}}],["this.orderservice.remove(+id",{"_index":873,"title":{},"body":{"controllers/OrderController.html":{}}}],["this.orderservice.update(+id",{"_index":871,"title":{},"body":{"controllers/OrderController.html":{}}}],["this.page",{"_index":922,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.pagecount",{"_index":927,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.password",{"_index":1310,"title":{},"body":{"entities/User.html":{}}}],["this.productrepository",{"_index":1089,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.create",{"_index":1069,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.createquerybuilder",{"_index":1072,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.delete",{"_index":1097,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.findoneby",{"_index":1095,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.save(newproduct",{"_index":1070,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.update(createproductdto",{"_index":1100,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.update(id",{"_index":1101,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productservice.getallproducts(pageoptionsdto",{"_index":1033,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.productcreate",{"_index":1036,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.productdeletebyid(id",{"_index":1043,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.productgetall(category",{"_index":1031,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.productgetbyid(id",{"_index":1038,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.productupdatebyid(id",{"_index":1041,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.profileimg",{"_index":1312,"title":{},"body":{"entities/User.html":{}}}],["this.provider",{"_index":1307,"title":{},"body":{"entities/User.html":{}}}],["this.ratingrepository.create",{"_index":1137,"title":{},"body":{"injectables/RatingService.html":{}}}],["this.ratingrepository.save(newrating",{"_index":1139,"title":{},"body":{"injectables/RatingService.html":{}}}],["this.ratingservice.createrating(createratingdto",{"_index":1119,"title":{},"body":{"controllers/RatingController.html":{}}}],["this.reservationrepository.create",{"_index":1221,"title":{},"body":{"injectables/ReservationService.html":{}}}],["this.reservationrepository.createquerybuilder",{"_index":1227,"title":{},"body":{"injectables/ReservationService.html":{}}}],["this.reservationrepository.delete(id",{"_index":1236,"title":{},"body":{"injectables/ReservationService.html":{}}}],["this.reservationrepository.find",{"_index":1223,"title":{},"body":{"injectables/ReservationService.html":{}}}],["this.reservationrepository.findone",{"_index":1232,"title":{},"body":{"injectables/ReservationService.html":{}}}],["this.reservationrepository.findoneby({id",{"_index":1234,"title":{},"body":{"injectables/ReservationService.html":{}}}],["this.reservationrepository.save(newreservation",{"_index":1222,"title":{},"body":{"injectables/ReservationService.html":{}}}],["this.reservationservice.deletereservationbyid(id",{"_index":1200,"title":{},"body":{"controllers/ReservationController.html":{}}}],["this.reservationservice.productreservation",{"_index":1192,"title":{},"body":{"controllers/ReservationController.html":{}}}],["this.reservationservice.reservationgetall",{"_index":1196,"title":{},"body":{"controllers/ReservationController.html":{}}}],["this.reservationservice.reservationgetbyid(id",{"_index":1198,"title":{},"body":{"controllers/ReservationController.html":{}}}],["this.take",{"_index":924,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.userrepository.create(createuserdto",{"_index":1382,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.createquerybuilder",{"_index":1381,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.createquerybuilder('user",{"_index":1365,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":1379,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneby",{"_index":1385,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(newsignup",{"_index":1384,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":1388,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.changepassword",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.changepassword(userid",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.createuser",{"_index":759,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(email",{"_index":750,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["this.usersservice.getuserbyemail(loginuserdto.email",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getuserbyid(id",{"_index":1340,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyid(payload.userid",{"_index":797,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["this.usersservice.usergetall",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["throw",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/ProductService.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["timestamp",{"_index":781,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["timestamptz",{"_index":1160,"title":{},"body":{"entities/Reservation.html":{}}}],["token",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["token')@httpcode(200)@apioperation({summary",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["token')@useguards(jwtauthguard",{"_index":530,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["token=${token",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokenexpirederror",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokenpayloadinterface",{"_index":379,"title":{"interfaces/TokenPayloadInterface.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthStrategy.html":{},"interfaces/TokenPayloadInterface.html":{},"coverage.html":{}}}],["top",{"_index":1535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tr",{"_index":1603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transactional",{"_index":1493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transform",{"_index":1584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformer",{"_index":960,"title":{},"body":{"classes/PageOptionsDto.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":1240,"title":{"injectables/TransformInterceptor.html":{}},"body":{"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["transparent",{"_index":1620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateReservationDto.html":{},"modules/DatabaseModule.html":{},"classes/PageDto.html":{},"entities/Product.html":{},"injectables/ProductService.html":{},"modules/RedisModule.html":{},"entities/Reservation.html":{},"entities/User.html":{}}}],["true})@isboolean",{"_index":650,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["try",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"entities/User.html":{}}}],["ttl",{"_index":1149,"title":{},"body":{"modules/RedisModule.html":{}}}],["type",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"injectables/RatingService.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1483,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":779,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{}}}],["typeorm",{"_index":513,"title":{},"body":{"entities/Comment.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"entities/Product.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"injectables/RatingService.html":{},"entities/Reservation.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":547,"title":{},"body":{"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([comment",{"_index":551,"title":{},"body":{"modules/CommentModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":1050,"title":{},"body":{"modules/ProductModule.html":{}}}],["typeormmodule.forfeature([rating",{"_index":1127,"title":{},"body":{"modules/RatingModule.html":{}}}],["typeormmodule.forfeature([reservation",{"_index":1205,"title":{},"body":{"modules/ReservationModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1346,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":677,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":1261,"title":{},"body":{"classes/UpdateAuthDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["types/bcryptjs",{"_index":1422,"title":{},"body":{"dependencies.html":{}}}],["types/cookie",{"_index":1424,"title":{},"body":{"dependencies.html":{}}}],["types/gravatar",{"_index":1427,"title":{},"body":{"dependencies.html":{}}}],["types/hapi__joi",{"_index":1429,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":1431,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":1433,"title":{},"body":{"dependencies.html":{}}}],["typography",{"_index":1573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ul",{"_index":1586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"injectables/ProductService.html":{},"entities/User.html":{}}}],["undefined})@isarray",{"_index":616,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["undefined})@isenum(orderconstants)@isoptional",{"_index":942,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["underline",{"_index":1599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unique",{"_index":1300,"title":{},"body":{"entities/User.html":{}}}],["unknown",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/JwtAuthStrategy.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1481,"title":{},"body":{"properties.html":{}}}],["unsubscribe",{"_index":1681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":843,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{},"controllers/ProductController.html":{}}}],["update(@param('id",{"_index":870,"title":{},"body":{"controllers/OrderController.html":{}}}],["update(id",{"_index":852,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["updateauthdto",{"_index":1256,"title":{"classes/UpdateAuthDto.html":{}},"body":{"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["updatecommentdto",{"_index":1263,"title":{"classes/UpdateCommentDto.html":{}},"body":{"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["updated",{"_index":1102,"title":{},"body":{"injectables/ProductService.html":{}}}],["updatedat",{"_index":576,"title":{},"body":{"classes/CommonEntity.html":{}}}],["updatedatecolumn",{"_index":582,"title":{},"body":{"classes/CommonEntity.html":{}}}],["updateduser",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updateorderdto",{"_index":853,"title":{"classes/UpdateOrderDto.html":{}},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["updateproduct",{"_index":1099,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductbyid",{"_index":1002,"title":{},"body":{"controllers/ProductController.html":{}}}],["updateproductbyid(createproductdto",{"_index":1018,"title":{},"body":{"controllers/ProductController.html":{}}}],["updateproductdto",{"_index":1268,"title":{"classes/UpdateProductDto.html":{}},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateratingdto",{"_index":1271,"title":{"classes/UpdateRatingDto.html":{}},"body":{"classes/UpdateRatingDto.html":{},"coverage.html":{}}}],["updatereservationdto",{"_index":1274,"title":{"classes/UpdateReservationDto.html":{}},"body":{"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["updates",{"_index":886,"title":{},"body":{"injectables/OrderService.html":{}}}],["updateuserdto",{"_index":1277,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["url",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{}}}],["usefactory",{"_index":678,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["useful",{"_index":1613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{}}}],["useguards(googleauthguard",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{}}}],["useguards(kakaoauthguard",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(naverauthguard",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":202,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"injectables/CommentService.html":{},"classes/CreateRatingDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"entities/Product.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.comments",{"_index":517,"title":{},"body":{"entities/Comment.html":{}}}],["user.comments)@joincolumn",{"_index":509,"title":{},"body":{"entities/Comment.html":{}}}],["user.dto",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":655,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":822,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:17",{"_index":824,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:19",{"_index":662,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":659,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":664,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:44",{"_index":668,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:48",{"_index":666,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":1371,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.password",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.products",{"_index":994,"title":{},"body":{"entities/Product.html":{}}}],["user.products)@joincolumn",{"_index":988,"title":{},"body":{"entities/Product.html":{}}}],["user.provider",{"_index":751,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["user.rating",{"_index":1109,"title":{},"body":{"entities/Rating.html":{}}}],["user.rating)@joincolumn",{"_index":1105,"title":{},"body":{"entities/Rating.html":{}}}],["user.reservation",{"_index":1166,"title":{},"body":{"entities/Reservation.html":{}}}],["user.reservation)@joincolumn",{"_index":1162,"title":{},"body":{"entities/Reservation.html":{}}}],["user.validatepassword",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["usergetall",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["usergetall(id",{"_index":1359,"title":{},"body":{"injectables/UsersService.html":{}}}],["usergetall(reservation?:reservation",{"_index":1364,"title":{},"body":{"injectables/UsersService.html":{}}}],["usergetall(user",{"_index":1368,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/UsersService.html":{}}}],["userinput",{"_index":748,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["userlogin",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["userlogin(@req",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["userlogin(req",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["username",{"_index":660,"title":{},"body":{"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{}}}],["username'})@isstring()@isnotempty",{"_index":661,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["usernamefield",{"_index":819,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["userrepository",{"_index":1352,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":1224,"title":{},"body":{"injectables/ReservationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users/dto/change",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/dto/confirm",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/dto/create",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users/dto/login",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/dto/new",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/entities/provider.enum",{"_index":671,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"entities/User.html":{}}}],["users/entities/user.entity",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"injectables/CommentService.html":{},"classes/CreateRatingDto.html":{},"injectables/LocalAuthStrategy.html":{},"entities/Product.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"injectables/RatingService.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users/users.controller",{"_index":1345,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["userscontroller",{"_index":1326,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":1347,"title":{},"body":{"modules/UsersModule.html":{}}}],["usersignup",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["usersignup(@body",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["usersignup(createuserdto",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["usersmodule",{"_index":88,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["usersservice",{"_index":345,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["user})@apibody({type",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["v2",{"_index":829,"title":{},"body":{"injectables/NaverAuthStrategy.html":{},"dependencies.html":{}}}],["validate",{"_index":726,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["validate(_accesstoken",{"_index":728,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["validate(accesstoken",{"_index":802,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["validate(email",{"_index":817,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["validate(payload",{"_index":789,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["validatepassword(apassword",{"_index":1322,"title":{},"body":{"entities/User.html":{}}}],["validationschema",{"_index":16,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["validator",{"_index":491,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"dependencies.html":{}}}],["value",{"_index":459,"title":{},"body":{"classes/BaseAPIDocument.html":{},"classes/PageOptionsDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1401,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1486,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verificationemail",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["verificationemail(generatenumber",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["verificationtokenpayloadinterface",{"_index":383,"title":{"interfaces/VerificationTokenPayloadInterface.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{}}}],["verify",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifycallback",{"_index":731,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["version",{"_index":1478,"title":{},"body":{"properties.html":{}}}],["vertical",{"_index":1533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["visibility",{"_index":1625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["want",{"_index":1655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webkit",{"_index":1515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["weight",{"_index":1579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["welcome",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["where('comment.id",{"_index":570,"title":{},"body":{"injectables/CommentService.html":{}}}],["where('product.id",{"_index":1094,"title":{},"body":{"injectables/ProductService.html":{}}}],["where('user.id",{"_index":1370,"title":{},"body":{"injectables/UsersService.html":{}}}],["width",{"_index":1506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["window.close",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["window.localstorage.setitem('token",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["window.localstorage.setitem('user",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["window.opener.postmessage('logincomplete",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["works",{"_index":1669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["world",{"_index":110,"title":{},"body":{"injectables/AppService.html":{}}}],["wrapper",{"_index":1563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x",{"_index":1301,"title":{},"body":{"entities/User.html":{}}}],["yes",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"injectables/UsersService.html":{}}}],["z\\d$@$!%*#?&]{8",{"_index":498,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["z\\d$@$!%*#?&]{8,}$/)@isstring",{"_index":484,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/NewPasswordDto.html":{}}}],["z])(?=.*\\d)(?=.*[$@$!%*#?&])[a",{"_index":483,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["za",{"_index":482,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["zoom",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppConfigModule.html":{"url":"modules/AppConfigModule.html","title":"module - AppConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    AppConfigModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/config/config.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport * as Joi from '@hapi/joi';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      //환경변수 타입 체크\n      validationSchema: Joi.object({\n        POSTGRES_HOST: Joi.string().required(),\n        POSTGRES_PORT: Joi.number().required(),\n        POSTGRES_USERNAME: Joi.string().required(),\n        POSTGRES_PASSWORD: Joi.string().required(),\n        POSTGRES_DB: Joi.string().required(),\n\n        ACCESSTOKEN_SECRET_KEY: Joi.string().required(),\n        ACCESSTOKEN_EXPIRATION_TIME: Joi.number().required(),\n\n        EMAIL_SERVICE: Joi.string().required(),\n        EMAIL_USER: Joi.string().required(),\n        EMAIL_PASSWORD: Joi.string().required(),\n\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n        REDIS_USER: Joi.string().required(),\n        REDIS_PASSWORD: Joi.string().required(),\n        REDIS_TTL: Joi.number().required(),\n\n        GOOGLE_AUTH_CLIENTID: Joi.string().required(),\n        GOOGLE_AUTH_CLIENTSECRET: Joi.string().required(),\n        GOOGLE_AUTH_CALLBACK_URL: Joi.string().required(),\n\n        KAKAO_AUTH_CLIENTID: Joi.string().required(),\n        KAKAO_AUTH_CALLBACK_URL: Joi.string().required(),\n\n        NAVER_AUTH_CLIENTID: Joi.string().required(),\n        NAVER_AUTH_CLIENTSECRET: Joi.string().required(),\n        NAVAER_AUTH_CALLBACK_URL: Joi.string().required(),\n\n        JWT_CHAGNE_PASSWORD_SECRET: Joi.string().required(),\n        JWT_CHAGNE_PASSWORD_EXPIRESIN: Joi.string().required(),\n        PASSWORD_CHANGE_URL: Joi.string().required(),\n      }),\n    }),\n  ], //env파일을 인식해줌\n})\nexport class AppConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from '@root/app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAppConfigModule\n\nAppConfigModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommentModule\n\nCommentModule\n\nAppModule -->\n\nCommentModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nOrderModule\n\nOrderModule\n\nAppModule -->\n\nOrderModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nRatingModule\n\nRatingModule\n\nAppModule -->\n\nRatingModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nReservationModule\n\nReservationModule\n\nAppModule -->\n\nReservationModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppConfigModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            CommentModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EmailModule\n                        \n                        \n                            OrderModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            RatingModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            ReservationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { AppController } from '@root/app.controller';\nimport { AppService } from '@root/app.service';\nimport { AuthModule } from '@auth/auth.module';\nimport { ProductModule } from '@product/product.module';\nimport { OrderModule } from '@order/order.module';\nimport { DatabaseModule } from '@database/database.module';\nimport { UsersModule } from '@users/users.module';\nimport { EmailModule } from '@email/email.module';\nimport { ReservationModule } from '@reservation/reservation.module';\nimport { RatingModule } from '@rating/rating.module';\nimport { RedisModule } from '@redis/redis.module';\nimport { CommentModule } from '@comment/comment.module';\nimport { AppConfigModule } from '@common/config/config.module';\n\n@Module({\n  imports: [\n    AppConfigModule,\n    ProductModule,\n    OrderModule,\n    DatabaseModule,\n    UsersModule,\n    AuthModule,\n    EmailModule,\n    RedisModule,\n    CommentModule,\n    ReservationModule,\n    RatingModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                changePassword\n                            \n                            \n                                    \n                                    Async\n                                confirmEmail\n                            \n                            \n                                    \n                                    \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getUserInfoByToken\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                googleLogin\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                googleLoginCallBack\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                kakaoLogin\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                kakaoLoginCallBack\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                naverLogin\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                naverLoginCallBack\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                sendEmail\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                userLogin\n                            \n                            \n                                    \n                                    \n                                    Async\n                                userSignup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(changePasswordDto: ChangePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('change/password')@ApiOperation({summary: '비밀번호 바꾸기', description: '비밀번호 수정'})@ApiBody({type: ChangePasswordDto})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                changePasswordDto\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    confirmEmail(confirmEmailDto: ConfirmEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('confirm/email')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                confirmEmailDto\n                                            \n                                                            ConfirmEmailDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('forgot/password')@ApiOperation({summary: '비밀번호 재설정을위한 메일전송', description: '재설정해줌'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getUserInfoByToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserInfoByToken(id: string, reservationQuery?: Reservation)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiBearerAuth('access-token')@HttpCode(200)@ApiOperation({summary: '프로필 정보', description: '프로필 정보'})@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                reservationQuery\n                                            \n                                                            Reservation\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        googleLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Get('google')@UseGuards(GoogleAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:129\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        googleLoginCallBack\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleLoginCallBack(req: RequestWithUserInterface, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Get('google/callback')@UseGuards(GoogleAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        kakaoLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    kakaoLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Get('kakao')@UseGuards(KakaoAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:161\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        kakaoLoginCallBack\n                        \n                    \n                \n            \n            \n                \n                        \n                    kakaoLoginCallBack(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Get('kakao/callback')@UseGuards(KakaoAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:168\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        naverLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    naverLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Get('naver')@UseGuards(NaverAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:178\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        naverLoginCallBack\n                        \n                    \n                \n            \n            \n                \n                        \n                    naverLoginCallBack(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Get('naver/callback')@UseGuards(NaverAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:184\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        newPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    newPassword(newPasswordDto: NewPasswordDto, req: RequestWithUserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('newpassword')@ApiOperation({summary: '비밀번호 바꾸기', description: '비밀번호 수정'})@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newPasswordDto\n                                            \n                                                            NewPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            RequestWithUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('send/email')@ApiResponse({description: 'email send verify'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        userLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    userLogin(req: RequestWithUserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@ApiOperation({summary: '로그인API', description: '로그인해주는 api'})@ApiCreatedResponse({description: '로그인함', type: User})@ApiBody({type: LoginUserDto})@HttpCode(200)@UseGuards(LocalAuthGuard)@ApiResponse({description: 'login success'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        userSignup\n                        \n                    \n                \n            \n            \n                \n                        \n                    userSignup(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')@ApiCreatedResponse({description: 'the record has been success with user', type: User})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  HttpCode,\n  UseGuards,\n  Req,\n  Get,\n  HttpStatus,\n  Res,\n  Request, Query, Param\n} from '@nestjs/common';\n\nimport {\n  ApiBody,\n  ApiCreatedResponse,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { User } from '../users/entities/user.entity';\nimport { AuthService } from '@auth/auth.service';\nimport { CreateUserDto } from '@users/dto/create-user.dto';\nimport { ConfirmEmailDto } from '@users/dto/confirm-email.dto';\nimport { LoginUserDto } from '@users/dto/login-user.dto';\nimport { LocalAuthGuard } from '@auth/guards/local-auth.guard';\nimport { RequestWithUserInterface } from '@auth/interfaces/requestWithUser.interface';\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard';\nimport { ChangePasswordDto } from '@users/dto/change-password.dto';\nimport { GoogleAuthGuard } from '@auth/guards/google-auth.guard';\nimport { KakaoAuthGuard } from '@auth/guards/kakao-auth.guard';\nimport { NaverAuthGuard } from '@auth/guards/naver-auth.guard';\nimport { Response } from 'express';\nimport {NewPasswordDto} from \"@users/dto/new-password.dto\";\nimport {Reservation} from \"@reservation/entities/reservation.entity\";\nimport {Product} from \"@product/entities/product.entity\";\n\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n  //회원가입\n  @Post('signup')\n  @ApiCreatedResponse({\n    description: 'the record has been success with user',\n    type: User,\n  }) //성공시 응답을 해주겠다.\n  async userSignup(@Body() createUserDto: CreateUserDto) {\n    return await this.authService.createUser(createUserDto);\n  }\n\n  @Post('send/email')\n  @ApiResponse({\n    description: 'email send verify',\n  })\n  async sendEmail(@Body('email') email: string) {\n    return await this.authService.sendEmail(email);\n  }\n\n  @Post('confirm/email')\n  async confirmEmail(@Body() confirmEmailDto: ConfirmEmailDto) {\n    return await this.authService.confirmEmail(confirmEmailDto);\n  }\n  //로그인 이메일, 비밀번호맞는지 이메일먼저찾기,\n  @Post('login')\n  @ApiOperation({ summary: '로그인API', description: '로그인해주는 api' })\n  @ApiCreatedResponse({ description: '로그인함', type: User })\n  @ApiBody({ type: LoginUserDto })\n  @HttpCode(200)\n  @UseGuards(LocalAuthGuard) //Guard에서 검증됨\n  @ApiResponse({\n    description: 'login success',\n  })\n  async userLogin(@Req() req: RequestWithUserInterface) {\n    const user = req.user;\n    const token = await this.authService.generateAccessToken(user.id);\n    return { token, user };\n    // return await this.authService.Login(loginUserDto);\n  }\n\n  @Get(':id')\n  @ApiBearerAuth('access-token')\n  @HttpCode(200)\n  @ApiOperation({ summary: '프로필 정보', description: '프로필 정보' })\n  @UseGuards(JwtAuthGuard)\n  async getUserInfoByToken(@Param('id') id: string, @Query('reservation') reservationQuery?: Reservation){\n    // const { user } = req;\n    // user.password = undefined;\n    const data = await this.authService.profile( id, reservationQuery); // user를 profile 메서드에 전달\n    // console.log(\"dsdad\",reservationQuery)\n    return { data };\n  }\n\n\n  @Post('forgot/password') //비밀번호 재설정위한 메일전송\n  @ApiOperation({\n    summary: '비밀번호 재설정을위한 메일전송',\n    description: '재설정해줌',\n  })\n  async forgotPassword(@Body('email') email: string) {\n    return await this.authService.forgotPassword(email);\n  }\n\n  @Post('change/password') //비밀번호 바꾸기\n  @ApiOperation({ summary: '비밀번호 바꾸기', description: '비밀번호 수정' })\n  @ApiBody({ type: ChangePasswordDto })\n  async changePassword(@Body() changePasswordDto: ChangePasswordDto) {\n    return await this.authService.changePassword(changePasswordDto);\n  }\n\n  @Post('newpassword')\n  @ApiOperation({ summary: '비밀번호 바꾸기', description: '비밀번호 수정' })\n  @UseGuards(JwtAuthGuard)\n  async newPassword(@Body() newPasswordDto: NewPasswordDto,   @Req() req: RequestWithUserInterface,) {\n    const newPassword = newPasswordDto.newPassword;\n    const user = req.user.email;\n    const updatedUser = await this.authService.changePasswordWithToken(user, newPassword);\n    return updatedUser\n\n  }\n\n\n\n  //구글에 접속하는 코드(로그인요청 코드)\n  @HttpCode(200)\n  @Get('google')\n  @UseGuards(GoogleAuthGuard)\n  async googleLogin(): Promise {\n    return HttpStatus.OK;\n  }\n\n  //요청을 받고 구글에서 던져주는 정보를 아래 api에 받겠다.\n  @HttpCode(200)\n  @Get('google/callback')\n  @UseGuards(GoogleAuthGuard)\n  async googleLoginCallBack(\n    @Req() req: RequestWithUserInterface,\n    @Res() res: Response,\n  ): Promise {\n    //token 생성\n    const { user } = req;\n    const token = await this.authService.generateAccessToken(user.id);\n    console.log('adadsdad', token);\n    const mainPageUrl = 'http://localhost:3000';\n\n    const script = `\n      \n        window.opener.postMessage('loginComplete', '${mainPageUrl}');\n        window.localStorage.setItem('user', '${JSON.stringify(user)}');\n        window.localStorage.setItem('token', '${token}');\n        window.close();\n      \n    `;\n    res.send(script);\n  }\n\n  @HttpCode(200)\n  @Get('kakao')\n  @UseGuards(KakaoAuthGuard)\n  async kakaoLogin(): Promise {\n    return HttpStatus.OK;\n  }\n\n  @HttpCode(200)\n  @Get('kakao/callback')\n  @UseGuards(KakaoAuthGuard)\n  async kakaoLoginCallBack(@Req() req: any): Promise {\n    const { user } = req;\n    const token = await this.authService.generateAccessToken(user.id);\n    return { token, user };\n  }\n\n  //naver\n  @HttpCode(200)\n  @Get('naver')\n  @UseGuards(NaverAuthGuard)\n  async naverLogin(): Promise {\n    return HttpStatus.OK;\n  }\n  @HttpCode(200)\n  @Get('naver/callback')\n  @UseGuards(NaverAuthGuard)\n  async naverLoginCallBack(@Req() req: any): Promise {\n    const { user } = req;\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nEmailModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleAuthStrategy\n\nGoogleAuthStrategy\n\nAuthModule -->\n\nGoogleAuthStrategy->AuthModule\n\n\n\n\n\nJwtAuthStrategy\n\nJwtAuthStrategy\n\nAuthModule -->\n\nJwtAuthStrategy->AuthModule\n\n\n\n\n\nKakaoAuthStrategy\n\nKakaoAuthStrategy\n\nAuthModule -->\n\nKakaoAuthStrategy->AuthModule\n\n\n\n\n\nLocalAuthStrategy\n\nLocalAuthStrategy\n\nAuthModule -->\n\nLocalAuthStrategy->AuthModule\n\n\n\n\n\nNaverAuthStrategy\n\nNaverAuthStrategy\n\nAuthModule -->\n\nNaverAuthStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GoogleAuthStrategy\n                        \n                        \n                            JwtAuthStrategy\n                        \n                        \n                            KakaoAuthStrategy\n                        \n                        \n                            LocalAuthStrategy\n                        \n                        \n                            NaverAuthStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from '@users/users.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { EmailModule } from '@email/email.module';\nimport { AuthController } from '@auth/auth.controller';\nimport { AuthService } from '@auth/auth.service';\nimport { LocalAuthStrategy } from '@auth/strategies/local-auth.strategy';\nimport { JwtAuthStrategy } from '@auth/strategies/jwt-auth.strategy';\nimport { GoogleAuthStrategy } from '@auth/strategies/google-auth.strategy';\nimport { KakaoAuthStrategy } from '@auth/strategies/kakao-auth.strategy';\nimport { NaverAuthStrategy } from '@auth/strategies/naver-auth.strategy';\n\n@Module({\n  imports: [\n    UsersModule,\n    ConfigModule,\n    JwtModule.register({}),\n    PassportModule,\n    EmailModule,\n  ], //service형태로 내보냄\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    LocalAuthStrategy,\n    JwtAuthStrategy,\n    GoogleAuthStrategy,\n    KakaoAuthStrategy,\n    NaverAuthStrategy,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                changePasswordWithToken\n                            \n                            \n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                decodedConfirmationToken\n                            \n                            \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    Public\n                                generateAccessToken\n                            \n                            \n                                generateOTP\n                            \n                            \n                                    Async\n                                Login\n                            \n                            \n                                    Async\n                                newPassword\n                            \n                            \n                                    Async\n                                profile\n                            \n                            \n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService, emailService: EmailService, cacheManger: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManger\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(changePasswordDto: ChangePasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                changePasswordDto\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePasswordWithToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePasswordWithToken(userId: string, newPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    confirmEmail(confirmEmailDto: ConfirmEmailDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                confirmEmailDto\n                                            \n                                                            ConfirmEmailDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        decodedConfirmationToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    decodedConfirmationToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAccessToken(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateOTP\n                        \n                    \n                \n            \n            \n                \ngenerateOTP()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:157\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        Login\n                        \n                    \n                \n            \n            \n                \n                        \n                    Login(loginUserDto: LoginUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginUserDto\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        newPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    newPassword(newPasswordDto: NewPasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newPasswordDto\n                                            \n                                                            NewPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                        \n                    profile(id: string, reservation?: Reservation)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:127\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                reservation\n                                            \n                                                            Reservation\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { CACHE_MANAGER } from '@nestjs/common/cache';\nimport { Cache } from 'cache-manager'; //확인잘하기\nimport { UsersService } from '@users/users.service';\nimport { EmailService } from '@email/email.service';\nimport { CreateUserDto } from '@users/dto/create-user.dto';\nimport { LoginUserDto } from '@users/dto/login-user.dto';\nimport { TokenPayloadInterface } from '@auth/interfaces/tokenPayload.interface';\nimport { verificationEmail } from '@common/template/verificationEmail';\nimport { ConfirmEmailDto } from '@users/dto/confirm-email.dto';\nimport { VerificationTokenPayloadInterface } from '@auth/interfaces/verificationTokenPayload.interface';\nimport { ChangePasswordDto } from '@users/dto/change-password.dto';\nimport {NewPasswordDto} from \"@users/dto/new-password.dto\";\nimport {User} from \"@users/entities/user.entity\";\nimport {Reservation} from \"@reservation/entities/reservation.entity\";\nimport {Product} from \"@product/entities/product.entity\";\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly emailService: EmailService,\n    @Inject(CACHE_MANAGER) private cacheManger: Cache, //redis db불러옴\n  ) {}\n\n  //회원가입 로직\n  async createUser(createUserDto: CreateUserDto) {\n    const user = await this.usersService.CreateUser(createUserDto);\n    user.password = undefined; //패스워드를 가려줌\n    await this.emailService.sendMail({\n      to: createUserDto.email,\n      subject: 'Welcome to koreanmarket',\n      text: 'welcome',\n      // html: sendEmail(createUserDto.name),\n    });\n    return user;\n  }\n\n  async Login(loginUserDto: LoginUserDto) {\n    const user = await this.usersService.getUserByEmail(loginUserDto.email);\n    const isPasswordMatched = await user.validatePassword(\n      loginUserDto.password,\n    ); //성공여부\n\n    if (!isPasswordMatched) {\n      throw new HttpException(\n        'Password do not matched',\n        HttpStatus.BAD_REQUEST,\n      );\n    } //email에서 입력한 패스워드랑 우리가 찾는 패스워드가 같지 않으면\n    user.password = undefined;\n    return user;\n  }\n\n  //access토큰 생성함수\n  public generateAccessToken(userId: string) {\n    const payload: TokenPayloadInterface = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('ACCESSTOKEN_SECRET_KEY'),\n      expiresIn: `${this.configService.get('ACCESSTOKEN_EXPIRATION_TIME')}m`,\n    });\n    return token;\n  }\n\n\n  async sendEmail(email: string) {\n    const generateNumber = this.generateOTP();\n    await this.cacheManger.set(email, generateNumber);\n    await this.emailService.sendMail({\n      to: email,\n      subject: '이메일확인',\n      // html: `이메일 확인용 메일입니다. 아래 번호를 인증해주세요 ${generateNumber}`,\n      html: verificationEmail(generateNumber),\n    });\n    return 'success';\n  }\n\n  async confirmEmail(confirmEmailDto: ConfirmEmailDto) {\n    const emailCodeByRedis = await this.cacheManger.get(confirmEmailDto.email);\n    if (emailCodeByRedis !== confirmEmailDto.code) {\n      throw new BadRequestException('Wrong code provided');\n    }\n    await this.cacheManger.del(confirmEmailDto.email);\n    return true;\n  }\n  async forgotPassword(email: string) {\n    const payload: VerificationTokenPayloadInterface = { email };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_CHAGNE_PASSWORD_SECRET'),\n      expiresIn: this.configService.get('JWT_CHAGNE_PASSWORD_EXPIRESIN'), //10분동안 유효한 token\n    });\n    const url = `${this.configService.get(\n      'PASSWORD_CHANGE_URL',\n    )}?token=${token}`;\n    await this.emailService.sendMail({\n      to: email,\n      subject: 'forgot password - koreamarket',\n      html: `\n        패스워드 변경하려면 아래 버튼을 눌러주세요 \n        ${url}\n        `,\n    });\n    return true;\n  }\n  async changePassword(changePasswordDto: ChangePasswordDto) {\n    const email = await this.decodedConfirmationToken(changePasswordDto.token);\n    return await this.usersService.changePassword(\n      email,\n      changePasswordDto.newPassword,\n    ); //패스워드바꾸기 함수 먼저만들고하기\n  }\n\n  async newPassword(newPasswordDto: NewPasswordDto) {\n\n  }\n\n  async profile( id: string, reservation?: Reservation) {\n    const queryBuilder = await this.usersService.userGetAll( id, reservation); // user를 userGetAll 메서드에 전달\n    return queryBuilder;\n  }\n\n\n  //토큰 푸는 함수\n  public async decodedConfirmationToken(token: string) {\n    try {\n      const payload = await this.jwtService.verify(token, {\n        secret: this.configService.get('JWT_CHAGNE_PASSWORD_SECRET'),\n      });\n      return payload.email;\n    } catch (err) {\n      if (err?.name === 'TokenExpiredError') {\n        throw new BadRequestException('token expired error');\n      } else {\n        throw new BadRequestException('token error');\n      }\n    }\n  }\n\n  //토큰 비밀번호\n  async changePasswordWithToken(userId: string, newPassword: string) {\n    const updatedUser = await this.usersService.changePassword(userId, newPassword)\n    return updatedUser;\n\n  }\n\n  //랜덤함수\n  generateOTP() {\n    let OTP = '';\n    for (let i = 1; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseAPIDocument.html":{"url":"classes/BaseAPIDocument.html","title":"class - BaseAPIDocument","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseAPIDocument\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/config/swagger.document.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                builder\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                initializeOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        builder\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DocumentBuilder()\n                    \n                \n                    \n                        \n                                Defined in src/common/config/swagger.document.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initializeOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/config/swagger.document.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DocumentBuilder } from '@nestjs/swagger';\n\nexport class BaseAPIDocument {\n  public builder = new DocumentBuilder();\n\n  public initializeOptions() {\n    return this.builder\n      .setTitle('KoreanmarketAPI') //명칭\n      .setDescription('public koreamarketAPI') //설명\n      .setVersion('1.0') //버전 (업데이트도가능 초기값 1.0)\n      .addBearerAuth(\n        { type: 'http', scheme: 'bearer', name: 'JWT', in: 'header' },\n        'access-token',\n      )\n      .setBasePath('api') //기본 베이스 url\n      .build();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert password', default: 'a1234567!'})@MinLength(7)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$/)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/change-password.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert token', default: ' '})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/change-password.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, isString, Matches, MinLength } from 'class-validator';\n\nexport class ChangePasswordDto {\n  @ApiProperty({\n    description: 'insert token',\n    default: ' ',\n  })\n  @IsString()\n  token: string;\n\n  @ApiProperty({\n    description: 'insert password',\n    default: 'a1234567!',\n  }) //swag적용\n  @MinLength(7) //최소 7자리\n  //최소 8 자, 최소 하나의 문자, 하나의 숫자 및 하나의 특수 문자 :\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$/)\n  @IsString()\n  newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Comment.html":{"url":"entities/Comment.html","title":"entity - Comment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comment/entities/comment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                desc\n                            \n                            \n                                    \n                                    \n                                    Public\n                                product\n                            \n                            \n                                    \n                                    \n                                    Public\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comment/entities/comment.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, product => product.comments)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comment/entities/comment.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.comments)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comment/entities/comment.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { CommonEntity } from '@common/entities/common.entity';\nimport { User } from '@users/entities/user.entity';\nimport { Product } from '@product/entities/product.entity';\n\n@Entity()\nexport class Comment extends CommonEntity {\n  //누가 적을건지, 어디에 적을건지(대상자) 어떤 게시물, 어떤내용을 할것인지\n  @Column()\n  public desc: string; //내용\n\n  @ManyToOne(() => User, (user: User) => user.comments) //누가 적을건지\n  @JoinColumn()\n  public user: User;\n\n  @ManyToOne(() => Product, (product: Product) => product.comments)\n  @JoinColumn()\n  public product: Product; //대상자 어디에 댓글을 달건지.\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentController.html":{"url":"controllers/CommentController.html","title":"controller - CommentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comment/comment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                comment\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createComment\n                            \n                            \n                                    \n                                    Async\n                                getCommentById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createComment(req: RequestWithUserInterface, createCommentDto: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')@ApiBody({type: CreateCommentDto})@ApiOperation({summary: '댓글등록', description: '댓글 등록해주는 api'})@ApiResponse({description: 'create comment'})@ApiBearerAuth('access-token')@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/comment/comment.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createCommentDto\n                                            \n                                                            CreateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getCommentById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCommentById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/comment/comment.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UseGuards,\n  Req,\n  Body,\n  Get,\n  Param,\n} from '@nestjs/common';\n\nimport {\n  ApiBearerAuth,\n  ApiBody,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { CommentService } from '@comment/comment.service';\nimport { CreateCommentDto } from '@comment/dto/create-comment.dto';\nimport { RequestWithUserInterface } from '@auth/interfaces/requestWithUser.interface';\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard';\n\n@ApiTags('Comment')\n@Controller('comment')\nexport class CommentController {\n  constructor(private readonly commentService: CommentService) {}\n\n  @Post('create')\n  @ApiBody({ type: CreateCommentDto })\n  @ApiOperation({ summary: '댓글등록', description: '댓글 등록해주는 api' })\n  @ApiResponse({\n    description: 'create comment',\n  })\n  @ApiBearerAuth('access-token')\n  @UseGuards(JwtAuthGuard)\n  async createComment(\n    @Req() req: RequestWithUserInterface,\n    @Body() createCommentDto: CreateCommentDto,\n  ) {\n    return await this.commentService.createComment(createCommentDto, req.user);\n  }\n\n  @Get(':id')\n  async getCommentById(@Param('id') id: string) {\n    const comment = await this.commentService.commentGeyById(id);\n    return comment;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentModule.html":{"url":"modules/CommentModule.html","title":"module - CommentModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommentModule\n\n\n\ncluster_CommentModule_providers\n\n\n\n\nCommentService\n\nCommentService\n\n\n\nCommentModule\n\nCommentModule\n\nCommentModule -->\n\nCommentService->CommentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/comment/comment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CommentController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CommentController } from '@comment/comment.controller';\nimport { CommentService } from '@comment/comment.service';\nimport { Comment } from '@comment/entities/comment.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Comment])],\n  controllers: [CommentController],\n  providers: [CommentService],\n})\nexport class CommentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentService.html":{"url":"injectables/CommentService.html","title":"injectable - CommentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comment/comment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                commentGeyById\n                            \n                            \n                                    Async\n                                createComment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/comment/comment.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        commentGeyById\n                        \n                    \n                \n            \n            \n                \n                        \n                    commentGeyById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/comment/comment.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createComment(createCommentDto: CreateCommentDto, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/comment/comment.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCommentDto\n                                            \n                                                            CreateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateCommentDto } from '@comment/dto/create-comment.dto';\nimport { User } from '@users/entities/user.entity';\nimport { Comment } from '@comment/entities/comment.entity';\n\n@Injectable()\nexport class CommentService {\n  constructor(\n    @InjectRepository(Comment)\n    private commentRepository: Repository,\n  ) {}\n\n  async createComment(createCommentDto: CreateCommentDto, user: User) {\n    const newComment = await this.commentRepository.create({\n      ...createCommentDto,\n      user,\n    });\n    await this.commentRepository.save(newComment);\n    return newComment;\n  }\n\n  async commentGeyById(id: string) {\n    const comment = await this.commentRepository\n      .createQueryBuilder('comment')\n      .leftJoinAndSelect('comment.user', 'user')\n      .where('comment.id = :id', { id })\n      .getOne();\n\n    if (!comment) {\n      throw new HttpException('No id', HttpStatus.NOT_FOUND);\n    }\n\n    return comment;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommonEntity.html":{"url":"classes/CommonEntity.html","title":"class - CommonEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommonEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entities/common.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createdAt\n                            \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/common.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/common.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/common.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CreateDateColumn,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport abstract class CommonEntity {\n  @PrimaryGeneratedColumn('uuid')\n  public id: string;\n\n  @CreateDateColumn()\n  public createdAt: Date;\n\n  @UpdateDateColumn()\n  public updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmEmailDto.html":{"url":"classes/ConfirmEmailDto.html","title":"class - ConfirmEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/confirm-email.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/confirm-email.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/confirm-email.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ConfirmEmailDto {\n  email: string;\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAuthDto.html":{"url":"classes/CreateAuthDto.html","title":"class - CreateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-auth.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateAuthDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comment/dto/create-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                desc\n                            \n                            \n                                    \n                                    \n                                product\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert desc', default: 'Comment'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comment/dto/create-comment.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert productid', default: 'productId'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comment/dto/create-comment.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString } from 'class-validator';\nimport { Product } from '@product/entities/product.entity';\n\nexport class CreateCommentDto {\n  @ApiProperty({\n    description: 'insert desc',\n    default: 'Comment',\n  })\n  @IsString()\n  desc: string;\n\n  @ApiProperty({\n    description: 'insert productid',\n    default: 'productId',\n  })\n  @IsString()\n  product: Product;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOrderDto.html":{"url":"classes/CreateOrderDto.html","title":"class - CreateOrderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOrderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/dto/create-order.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateOrderDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/dto/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                brand\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                desc\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                productImg\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                region\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        brand\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert brand', default: 'productbrand'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert category', default: undefined, required: false})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert desc', default: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert productname', default: 'productname'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert price', default: 1})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        productImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert productImg', default: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        region\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert region', default: 'productname'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:49\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsArray, IsNotEmpty, IsNumber, IsString } from 'class-validator';\n\nexport class CreateProductDto {\n  @ApiProperty({\n    description: 'insert productname',\n    default: 'productname',\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string; //필수값아닐때는 ?을 붙여줌 ex) ?:\n\n  @ApiProperty({\n    // type: String,\n    description: 'insert desc',\n    default: ['desc'],\n  })\n  @IsArray()\n  desc?: string[];\n\n  @ApiProperty({\n    description: 'insert price',\n    default: 1,\n  })\n  @IsNumber()\n  price: number;\n\n  @ApiProperty({\n    // type: String,\n    description: 'insert productImg',\n    default: ['String'],\n  })\n  @IsArray()\n  productImg?: string[];\n\n  @ApiProperty({\n    description: 'insert category',\n    default: ['String'],\n    required: false,\n  })\n  @IsArray()\n  category?: string[];\n\n  @ApiProperty({\n    description: 'insert region',\n    default: 'productname',\n  })\n  @IsString()\n  region?: string;\n\n  @ApiProperty({\n    description: 'insert brand',\n    default: 'productbrand',\n  })\n  @IsString()\n  @IsNotEmpty()\n  brand: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRatingDto.html":{"url":"classes/CreateRatingDto.html","title":"class - CreateRatingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRatingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rating/dto/create-rating.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                buyer\n                            \n                            \n                                rating\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        buyer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/rating/dto/create-rating.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/rating/dto/create-rating.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '@users/entities/user.entity';\n\nexport class CreateRatingDto {\n  rating: number;\n  buyer: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateReservationDto.html":{"url":"classes/CreateReservationDto.html","title":"class - CreateReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservation/dto/create-reservation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                desc\n                            \n                            \n                                    \n                                    \n                                location\n                            \n                            \n                                    \n                                    \n                                product\n                            \n                            \n                                    \n                                    \n                                purchase\n                            \n                            \n                                    \n                                reservationDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert desc', default: 'Comment'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/dto/create-reservation.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert location', default: '뉴욕'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/dto/create-reservation.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert productid', default: 'productId'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/dto/create-reservation.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        purchase\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert purchase', default: true})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/dto/create-reservation.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert reservation date', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/dto/create-reservation.dto.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean, IsString } from 'class-validator';\nimport { Product } from '@product/entities/product.entity';\n\nexport class CreateReservationDto {\n  @ApiProperty({\n    description: 'insert location',\n    default: '뉴욕',\n  })\n  @IsString()\n  location: string;\n\n  @ApiProperty({\n    description: 'insert desc',\n    default: 'Comment',\n  })\n  @IsString()\n  desc: string;\n\n  @ApiProperty({\n    description: 'insert purchase',\n    default: true,\n  })\n  @IsBoolean()\n  purchase: boolean;\n\n  @ApiProperty({\n    description: 'insert productid',\n    default: 'productId',\n  })\n  @IsString()\n  product: Product;\n\n  @ApiProperty({\n    description: 'insert reservation date',\n    default: new Date()\n  })\n  reservationDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                profileImg\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                provider\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert email', default: 'abcd@google.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert username', default: 'username'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert password', default: 'a1234567!'})@IsString()@MinLength(7)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        profileImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Provider\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert provider', default: 'local'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  MinLength,\n  Matches,\n  IsOptional,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Provider } from '@users/entities/provider.enum';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: 'insert username',\n    default: 'username',\n  }) //swag적용\n  @IsString() //string아니면 에러\n  @IsNotEmpty()\n  name: string;\n\n  @ApiProperty({\n    description: 'insert email',\n    default: 'abcd@google.com',\n  }) //swag적용\n  @IsEmail() //email 아니면 에러\n  email: string;\n\n  @ApiProperty({\n    description: 'insert password',\n    default: 'a1234567!',\n  }) //swag적용\n  @IsString()\n  @MinLength(7) //최소 7자리\n  //최소 8 자, 최소 하나의 문자, 하나의 숫자 및 하나의 특수 문자 :\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$/)\n  password?: string;\n\n  @ApiProperty({\n    description: 'insert provider',\n    default: 'local',\n  }) //swag적용\n  @IsString()\n  @IsNotEmpty()\n  provider?: Provider;\n\n  @ApiProperty() //swag적용\n  @IsOptional() //넣든 안넣든 상관없음 null값 허용\n  profileImg?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport * as process from 'process';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      //환경변수 불러오는 방법\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (cfg: ConfigService) => ({\n        type: 'postgres',\n        host: cfg.get('POSTGRES_HOST'),\n        port: cfg.get('POSTGRES_PORT'),\n        username: cfg.get('POSTGRES_USERNAME'),\n        password: cfg.get('POSTGRES_PASSWORD'),\n        database: cfg.get('POSTGRES_DB'),\n        entities: [__dirname + '/../**/*.entity{.ts,.js}'], //entity기반으로 모델기반\n        autoLoadEntities: true,\n        synchronize: true,\n      }),\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { EmailService } from '@email/email.service';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [EmailService],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: Mail.Options)\n                \n            \n\n\n                    \n                        \n                            Defined in src/email/email.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        Mail.Options\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport Mail from 'nodemailer/lib/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { createTransport } from 'nodemailer';\n\n@Injectable()\nexport class EmailService {\n  private nodemailerTransport: Mail;\n  constructor(private readonly configService: ConfigService) {\n    this.nodemailerTransport = createTransport({\n      service: configService.get('EMAIL_SERVICE'),\n      auth: {\n        user: configService.get('EMAIL_USER'),\n        pass: configService.get('EMAIL_PASSWORD'),\n      },\n    });\n  }\n\n  sendMail(options: Mail.Options) {\n    //보내는사람 받는ㅅㅏ람 타이틀이 다들어감 option에\n    return this.nodemailerTransport.sendMail(options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthGuard.html":{"url":"injectables/GoogleAuthGuard.html","title":"injectable - GoogleAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/google-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.GOOGLE)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@users/entities/provider.enum';\n\n@Injectable()\nexport class GoogleAuthGuard extends AuthGuard(Provider.GOOGLE) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthStrategy.html":{"url":"injectables/GoogleAuthStrategy.html","title":"injectable - GoogleAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/google-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(\n  Strategy,\n  Provider.GOOGLE,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/google-auth.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(_accessToken: string, _refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/google-auth.strategy.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                _refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                        VerifyCallback\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth2'; //확인 잘하기\nimport { ConfigService } from '@nestjs/config';\nimport { Provider } from '@users/entities/provider.enum';\nimport { UsersService } from '@users/users.service';\n\n@Injectable()\nexport class GoogleAuthStrategy extends PassportStrategy(\n  Strategy,\n  Provider.GOOGLE,\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      clientID: configService.get('GOOGLE_AUTH_CLIENTID'),\n      clientSecret: configService.get('GOOGLE_AUTH_CLIENTSECRET'),\n      callbackURL: configService.get('GOOGLE_AUTH_CALLBACK_URL'),\n      scope: ['profile', 'email'],\n    });\n  }\n\n  async validate(\n    _accessToken: string,\n    _refreshToken: string,\n    profile: any,\n    done: VerifyCallback,\n  ): Promise {\n    // done(null, profile);\n    const { displayName, email, provider, picture } = profile;\n    const userInput = {\n      name: displayName,\n      email,\n      provider,\n      picture,\n    };\n    console.log(userInput);\n    try {\n      const user = await this.usersService.getUserByEmail(email);\n      //로그인 처리\n      if (user.provider !== provider) {\n        throw new HttpException(\n          `You are already subscribed to ${user.provider}`,\n          HttpStatus.CONFLICT,\n        );\n      }\n      console.log('dddddd', user);\n      done(null, user);\n    } catch (err) {\n      //이메일이 없으면 회원가입\n      if (err.status === 404) {\n        const newUser = await this.usersService.CreateUser({\n          email,\n          name: displayName,\n          provider,\n          profileImg: picture,\n        });\n        done(null, newUser);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/http-exception.filter.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: any, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    const error = exception.getResponse() as\n      | string\n      | { error: string; statusCode: number; message: string | string[] };\n\n    if (typeof error === 'string') {\n      response.status(status).json({\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        message: error,\n        data: null,\n      });\n    } else {\n      response.status(status).json({\n        statusCode: status,\n        message: error.message,\n        timestamp: new Date().toISOString(),\n        data: null,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthStrategy.html":{"url":"injectables/JwtAuthStrategy.html","title":"injectable - JwtAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt-auth.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: TokenPayloadInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt-auth.strategy.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayloadInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { UsersService } from '@users/users.service';\nimport { TokenPayloadInterface } from '@auth/interfaces/tokenPayload.interface';\n\n@Injectable()\nexport class JwtAuthStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private usersService: UsersService,\n    private configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), //토큰을 헤더이담겨줌 (bearToken)\n      secretOrKey: configService.get('ACCESSTOKEN_SECRET_KEY'), //검증키 (열쇠같은거)\n    });\n  }\n  //토큰검증해주는 함수\n  async validate(payload: TokenPayloadInterface) {\n    return this.usersService.getUserById(payload.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KakaoAuthGuard.html":{"url":"classes/KakaoAuthGuard.html","title":"class - KakaoAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KakaoAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/kakao-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.KAKAO)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@users/entities/provider.enum';\n\nexport class KakaoAuthGuard extends AuthGuard(Provider.KAKAO) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KakaoAuthStrategy.html":{"url":"injectables/KakaoAuthStrategy.html","title":"injectable - KakaoAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KakaoAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/kakao-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(\n  Strategy,\n  Provider.KAKAO,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/kakao-auth.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: any, done: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/kakao-auth.strategy.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-kakao';\nimport { ConfigService } from '@nestjs/config';\nimport { Provider } from '@users/entities/provider.enum';\nimport { UsersService } from '@users/users.service';\n\n@Injectable()\nexport class KakaoAuthStrategy extends PassportStrategy(\n  Strategy,\n  Provider.KAKAO,\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      clientID: configService.get('KAKAO_AUTH_CLIENTID'),\n      callbackURL: configService.get('KAKAO_AUTH_CALLBACK_URL'),\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: any,\n  ): Promise {\n    const { displayName, provider } = profile;\n    const { profile_image } = profile._json.properties;\n    const { email } = profile._json.kakao_account;\n    const userInput = {\n      name: displayName,\n      email,\n      provider,\n      picture: profile_image,\n    };\n    console.log(userInput);\n    try {\n      const user = await this.usersService.getUserByEmail(email);\n      if (user.provider !== provider) {\n        throw new HttpException(\n          `You are already subscribed to ${user.provider}`,\n          HttpStatus.CONFLICT,\n        );\n      }\n      done(null, user);\n    } catch (err) {\n      if (err.status === 404) {\n        const newUser = await this.usersService.CreateUser({\n          email,\n          name: displayName,\n          provider,\n          profileImg: profile_image,\n        });\n        done(null, newUser);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.LOCAL)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@users/entities/provider.enum';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard(Provider.LOCAL) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthStrategy.html":{"url":"injectables/LocalAuthStrategy.html","title":"injectable - LocalAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local-auth.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/local-auth.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '@auth/auth.service';\nimport { User } from '@users/entities/user.entity';\n\n@Injectable()\nexport class LocalAuthStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({\n      usernameField: 'email', //이메일값을 기준\n    });\n  }\n  //검증되는 함수\n  async validate(email: string, password: string): Promise {\n    return this.authService.Login({ email, password });\n  } //User로 리턴\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert email', default: 'abcd@google.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/login-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert password', default: 'a1234567@'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/login-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsString, Matches, MinLength } from 'class-validator';\n\nexport class LoginUserDto {\n  @ApiProperty({\n    description: 'insert email',\n    default: 'abcd@google.com',\n  })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    description: 'insert password',\n    default: 'a1234567@',\n  })\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NaverAuthGuard.html":{"url":"injectables/NaverAuthGuard.html","title":"injectable - NaverAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NaverAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/naver-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.NAVER)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@users/entities/provider.enum';\n\n@Injectable()\nexport class NaverAuthGuard extends AuthGuard(Provider.NAVER) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NaverAuthStrategy.html":{"url":"injectables/NaverAuthStrategy.html","title":"injectable - NaverAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NaverAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/naver-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(\n  Strategy,\n  Provider.NAVER,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/naver-auth.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: Profile, done: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/naver-auth.strategy.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                        Profile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ConfigService } from '@nestjs/config';\nimport { Profile, Strategy } from 'passport-naver-v2';\nimport { Provider } from '@users/entities/provider.enum';\nimport { UsersService } from '@users/users.service';\n\n@Injectable()\nexport class NaverAuthStrategy extends PassportStrategy(\n  Strategy,\n  Provider.NAVER,\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      clientID: configService.get('NAVER_AUTH_CLIENTID'),\n      clientSecret: configService.get('NAVER_AUTH_CLIENTSECRET'),\n      callbackURL: configService.get('NAVER_AUTH_CALLBACK_URL'),\n      scope: ['email', 'name', 'nickname'],\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: Profile,\n    done: any,\n  ): Promise {\n    done(null, profile);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NewPasswordDto.html":{"url":"classes/NewPasswordDto.html","title":"class - NewPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NewPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/new-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert password', default: 'a1234567!'})@MinLength(7)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$/)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/new-password.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {ApiProperty} from \"@nestjs/swagger\";\nimport {IsString, Matches, MinLength} from \"class-validator\";\n\nexport class NewPasswordDto {\n    @ApiProperty({\n        description: 'insert password',\n        default: 'a1234567!',\n    }) // swag적용\n    @MinLength(7) //최소 7자리\n    //최소 8 자, 최소 하나의 문자, 하나의 숫자 및 하나의 특수 문자 :\n    @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$/)\n    @IsString()\n    newPassword: string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Order.html":{"url":"classes/Order.html","title":"class - Order","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Order\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/entities/order.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Order {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OrderController.html":{"url":"controllers/OrderController.html","title":"controller - OrderController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OrderController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/order.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                order\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createOrderDto: CreateOrderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/order/order.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/order/order.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/order/order.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/order/order.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateOrderDto: UpdateOrderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/order/order.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateOrderDto\n                                            \n                                                            UpdateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { OrderService } from '@order/order.service';\nimport { CreateOrderDto } from '@order/dto/create-order.dto';\nimport { UpdateOrderDto } from '@order/dto/update-order.dto';\n\n@ApiTags('Order') //api문서화 카테고리\n@Controller('order')\nexport class OrderController {\n  constructor(private readonly orderService: OrderService) {}\n\n  @Post()\n  create(@Body() createOrderDto: CreateOrderDto) {\n    return this.orderService.create(createOrderDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.orderService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.orderService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateOrderDto: UpdateOrderDto) {\n    return this.orderService.update(+id, updateOrderDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.orderService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OrderModule.html":{"url":"modules/OrderModule.html","title":"module - OrderModule","body":"\n                   \n\n\n\n\n    Modules\n    OrderModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OrderModule\n\n\n\ncluster_OrderModule_providers\n\n\n\n\nOrderService\n\nOrderService\n\n\n\nOrderModule\n\nOrderModule\n\nOrderModule -->\n\nOrderService->OrderModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/order/order.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OrderService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OrderController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OrderController } from '@order/order.controller';\nimport { OrderService } from '@order/order.service';\n\n@Module({\n  controllers: [OrderController],\n  providers: [OrderService],\n})\nexport class OrderModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrderService.html":{"url":"injectables/OrderService.html","title":"injectable - OrderService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OrderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/order.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createOrderDto: CreateOrderDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/order.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/order.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/order.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/order.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateOrderDto: UpdateOrderDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/order.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateOrderDto\n                                            \n                                                            UpdateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateOrderDto } from '@order/dto/create-order.dto';\nimport { UpdateOrderDto } from '@order/dto/update-order.dto';\n\n@Injectable()\nexport class OrderService {\n  create(createOrderDto: CreateOrderDto) {\n    return 'This action adds a new order';\n  }\n\n  findAll() {\n    return `This action returns all order`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} order`;\n  }\n\n  update(id: number, updateOrderDto: UpdateOrderDto) {\n    return `This action updates a #${id} order`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} order`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                data\n                            \n                            \n                                    \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page.dto.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { PageMetaDto } from '@common/dtos/page-meta.dto';\n\nexport class PageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  readonly meta: any;\n\n  constructor(data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    \n                                    Readonly\n                                page\n                            \n                            \n                                    \n                                    Readonly\n                                pageCount\n                            \n                            \n                                    \n                                    Readonly\n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaDtoParametersInterface)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page-meta.dto.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaDtoParametersInterface\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { PageMetaDtoParametersInterface } from '@common/interfaces/page-meta-dto-parameters.interface';\n\nexport class PageMetaDto {\n  @ApiProperty()\n  readonly page: number;\n\n  @ApiProperty()\n  readonly take: number;\n\n  @ApiProperty()\n  readonly itemCount: number;\n\n  @ApiProperty()\n  readonly pageCount: number;\n\n  @ApiProperty()\n  readonly hasPreviousPage: boolean;\n\n  @ApiProperty()\n  readonly hasNextPage: boolean;\n\n  constructor({ pageOptionsDto, itemCount }: PageMetaDtoParametersInterface) {\n    this.page = pageOptionsDto.page;\n    this.take = pageOptionsDto.take;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.take);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaDtoParametersInterface.html":{"url":"interfaces/PageMetaDtoParametersInterface.html","title":"interface - PageMetaDtoParametersInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaDtoParametersInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/page-meta-dto-parameters.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from '@common/dtos/page-options.dto';\n\nexport interface PageMetaDtoParametersInterface {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                order\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderConstants\n\n                    \n                \n                \n                    \n                        Default value : OrderConstants.ASC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderConstants, default: undefined})@IsEnum(OrderConstants)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 5\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 50, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(50)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dtos/page-options.dto.ts:34\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { OrderConstants } from '@common/constants/order.constants';\nimport { IsEnum, IsInt, IsOptional, Max, Min } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class PageOptionsDto {\n  @ApiPropertyOptional({ enum: OrderConstants, default: OrderConstants.ASC })\n  @IsEnum(OrderConstants)\n  @IsOptional()\n  readonly order?: OrderConstants = OrderConstants.ASC;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 50,\n    default: 10,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(50)\n  @IsOptional()\n  readonly take?: number = 5;\n\n  get skip(): number {\n    return (this.page - 1) * this.take;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/entities/product.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                brand\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    Public\n                                comments\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                desc\n                            \n                            \n                                    \n                                    Public\n                                isSelling\n                            \n                            \n                                    \n                                    Public\n                                name\n                            \n                            \n                                    \n                                    Public\n                                price\n                            \n                            \n                                    \n                                    Public\n                                productImg\n                            \n                            \n                                    \n                                    Public\n                                region\n                            \n                            \n                                    \n                                    \n                                    Public\n                                reservation\n                            \n                            \n                                    \n                                    \n                                    Public\n                                seller\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        brand\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text', {array: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.product)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text', {array: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isSelling\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        productImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text', {array: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        region\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        reservation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Reservation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, reservation => reservation.product)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        seller\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.products)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:52\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  ManyToOne,\n  JoinColumn,\n  OneToMany,\n  OneToOne,\n} from 'typeorm';\nimport { CommonEntity } from '../../common/entities/common.entity';\nimport { User } from '@users/entities/user.entity';\nimport { Reservation } from '@reservation/entities/reservation.entity';\nimport { Comment } from '@comment/entities/comment.entity';\n\n@Entity() //model\nexport class Product extends CommonEntity {\n  @Column()\n  public name: string;\n\n  @Column('text', {\n    array: true,\n    nullable: true,\n  })\n  public desc?: string[];\n\n  @Column()\n  public price: number;\n\n  @Column('text', {\n    //text형태로 넣어줘야함 ex) number, object등있다.\n    array: true,\n  })\n  public productImg: string[];\n\n  @Column('text', {\n    array: true,\n  })\n  public category?: string[];\n\n  @Column()\n  public region: string;\n\n  @Column({\n    default: true,\n  })\n  public isSelling: boolean;\n\n  @Column()\n  public brand: string;\n\n  @ManyToOne(() => User, (user: User) => user.products)\n  @JoinColumn()\n  public seller: User;\n\n  @OneToMany(() => Comment, (comment: Comment) => comment.product)\n  public comments: Comment[];\n\n  @OneToOne(\n    () => Reservation,\n    (reservation: Reservation) => reservation.product,\n  )\n  @JoinColumn()\n  public reservation: Reservation;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                product\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createProduct\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deleteProductByIId\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAllProducts\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getProductById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateProductById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProduct(req: RequestWithUserInterface, createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@ApiBody({type: CreateProductDto})@ApiOperation({summary: '상품등록', description: '상품을 등록해줌'})@ApiResponse({description: 'create all products'})@ApiBearerAuth('access-token')@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deleteProductByIId\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProductByIId(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: '상품삭제', description: '상품을 삭제한다.'})\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllProducts(pageOptionsDto: PageOptionsDto, category?: string[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: '상품조회', description: '전체상품을 조회한다'})\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pageOptionsDto\n                                            \n                                                            PageOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                category\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProductById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: '상품 상세정보 불러오기', description: '상품 상세정보를 불러온다.'})\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProductById(createProductDto: CreateProductDto, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOperation({summary: '상품 수정', description: '상품을 수정할수있음'})\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n  Req,\n  Query,\n} from '@nestjs/common';\n\nimport {\n  ApiBearerAuth,\n  ApiBody,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { ProductService } from '@product/product.service';\nimport { CreateProductDto } from '@product/dto/create-product.dto';\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard';\nimport { RequestWithUserInterface } from '@auth/interfaces/requestWithUser.interface';\nimport { PageDto } from '@common/dtos/page.dto';\nimport { Product } from '@product/entities/product.entity';\nimport { PageOptionsDto } from '@common/dtos/page-options.dto';\n\n@ApiTags('Product')\n@Controller('product')\nexport class ProductController {\n  constructor(private readonly productService: ProductService) {}\n  //product전체 불러오기\n  @Get()\n  @ApiOperation({ summary: '상품조회', description: '전체상품을 조회한다' })\n  // async getAllProducts(@Query('category') category?: string) {\n  //   const products = await this.productService.productGetAll(category);\n  //   return products;\n  // }\n  async getAllProducts(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @Query('category') category?: string[],\n  ): Promise> {\n    return await this.productService.getAllProducts(pageOptionsDto, category);\n  }\n\n  //product 등록하기\n  @Post('/create')\n  @ApiBody({ type: CreateProductDto })\n  @ApiOperation({ summary: '상품등록', description: '상품을 등록해줌' })\n  @ApiResponse({\n    description: 'create all products',\n  })\n  @ApiBearerAuth('access-token')\n  @UseGuards(JwtAuthGuard) //로그인유무 확인 등록하기위해서\n  async createProduct(\n    @Req() req: RequestWithUserInterface,\n    @Body() createProductDto: CreateProductDto,\n  ) {\n    const newProduct = await this.productService.productCreate(\n      createProductDto,\n      req.user,\n    );\n    return newProduct;\n  }\n\n  //product 상세정보 불러오기(id)\n  @Get(':id')\n  @ApiOperation({\n    summary: '상품 상세정보 불러오기',\n    description: '상품 상세정보를 불러온다.',\n  })\n  async getProductById(@Param('id') id: string) {\n    const product = await this.productService.productGetById(id);\n    return product;\n  }\n\n  //product update\n  @Put(':id')\n  @ApiOperation({ summary: '상품 수정', description: '상품을 수정할수있음' })\n  async updateProductById(\n    @Body() createProductDto: CreateProductDto,\n    @Param('id') id: string,\n  ) {\n    return await this.productService.productUpdateById(id, createProductDto);\n  }\n  //product delete\n  @Delete(':id')\n  @ApiOperation({ summary: '상품삭제', description: '상품을 삭제한다.' })\n  async deleteProductByIId(@Param('id') id: string) {\n    const product = await this.productService.productDeleteById(id);\n    return product;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProductInterface.html":{"url":"interfaces/ProductInterface.html","title":"interface - ProductInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProductInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/product.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            product\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        product\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        product:         Product\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Product\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Product } from '@product/entities/product.entity';\n\nexport interface ProductInterface extends Request {\n  product: Product;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductModule.html":{"url":"modules/ProductModule.html","title":"module - ProductModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\n\nProductService\n\nProductService\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { ProductController } from '@product/product.controller';\nimport { ProductService } from '@product/product.service';\nimport { Product } from '@product/entities/product.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product])],\n  controllers: [ProductController],\n  providers: [ProductService],\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/product.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllProducts\n                            \n                            \n                                    Async\n                                productCreate\n                            \n                            \n                                    Async\n                                productDeleteById\n                            \n                            \n                                    Async\n                                productGetById\n                            \n                            \n                                    Async\n                                productUpdateById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/product/product.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllProducts(pageOptionsDto: PageOptionsDto, category?: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pageOptionsDto\n                                            \n                                                            PageOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                category\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        productCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    productCreate(createProductDto: CreateProductDto, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        productDeleteById\n                        \n                    \n                \n            \n            \n                \n                        \n                    productDeleteById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        productGetById\n                        \n                    \n                \n            \n            \n                \n                        \n                    productGetById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        productUpdateById\n                        \n                    \n                \n            \n            \n                \n                        \n                    productUpdateById(id: string, createProductDto: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\n\nimport { Repository } from 'typeorm';\nimport { Product } from '@product/entities/product.entity';\nimport { CreateProductDto } from '@product/dto/create-product.dto';\nimport { User } from '@users/entities/user.entity';\nimport { PageOptionsDto } from '@common/dtos/page-options.dto';\nimport { PageDto } from '@common/dtos/page.dto';\nimport { PageMetaDto } from '@common/dtos/page-meta.dto';\n\n@Injectable()\nexport class ProductService {\n  constructor(\n    @InjectRepository(Product)\n    private productRepository: Repository,\n  ) {}\n\n  //등록해주는 로직\n  async productCreate(createProductDto: CreateProductDto, user: User) {\n    const newProduct = await this.productRepository.create({\n      ...createProductDto,\n      seller: user,\n    });\n\n    await this.productRepository.save(newProduct);\n    return newProduct;\n  }\n\n  //전체불러오는 로직\n  // async productGetAll(category?: string) {\n  //   //?옵션 있어도그만없어도그만\n  //   const queryBuilder = await this.productRepository.createQueryBuilder(\n  //     'product',\n  //   ); //db에 쿼리를직접 해줌\n  //   queryBuilder.leftJoinAndSelect('product.seller', 'seller'); //관계형\n  //   queryBuilder.leftJoinAndSelect('product.comments', 'comments'); //관계형\n  //   if (category && category.length > 0) {\n  //     //category에 검색키워드 이거를 검색하면 가져오겠다.\n  //     queryBuilder.andWhere(':category = ANY(product.category)', { category });\n  //   }\n  //   const { entities } = await queryBuilder.getRawAndEntities();\n  //   return entities;\n  // }\n\n  async getAllProducts(\n    pageOptionsDto: PageOptionsDto,\n    category?: string[],\n  ): Promise> {\n    const queryBuilder = await this.productRepository.createQueryBuilder(\n      'product',\n    );\n    queryBuilder.leftJoinAndSelect('product.seller', 'seller');\n    queryBuilder.leftJoinAndSelect('product.comments', 'comments');\n\n    console.log(category);\n\n    if (category !== undefined) {\n      if (Array.isArray(category)) {\n        queryBuilder.andWhere('product.category IN (:...category)', {\n          category,\n        });\n      } else {\n        queryBuilder.andWhere('product.category = :category', {\n          category,\n        });\n      }\n    }\n\n    await queryBuilder\n      .orderBy('product.createdAt', pageOptionsDto.order)\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take);\n\n    const itemCount = await queryBuilder.getCount();\n    const { entities } = await queryBuilder.getRawAndEntities();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async productGetById(id: string) {\n    const product = await this.productRepository\n      .createQueryBuilder('product')\n      .leftJoinAndSelect('product.seller', 'seller')\n      .leftJoinAndSelect('product.comments', 'comments')\n      .leftJoinAndSelect('comments.user', 'user')\n      .where('product.id = :id', { id })\n      .getOne();\n    // const product = await this.productRepository.findOneBy({\n    //   where: { id },\n    //   relations: {\n    //     seller: true,\n    //   },\n    // });\n    if (!product) {\n      // id가 없을때 만들어줌\n      throw new HttpException('No id', HttpStatus.NOT_FOUND);\n    }\n    return product;\n  }\n\n  async productDeleteById(id: string) {\n    await this.productRepository.delete({ id });\n    return 'deleted product';\n  }\n  async productUpdateById(id: string, createProductDto: CreateProductDto) {\n    // const product = await this.productRepository.findOneBy({ id });\n    // const updateProduct = await this.productRepository.update(createProductDto);\n    // return updateProduct;\n    await this.productRepository.update(id, createProductDto);\n    return 'updated product';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Rating.html":{"url":"entities/Rating.html","title":"entity - Rating","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Rating\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rating/entities/rating.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                buyer\n                            \n                            \n                                    \n                                    Public\n                                rating\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        buyer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.rating)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/rating/entities/rating.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/rating/entities/rating.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToMany, ManyToOne } from 'typeorm';\nimport { CommonEntity } from '@common/entities/common.entity';\nimport { User } from '@users/entities/user.entity';\n@Entity()\nexport class Rating extends CommonEntity {\n  @ManyToMany(() => User, (user: User) => user.rating)\n  @JoinColumn()\n  public buyer: User;\n\n  @Column({\n    default: 1,\n  })\n  public rating: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RatingController.html":{"url":"controllers/RatingController.html","title":"controller - RatingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RatingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rating/rating.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                rating\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Req,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n} from '@nestjs/common';\nimport { RatingService } from '@rating/rating.service';\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard';\nimport { CreateRatingDto } from '@rating/dto/create-rating.dto';\nimport { RequestWithUserInterface } from '@auth/interfaces/requestWithUser.interface';\n\n@Controller('rating')\nexport class RatingController {\n  constructor(private readonly ratingService: RatingService) {}\n\n  // @Post('/')\n  // @UseGuards(JwtAuthGuard)\n  // async createRating(@Body() createRatingDto: CreateRatingDto) {\n  //   const newRating = await this.ratingService.createRating(createRatingDto);\n  //   console.log(newRating);\n  //   return { newRating };\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RatingModule.html":{"url":"modules/RatingModule.html","title":"module - RatingModule","body":"\n                   \n\n\n\n\n    Modules\n    RatingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RatingModule\n\n\n\ncluster_RatingModule_providers\n\n\n\n\nRatingService\n\nRatingService\n\n\n\nRatingModule\n\nRatingModule\n\nRatingModule -->\n\nRatingService->RatingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/rating/rating.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RatingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RatingController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RatingService } from './rating.service';\nimport { RatingController } from './rating.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Rating } from './entities/rating.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Rating])],\n  controllers: [RatingController],\n  providers: [RatingService],\n})\nexport class RatingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RatingService.html":{"url":"injectables/RatingService.html","title":"injectable - RatingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RatingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rating/rating.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createRating\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ratingRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/rating/rating.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ratingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRating\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRating(createRatingDto: CreateRatingDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/rating/rating.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createRatingDto\n                                            \n                                                            CreateRatingDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Rating } from '@rating/entities/rating.entity';\nimport { CreateRatingDto } from '@rating/dto/create-rating.dto';\nimport { User } from '@users/entities/user.entity';\n\n@Injectable()\nexport class RatingService {\n  constructor(\n    @InjectRepository(Rating)\n    private ratingRepository: Repository,\n  ) {}\n\n  async createRating(createRatingDto: CreateRatingDto) {\n    const newRating = await this.ratingRepository.create({\n      ...createRatingDto,\n    });\n    console.log(createRatingDto);\n    await this.ratingRepository.save(newRating);\n    return newRating;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CacheModule } from '@nestjs/common/cache';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as redisStore from 'cache-manager-redis-store';\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (cfg: ConfigService) => ({\n        store: redisStore,\n        host: cfg.get('REDIS_HOST'),\n        port: cfg.get('REDIS_PORT'),\n        user: cfg.get('REDIS_USER'),\n        password: cfg.get('REDIS_PASSWORD'),\n        ttl: cfg.get('REDIS_TTL'),\n      }),\n      isGlobal: true,\n    }),\n  ],\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUserInterface.html":{"url":"interfaces/RequestWithUserInterface.html","title":"interface - RequestWithUserInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUserInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/requestWithUser.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { User } from '@users/entities/user.entity';\n\nexport interface RequestWithUserInterface extends Request {\n  user: User;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Reservation.html":{"url":"entities/Reservation.html","title":"entity - Reservation","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Reservation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservation/entities/reservation.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                desc\n                            \n                            \n                                    \n                                    Public\n                                location\n                            \n                            \n                                    \n                                    \n                                    Public\n                                product\n                            \n                            \n                                    \n                                    Public\n                                purchase\n                            \n                            \n                                    \n                                    Public\n                                reservationDate\n                            \n                            \n                                    \n                                    \n                                    Public\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/entities/reservation.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/entities/reservation.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, product => product.reservation)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/entities/reservation.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        purchase\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/entities/reservation.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        reservationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamptz'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/entities/reservation.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.reservation)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/entities/reservation.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToMany,\n  OneToOne,\n} from 'typeorm';\nimport { CommonEntity } from '@common/entities/common.entity';\nimport { Product } from '@product/entities/product.entity';\nimport { User } from '@users/entities/user.entity';\n\n@Entity({synchronize: false})\nexport class Reservation extends CommonEntity {\n  @Column()\n  public location: string;\n\n  @OneToOne(() => Product, (product: Product) => product.reservation)\n  @JoinColumn()\n  public product: Product;\n\n  @Column({\n    default: true,\n  })\n  public purchase: boolean;\n\n  @ManyToOne(() => User, (user: User) => user.reservation)\n  @JoinColumn()\n  public user: User;\n\n  @Column()\n  public desc: string;\n\n  @Column({ type: 'timestamptz'} )\n  public reservationDate: Date;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReservationController.html":{"url":"controllers/ReservationController.html","title":"controller - ReservationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReservationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservation/reservation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                reservation\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createReservation\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                deleteReservationById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAllReservation\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getReservationById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        createReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReservation(req: RequestWithUserInterface, createReservationDto: CreateReservationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBody({type: CreateReservationDto})@ApiOperation({summary: '예약하기', description: '예약하기 api'})@ApiResponse({description: 'reservation success'})@ApiBearerAuth('access-token')@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/reservation/reservation.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createReservationDto\n                                            \n                                                            CreateReservationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        deleteReservationById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteReservationById(id: string, res: RequestWithUserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(JwtAuthGuard)@ApiOperation({summary: '예약취소', description: '예약삭제 api'})\n                \n            \n\n                    \n                        \n                            Defined in src/reservation/reservation.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            RequestWithUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAllReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllReservation(user?: User, product?: Product)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: '예약 전체리스트', description: '예약 전체 리스트 조회'})\n                \n            \n\n                    \n                        \n                            Defined in src/reservation/reservation.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                product\n                                            \n                                                            Product\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getReservationById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getReservationById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: '예약조회', description: '예약 조회'})\n                \n            \n\n                    \n                        \n                            Defined in src/reservation/reservation.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  UseGuards,\n  Req,\n  Query, Delete, Res,\n} from '@nestjs/common';\n\nimport {\n  ApiBearerAuth,\n  ApiBody,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { ReservationService } from '@reservation/reservation.service';\nimport { CreateReservationDto } from '@reservation/dto/create-reservation.dto';\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard';\nimport { RequestWithUserInterface } from '@auth/interfaces/requestWithUser.interface';\nimport { User } from '@users/entities/user.entity';\nimport { Product } from '@product/entities/product.entity';\n\n@ApiTags('Reservation')\n@Controller('reservation')\nexport class ReservationController {\n  constructor(private readonly reservationService: ReservationService) {}\n\n  @Post()\n  @ApiBody({ type: CreateReservationDto })\n  @ApiOperation({ summary: '예약하기', description: '예약하기 api' })\n  @ApiResponse({\n    description: 'reservation success',\n  })\n  @ApiBearerAuth('access-token')\n  @UseGuards(JwtAuthGuard)\n  async createReservation(\n    @Req() req: RequestWithUserInterface,\n    @Body() createReservationDto: CreateReservationDto,\n  ) {\n    const newReservation = await this.reservationService.productReservation(\n      createReservationDto,\n      req.user,\n    );\n    return newReservation;\n  }\n\n  @Get()\n  @ApiOperation({\n    summary: '예약 전체리스트',\n    description: '예약 전체 리스트 조회',\n  })\n  async getAllReservation(\n    // @Req() req: RequestWithUserInterface,\n    @Query('user') user?: User,\n    @Query('product') product?: Product,\n  ) {\n    const reservations = await this.reservationService.reservationGetAll(\n      user,\n      product,\n    );\n    return reservations;\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: '예약조회', description: '예약 조회' })\n  async getReservationById(@Param('id') id: string) {\n    const reservation = await this.reservationService.reservationGetById(id);\n    return reservation;\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtAuthGuard)\n  @ApiOperation({ summary: '예약취소', description: '예약삭제 api'})\n  async deleteReservationById(@Param('id') id: string, @Res() res: RequestWithUserInterface) {\n    const { user } = res;\n    const reservation = await this.reservationService.deleteReservationById(id, user);\n    return reservation;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReservationModule.html":{"url":"modules/ReservationModule.html","title":"module - ReservationModule","body":"\n                   \n\n\n\n\n    Modules\n    ReservationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReservationModule\n\n\n\ncluster_ReservationModule_providers\n\n\n\n\nReservationService\n\nReservationService\n\n\n\nReservationModule\n\nReservationModule\n\nReservationModule -->\n\nReservationService->ReservationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/reservation/reservation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ReservationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReservationController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Reservation } from '@reservation/entities/reservation.entity';\nimport { ReservationController } from '@reservation/reservation.controller';\nimport { ReservationService } from '@reservation/reservation.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Reservation])],\n  controllers: [ReservationController],\n  providers: [ReservationService],\n})\nexport class ReservationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReservationService.html":{"url":"injectables/ReservationService.html","title":"injectable - ReservationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReservationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservation/reservation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteReservationById\n                            \n                            \n                                    Async\n                                productReservation\n                            \n                            \n                                    Async\n                                reservationGetAll\n                            \n                            \n                                    Async\n                                reservationGetById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reservationRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/reservation/reservation.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reservationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteReservationById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteReservationById(id: string, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservation/reservation.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        productReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    productReservation(createReservationDto: CreateReservationDto, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservation/reservation.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createReservationDto\n                                            \n                                                            CreateReservationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        reservationGetAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    reservationGetAll(user?: User, product?: Product)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservation/reservation.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                product\n                                            \n                                                            Product\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        reservationGetById\n                        \n                    \n                \n            \n            \n                \n                        \n                    reservationGetById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservation/reservation.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Reservation } from '@reservation/entities/reservation.entity';\nimport { CreateReservationDto } from '@reservation/dto/create-reservation.dto';\nimport { User } from '@users/entities/user.entity';\nimport { Product } from '@product/entities/product.entity';\n\n@Injectable()\nexport class ReservationService {\n  constructor(\n    @InjectRepository(Reservation)\n    private reservationRepository: Repository,\n  ) {}\n\n  //등록해주는 로직\n  async productReservation(\n    createReservationDto: CreateReservationDto,\n    user: User,\n  ) {\n    const newReservation = await this.reservationRepository.create({\n      ...createReservationDto,\n      user,\n    });\n    await this.reservationRepository.save(newReservation);\n    return newReservation;\n  }\n  async reservationGetAll(user?: User, product?: Product) {\n    const reservations = await this.reservationRepository.find({\n      relations: ['users', 'product'], //관계형으로 이어진것을 보여줌\n    });\n    return { count: reservations.length, reservations };\n    // const queryBuilder = await this.reservationRepository.createQueryBuilder(\n    //   'reservation',\n    // );\n    // queryBuilder.leftJoinAndSelect('reservation.user', 'users');\n    // queryBuilder.leftJoinAndSelect('reservation.product', 'product');\n    //\n    // if (user) {\n    //   queryBuilder.where('reservation.user = :user', { user });\n    // }\n    // if (product) {\n    //   queryBuilder.where('reservation.product.id = :product', { product });\n    // }\n    // const { entities } = await queryBuilder.getRawAndEntities();\n    // return entities;\n  }\n\n  async reservationGetById(id: string) {\n    const reservation = await this.reservationRepository.findOne({\n      where: { id },\n      relations: ['user', 'product', 'product.seller'],\n    });\n    if (reservation) return reservation;\n    throw new HttpException('No reservation', HttpStatus.NOT_FOUND);\n  }\n\n  async deleteReservationById(id: string, user: User) {\n    const res = await this.reservationRepository.findOneBy({id})\n    if(res.user === user) {\n      const reservation = await this.reservationRepository.delete(id)\n      return reservation\n\n    }\n    throw new HttpException(\"not reservation\", HttpStatus.FORBIDDEN)\n\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayloadInterface.html":{"url":"interfaces/TokenPayloadInterface.html","title":"interface - TokenPayloadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayloadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/tokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayloadInterface {\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/transform.interceptor.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { map, Observable } from 'rxjs';\n\nexport const Info = {\n  statusCode: 200,\n  message: 'success',\n};\n\nexport type Response = typeof Info & {\n  data: T;\n};\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map((data) => Object.assign({}, Info, { data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAuthDto.html":{"url":"classes/UpdateAuthDto.html","title":"class - UpdateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-auth.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateAuthDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAuthDto } from './create-auth.dto';\n\nexport class UpdateAuthDto extends PartialType(CreateAuthDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommentDto.html":{"url":"classes/UpdateCommentDto.html","title":"class - UpdateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comment/dto/update-comment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateCommentDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCommentDto } from './create-comment.dto';\n\nexport class UpdateCommentDto extends PartialType(CreateCommentDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateOrderDto.html":{"url":"classes/UpdateOrderDto.html","title":"class - UpdateOrderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateOrderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/dto/update-order.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateOrderDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateOrderDto } from './create-order.dto';\n\nexport class UpdateOrderDto extends PartialType(CreateOrderDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/dto/update-product.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateProductDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateProductDto } from '@product/dto/create-product.dto';\n\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRatingDto.html":{"url":"classes/UpdateRatingDto.html","title":"class - UpdateRatingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRatingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rating/dto/update-rating.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateRatingDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateRatingDto } from '@rating/dto/create-rating.dto';\n\nexport class UpdateRatingDto extends PartialType(CreateRatingDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateReservationDto.html":{"url":"classes/UpdateReservationDto.html","title":"class - UpdateReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservation/dto/update-reservation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateReservationDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateReservationDto } from '@reservation/dto/create-reservation.dto';\n\nexport class UpdateReservationDto extends PartialType(CreateReservationDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from '@users/dto/create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                comments\n                            \n                            \n                                    \n                                    Public\n                                email\n                            \n                            \n                                    \n                                    Public\n                                name\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    Public\n                                products\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                profileImg\n                            \n                            \n                                    \n                                    Public\n                                provider\n                            \n                            \n                                    \n                                    \n                                    Public\n                                rating\n                            \n                            \n                                    \n                                    \n                                    Public\n                                reservation\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        products\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, product => product.seller)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        profileImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Provider\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Provider, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Rating\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, rating => rating.buyer)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        reservation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Reservation[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, reservation => reservation.user)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeInsert,\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToMany,\n  OneToMany,\n} from 'typeorm';\n\nimport {\n  HttpException,\n  HttpStatus,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport * as bcrypt from 'bcryptjs';\nimport * as gravatar from 'gravatar';\nimport { CommonEntity } from '@common/entities/common.entity';\nimport { Product } from '@product/entities/product.entity';\nimport { Reservation } from '@reservation/entities/reservation.entity';\nimport { Provider } from '@users/entities/provider.enum';\nimport { Rating } from '@rating/entities/rating.entity';\nimport { Comment } from '@comment/entities/comment.entity';\n\n@Entity()\nexport class User extends CommonEntity {\n  @Column()\n  public name: string;\n  @Column({ unique: true }) //중복값 허용 x\n  public email: string;\n  @Column({ nullable: true }) //null값을 허용\n  public password?: string;\n\n  @OneToMany(() => Product, (product: Product) => product.seller)\n  public products: Product[];\n\n  // @OneToMany(() => Reservation, (reservation: Reservation) => reservation.user)\n  // public reservations: Reservation[];\n  @OneToMany(() => Reservation, (reservation: Reservation) => reservation.user)\n  @JoinColumn()\n  public reservation: Reservation[];\n\n  @Column({\n    type: 'enum',\n    enum: Provider,\n    default: Provider.LOCAL, //선택이 없으면 자동으로 이메일로 선택\n  })\n  public provider: Provider; //Provider에있는 4개중에 하나만 골라야함\n\n  @OneToMany(() => Comment, (comment: Comment) => comment.user)\n  public comments: Comment[];\n\n  @Column({ nullable: true })\n  public profileImg?: string;\n\n  @ManyToMany(() => Rating, (rating: Rating) => rating.buyer)\n  @JoinColumn()\n  public rating: Rating;\n\n  @BeforeInsert() //데이터를 넣기전에 실행하는 함수\n  async beforeSaveFunction(): Promise {\n    try {\n      if (this.provider !== Provider.LOCAL) {\n        return;\n      } else {\n        //패스워드 암호화\n        const saltValue = await bcrypt.genSalt(10); //암호화되는 키값\n        this.password = await bcrypt.hash(this.password, saltValue);\n\n        //프로필 이미지 자동생성\n        this.profileImg = await gravatar.url(this.email, {\n          s: '200',\n          r: 'pg',\n          d: 'mm',\n          protocol: 'https',\n        });\n      }\n    } catch (err) {\n      console.log(err);\n      throw new InternalServerErrorException();\n    }\n  }\n  //로그인할때 패스워드인증(암호화된패스워드를 맞는지 안맞는지 확인해줌)\n  async validatePassword(aPassword: string) {\n    try {\n      const isPasswordMatch = await bcrypt.compare(aPassword, this.password);\n      return isPasswordMatch;\n    } catch (err) {\n      console.log(err);\n      throw new HttpException(err.message, HttpStatus.CONFLICT);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getUserById\n                            \n                            \n                                    \n                                    Async\n                                postSignup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        postSignup\n                        \n                    \n                \n            \n            \n                \n                        \n                    postSignup(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { UsersService } from '@users/users.service';\nimport { CreateUserDto } from '@users/dto/create-user.dto';\n\n@ApiTags('Users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  //회원가입 전체를 불러옴\n  // @Get()\n  // async getAllUsers() {\n  //   const users = await this.usersService.userGetAll();\n  //   return users;\n  // }\n  //회원가입\n  @Post('/create')\n  async postSignup(@Body() createUserDto: CreateUserDto) {\n    const newSignup = await this.usersService.CreateUser(createUserDto);\n    return newSignup;\n  }\n\n  @Get(':id')\n  async getUserById(@Param('id') id: string) {\n    const user = await this.usersService.getUserById(id);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '@users/entities/user.entity';\nimport { UsersController } from '@users/users.controller';\nimport { UsersService } from '@users/users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService], //UserService를 내보냄\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                CreateUser\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                userGetAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        CreateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    CreateUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        userGetAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    userGetAll(id: string, reservation?: Reservation)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                reservation\n                                            \n                                                            Reservation\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable, NotFoundException, Req} from '@nestjs/common';\n\nimport { InjectRepository } from '@nestjs/typeorm';\nimport {FindOperator, Repository} from 'typeorm';\n\nimport * as bcrypt from 'bcryptjs';\nimport { User } from '@users/entities/user.entity';\nimport { CreateUserDto } from '@users/dto/create-user.dto';\nimport {Reservation} from \"@reservation/entities/reservation.entity\";\nimport {Product} from \"@product/entities/product.entity\";\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User) //db활용\n    private userRepository: Repository,\n  ) {}\n\n  // //프로필\n  // async userGetAll(reservation?:Reservation) {\n  //   const queryBuilder = await this.userRepository.createQueryBuilder('user',);\n  //   queryBuilder.leftJoinAndSelect('user.reservation', 'reservation')\n  //\n  //   if (reservation) {\n  //     queryBuilder.where('user.reservation = :reservation', { reservation})\n  //   }\n  //   const {entities } = await queryBuilder.getRawAndEntities()\n  //   return entities\n  // }\n\n  // async userGetAll(user: User, reservation?: Reservation, product?: Product) {\n  //   const query = this.userRepository.createQueryBuilder('user')\n  //       .leftJoinAndSelect('user.reservation', 'reservation') // 관련 예약을 가져오도록 수정\n  //       .where('user.id = :userId', { userId: user.id }); // 특정 사용자에 대한 것만 가져오도록 수정\n  //\n  //   if (reservation) {\n  //     query.andWhere('reservation.id = :reservationId', { reservationId: reservation.id });\n  //   }\n  //\n  //   if (product) {\n  //     query.andWhere('product.id = :productId', { productId: product.id });\n  //   }\n  //\n  //   return query.getOne()\n  // }\n\n  async userGetAll( id: string,reservation?: Reservation) {\n    const profile = await  this.userRepository.findOne({\n      where: {id},\n      relations : ['reservation', 'reservation.product', 'reservation.product.seller']\n    });\n    return { profile }\n    // const queryBuilder = await this.userRepository.createQueryBuilder(\n    //     'user',\n    // );\n    // queryBuilder.leftJoinAndSelect('user.reservation', 'users');\n    //\n    // if (reservation) {\n    //   queryBuilder.where('user.reservation = :reservation', { reservation });\n    // }\n    //\n    // const { entities } = await queryBuilder.getRawAndEntities();\n    // return entities;\n  }\n\n  //user생성로직\n  async CreateUser(createUserDto: CreateUserDto) {\n    const newSignup = await this.userRepository.create(createUserDto);\n    // newSignup.provider = Provider.LOCAL;\n    await this.userRepository.save(newSignup);\n    return newSignup;\n  }\n\n  //user 찾기(by id)\n  async getUserById(id: string) {\n    const user = await this.userRepository.findOneBy({ id });\n    if (!user) {\n      throw new NotFoundException('No user Id');\n    }\n    return user;\n  }\n\n  //email로 찾기\n  async getUserByEmail(email: string) {\n    const user = await this.userRepository.findOneBy({ email });\n    if (!user) {\n      throw new NotFoundException('No user Email');\n    }\n    return user;\n  }\n\n  //패스워드 바꾸기\n  async changePassword(email: string, password: string) {\n    const user = await this.userRepository.findOneBy({ email });\n    user.password = await bcrypt.hash(password, 10);\n    return this.userRepository.save(user);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VerificationTokenPayloadInterface.html":{"url":"interfaces/VerificationTokenPayloadInterface.html","title":"interface - VerificationTokenPayloadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VerificationTokenPayloadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/verificationTokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface VerificationTokenPayloadInterface {\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/auth/dto/create-auth.dto.ts\n            \n            class\n            CreateAuthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/update-auth.dto.ts\n            \n            class\n            UpdateAuthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/google-auth.guard.ts\n            \n            injectable\n            GoogleAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/kakao-auth.guard.ts\n            \n            class\n            KakaoAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/naver-auth.guard.ts\n            \n            injectable\n            NaverAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interfaces/product.interface.ts\n            \n            interface\n            ProductInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/interfaces/requestWithUser.interface.ts\n            \n            interface\n            RequestWithUserInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/interfaces/tokenPayload.interface.ts\n            \n            interface\n            TokenPayloadInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/interfaces/verificationTokenPayload.interface.ts\n            \n            interface\n            VerificationTokenPayloadInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/strategies/google-auth.strategy.ts\n            \n            injectable\n            GoogleAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt-auth.strategy.ts\n            \n            injectable\n            JwtAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/kakao-auth.strategy.ts\n            \n            injectable\n            KakaoAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local-auth.strategy.ts\n            \n            injectable\n            LocalAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/naver-auth.strategy.ts\n            \n            injectable\n            NaverAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comment/comment.controller.ts\n            \n            controller\n            CommentController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comment/comment.service.ts\n            \n            injectable\n            CommentService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/comment/dto/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comment/dto/update-comment.dto.ts\n            \n            class\n            UpdateCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/comment/entities/comment.entity.ts\n            \n            entity\n            Comment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/config/swagger.document.ts\n            \n            class\n            BaseAPIDocument\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/decorator/user.decorator.ts\n            \n            variable\n            CustomUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta.dto.ts\n            \n            class\n            PageMetaDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/dtos/page-options.dto.ts\n            \n            class\n            PageOptionsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/dtos/page.dto.ts\n            \n            class\n            PageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/entities/common.entity.ts\n            \n            class\n            CommonEntity\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/transform.interceptor.ts\n            \n            variable\n            Info\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/interfaces/page-meta-dto-parameters.interface.ts\n            \n            interface\n            PageMetaDtoParametersInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/template/verificationEmail.ts\n            \n            variable\n            verificationEmail\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/order/dto/create-order.dto.ts\n            \n            class\n            CreateOrderDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/order/dto/update-order.dto.ts\n            \n            class\n            UpdateOrderDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/order/entities/order.entity.ts\n            \n            class\n            Order\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/order/order.controller.ts\n            \n            controller\n            OrderController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/order/order.service.ts\n            \n            injectable\n            OrderService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/product/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/product/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/product/entities/product.entity.ts\n            \n            entity\n            Product\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/rating/dto/create-rating.dto.ts\n            \n            class\n            CreateRatingDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/rating/dto/update-rating.dto.ts\n            \n            class\n            UpdateRatingDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/rating/entities/rating.entity.ts\n            \n            entity\n            Rating\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/rating/rating.controller.ts\n            \n            controller\n            RatingController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/rating/rating.service.ts\n            \n            injectable\n            RatingService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/reservation/dto/create-reservation.dto.ts\n            \n            class\n            CreateReservationDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/reservation/dto/update-reservation.dto.ts\n            \n            class\n            UpdateReservationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/reservation/entities/reservation.entity.ts\n            \n            entity\n            Reservation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/reservation/reservation.controller.ts\n            \n            controller\n            ReservationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/reservation/reservation.service.ts\n            \n            injectable\n            ReservationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/change-password.dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/confirm-email.dto.ts\n            \n            class\n            ConfirmEmailDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/new-password.dto.ts\n            \n            class\n            NewPasswordDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.22\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.1.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.1.8\n        \n            @nestjs/typeorm : ^10.0.0\n        \n            @types/bcryptjs : ^2.4.2\n        \n            @types/cookie-parser : ^1.4.3\n        \n            @types/gravatar : ^1.8.3\n        \n            @types/hapi__joi : ^17.1.9\n        \n            @types/nodemailer : ^6.4.9\n        \n            @types/passport-google-oauth2 : ^0.1.5\n        \n            @types/passport-jwt : ^3.0.9\n        \n            @types/passport-kakao : ^1.0.0\n        \n            @types/passport-local : ^1.0.35\n        \n            @types/passport-naver : ^1.0.1\n        \n            bcryptjs : ^2.4.3\n        \n            cache-manager : 4.1\n        \n            cache-manager-redis-store : 2.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            cookie-parser : ^1.4.6\n        \n            gravatar : ^1.8.2\n        \n            nodemailer : ^6.9.4\n        \n            passport : ^0.6.0\n        \n            passport-google-oauth2 : ^0.2.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-kakao : ^1.0.1\n        \n            passport-local : ^1.0.0\n        \n            passport-naver : ^1.0.6\n        \n            passport-naver-v2 : ^2.0.8\n        \n            pg : ^8.11.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.17\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            OrderConstants   (src/.../order.constants.ts)\n                        \n                        \n                            Provider   (src/.../provider.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/constants/order.constants.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderConstants\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/users/entities/provider.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Provider\n                    \n                \n                        \n                            \n                                 LOCAL\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 GOOGLE\n                            \n                        \n                        \n                            \n                                Value : google\n                            \n                        \n                        \n                            \n                                 NAVER\n                            \n                        \n                        \n                            \n                                Value : naver\n                            \n                        \n                        \n                            \n                                 KAKAO\n                            \n                        \n                        \n                            \n                                Value : kakao\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CommentModule\n\n\n\ncluster_CommentModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_OrderModule\n\n\n\ncluster_OrderModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_RatingModule\n\n\n\ncluster_RatingModule_providers\n\n\n\ncluster_ReservationModule\n\n\n\ncluster_ReservationModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAppConfigModule\n\nAppConfigModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommentModule\n\nCommentModule\n\nAppModule -->\n\nCommentModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAuthModule -->\n\nEmailModule->AuthModule\n\n\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nOrderModule\n\nOrderModule\n\nAppModule -->\n\nOrderModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nRatingModule\n\nRatingModule\n\nAppModule -->\n\nRatingModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nReservationModule\n\nReservationModule\n\nAppModule -->\n\nReservationModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleAuthStrategy\n\nGoogleAuthStrategy\n\nAuthModule -->\n\nGoogleAuthStrategy->AuthModule\n\n\n\n\n\nJwtAuthStrategy\n\nJwtAuthStrategy\n\nAuthModule -->\n\nJwtAuthStrategy->AuthModule\n\n\n\n\n\nKakaoAuthStrategy\n\nKakaoAuthStrategy\n\nAuthModule -->\n\nKakaoAuthStrategy->AuthModule\n\n\n\n\n\nLocalAuthStrategy\n\nLocalAuthStrategy\n\nAuthModule -->\n\nLocalAuthStrategy->AuthModule\n\n\n\n\n\nNaverAuthStrategy\n\nNaverAuthStrategy\n\nAuthModule -->\n\nNaverAuthStrategy->AuthModule\n\n\n\n\n\nCommentService\n\nCommentService\n\nCommentModule -->\n\nCommentService->CommentModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nOrderService\n\nOrderService\n\nOrderModule -->\n\nOrderService->OrderModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nRatingService\n\nRatingService\n\nRatingModule -->\n\nRatingService->RatingModule\n\n\n\n\n\nReservationService\n\nReservationService\n\nReservationModule -->\n\nReservationService->ReservationModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        12 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    27 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OrderModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RatingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReservationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Response   (src/.../transform.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/interceptors/transform.interceptor.ts\n    \n    \n        \n            \n                \n                    \n                    Response\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CustomUser   (src/.../user.decorator.ts)\n                        \n                        \n                            Info   (src/.../transform.interceptor.ts)\n                        \n                        \n                            verificationEmail   (src/.../verificationEmail.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorator/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CustomUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as User;\n    },\n)\n                    \n                \n\n\n        \n    \n\n    src/common/interceptors/transform.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Info\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  statusCode: 200,\n  message: 'success',\n}\n                    \n                \n\n\n        \n    \n\n    src/common/template/verificationEmail.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        verificationEmail\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (number) => `\n  \n\n  \n    \n    \n    Simple Transactional Email\n    \n      /* -------------------------------------\n          GLOBAL RESETS\n      ------------------------------------- */\n      \n      /*All the styling goes here*/\n      \n      img {\n        border: none;\n        -ms-interpolation-mode: bicubic;\n        max-width: 100%; \n      }\n\n      body {\n        background-color: #f6f6f6;\n        font-family: sans-serif;\n        -webkit-font-smoothing: antialiased;\n        font-size: 14px;\n        line-height: 1.4;\n        margin: 0;\n        padding: 0;\n        -ms-text-size-adjust: 100%;\n        -webkit-text-size-adjust: 100%; \n      }\n\n      table {\n        border-collapse: separate;\n        mso-table-lspace: 0pt;\n        mso-table-rspace: 0pt;\n        width: 100%; }\n        table td {\n          font-family: sans-serif;\n          font-size: 14px;\n          vertical-align: top; \n      }\n\n      /* -------------------------------------\n          BODY & CONTAINER\n      ------------------------------------- */\n\n      .body {\n        background-color: #f6f6f6;\n        width: 100%; \n      }\n\n      /* Set a max-width, and make it display as block so it will automatically stretch to that width, but will also shrink down on a phone or something */\n      .container {\n        display: block;\n        margin: 0 auto !important;\n        /* makes it centered */\n        max-width: 580px;\n        padding: 10px;\n        width: 580px; \n      }\n\n      /* This should also be a block element, so that it will fill 100% of the .container */\n      .content {\n        box-sizing: border-box;\n        display: block;\n        margin: 0 auto;\n        max-width: 580px;\n        padding: 10px; \n      }\n\n      /* -------------------------------------\n          HEADER, FOOTER, MAIN\n      ------------------------------------- */\n      .main {\n        background: #ffffff;\n        border-radius: 3px;\n        width: 100%; \n      }\n\n      .wrapper {\n        box-sizing: border-box;\n        padding: 20px; \n      }\n\n      .content-block {\n        padding-bottom: 10px;\n        padding-top: 10px;\n      }\n\n      .footer {\n        clear: both;\n        margin-top: 10px;\n        text-align: center;\n        width: 100%; \n      }\n        .footer td,\n        .footer p,\n        .footer span,\n        .footer a {\n          color: #999999;\n          font-size: 12px;\n          text-align: center; \n      }\n\n      /* -------------------------------------\n          TYPOGRAPHY\n      ------------------------------------- */\n      h1,\n      h2,\n      h3,\n      h4 {\n        color: #000000;\n        font-family: sans-serif;\n        font-weight: 400;\n        line-height: 1.4;\n        margin: 0;\n        margin-bottom: 30px; \n      }\n\n      h1 {\n        font-size: 35px;\n        font-weight: 300;\n        text-align: center;\n        text-transform: capitalize; \n      }\n\n      p,\n      ul,\n      ol {\n        font-family: sans-serif;\n        font-size: 14px;\n        font-weight: normal;\n        margin: 0;\n        margin-bottom: 15px; \n      }\n        p li,\n        ul li,\n        ol li {\n          list-style-position: inside;\n          margin-left: 5px; \n      }\n\n      a {\n        color: #3498db;\n        text-decoration: underline; \n      }\n\n      /* -------------------------------------\n          BUTTONS\n      ------------------------------------- */\n      .btn {\n        box-sizing: border-box;\n        width: 100%; }\n        .btn > tbody > tr > td {\n          padding-bottom: 15px; }\n        .btn table {\n          width: auto; \n      }\n        .btn table td {\n          background-color: #ffffff;\n          border-radius: 5px;\n          text-align: center; \n      }\n        .btn a {\n          background-color: #ffffff;\n          border: solid 1px #3498db;\n          border-radius: 5px;\n          box-sizing: border-box;\n          color: #3498db;\n          cursor: pointer;\n          display: inline-block;\n          font-size: 14px;\n          font-weight: bold;\n          margin: 0;\n          padding: 12px 25px;\n          text-decoration: none;\n          text-transform: capitalize; \n      }\n\n      .btn-primary table td {\n        background-color: #3498db; \n      }\n\n      .btn-primary a {\n        background-color: #3498db;\n        border-color: #3498db;\n        color: #ffffff; \n      }\n\n      /* -------------------------------------\n          OTHER STYLES THAT MIGHT BE USEFUL\n      ------------------------------------- */\n      .last {\n        margin-bottom: 0; \n      }\n\n      .first {\n        margin-top: 0; \n      }\n\n      .align-center {\n        text-align: center; \n      }\n\n      .align-right {\n        text-align: right; \n      }\n\n      .align-left {\n        text-align: left; \n      }\n\n      .clear {\n        clear: both; \n      }\n\n      .mt0 {\n        margin-top: 0; \n      }\n\n      .mb0 {\n        margin-bottom: 0; \n      }\n\n      .preheader {\n        color: transparent;\n        display: none;\n        height: 0;\n        max-height: 0;\n        max-width: 0;\n        opacity: 0;\n        overflow: hidden;\n        mso-hide: all;\n        visibility: hidden;\n        width: 0; \n      }\n\n      .powered-by a {\n        text-decoration: none; \n      }\n\n      hr {\n        border: 0;\n        border-bottom: 1px solid #f6f6f6;\n        margin: 20px 0; \n      }\n\n      /* -------------------------------------\n          RESPONSIVE AND MOBILE FRIENDLY STYLES\n      ------------------------------------- */\n      @media only screen and (max-width: 620px) {\n        table.body h1 {\n          font-size: 28px !important;\n          margin-bottom: 10px !important; \n        }\n        table.body p,\n        table.body ul,\n        table.body ol,\n        table.body td,\n        table.body span,\n        table.body a {\n          font-size: 16px !important; \n        }\n        table.body .wrapper,\n        table.body .article {\n          padding: 10px !important; \n        }\n        table.body .content {\n          padding: 0 !important; \n        }\n        table.body .container {\n          padding: 0 !important;\n          width: 100% !important; \n        }\n        table.body .main {\n          border-left-width: 0 !important;\n          border-radius: 0 !important;\n          border-right-width: 0 !important; \n        }\n        table.body .btn table {\n          width: 100% !important; \n        }\n        table.body .btn a {\n          width: 100% !important; \n        }\n        table.body .img-responsive {\n          height: auto !important;\n          max-width: 100% !important;\n          width: auto !important; \n        }\n      }\n\n      /* -------------------------------------\n          PRESERVE THESE STYLES IN THE HEAD\n      ------------------------------------- */\n      @media all {\n        .ExternalClass {\n          width: 100%; \n        }\n        .ExternalClass,\n        .ExternalClass p,\n        .ExternalClass span,\n        .ExternalClass font,\n        .ExternalClass td,\n        .ExternalClass div {\n          line-height: 100%; \n        }\n        .apple-link a {\n          color: inherit !important;\n          font-family: inherit !important;\n          font-size: inherit !important;\n          font-weight: inherit !important;\n          line-height: inherit !important;\n          text-decoration: none !important; \n        }\n        #MessageViewBody a {\n          color: inherit;\n          text-decoration: none;\n          font-size: inherit;\n          font-family: inherit;\n          font-weight: inherit;\n          line-height: inherit;\n        }\n        .btn-primary table td:hover {\n          background-color: #34495e !important; \n        }\n        .btn-primary a:hover {\n          background-color: #34495e !important;\n          border-color: #34495e !important; \n        } \n      }\n\n    \n  \n  \n    This is preheader text. Some clients will show this text as a preview.\n    \n      \n        &nbsp;\n        \n          \n\n            \n            \n\n              \n              \n                \n                  \n                    \n                      \n                        Hi there,\n                        Sometimes you just want to send a simple HTML email with a simple design and clear call to action. This is it.\n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      ${number}\n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                        This is a really simple email template. Its sole purpose is to get the recipient to click the button with no distractions.\n                        Good luck! Hope it works.\n                      \n                    \n                  \n                \n              \n\n            \n            \n            \n\n            \n            \n              \n                \n                  \n                    Company Inc, 3 Abbey Road, San Francisco CA 94102\n                     Don't like these emails? Unsubscribe.\n                  \n                \n                \n                  \n                    Powered by HTMLemail.\n                  \n                \n              \n            \n            \n\n          \n        \n        &nbsp;\n      \n    \n  \n\n`\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
