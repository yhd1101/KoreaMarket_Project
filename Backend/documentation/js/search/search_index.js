var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppConfigModule.html",[0,1.233,1,2.788]],["body/modules/AppConfigModule.html",[0,1.839,1,4.159,2,1.975,3,0.105,4,0.135,5,0.12,6,4.667,7,0.36,8,0.012,9,0.812,10,3.169,11,2.223,12,4.667,13,4.078,14,2.319,15,4.667,16,4.667,17,4.667,18,4.667,19,8.554,20,4.667,21,7.259,22,4.667,23,4.667,24,4.667,25,4.667,26,4.667,27,4.667,28,4.667,29,4.667,30,4.667,31,4.667,32,4.667,33,4.667,34,4.667,35,4.667,36,4.667,37,4.667,38,4.667,39,4.667,40,4.667,41,4.667,42,4.667,43,4.667,44,4.667,45,4.078,46,4.667,47,0.135,48,0.155,49,0.009,50,0.009]],["title/controllers/AppController.html",[51,1.615,52,2.992]],["body/controllers/AppController.html",[3,0.123,4,0.158,5,0.141,7,0.357,8,0.012,9,0.953,47,0.158,48,0.182,49,0.01,50,0.01,51,2.667,52,4.943,53,2.154,54,4.786,55,0.668,56,2.104,57,6.73,58,1.755,59,0.953,60,5.477,61,1.699,62,1.53,63,4.7,64,4.786,65,2.845,66,2.233,67,1.699,68,5.477]],["title/modules/AppModule.html",[0,1.233,69,2.992]],["body/modules/AppModule.html",[0,1.738,1,4.764,2,1.44,3,0.077,4,0.098,5,0.087,7,0.42,8,0.012,9,0.592,14,2.447,47,0.098,48,0.113,49,0.007,50,0.007,52,4.217,53,1.936,63,4.475,64,2.973,69,6.136,70,1.621,71,1.767,72,1.767,73,1.621,74,3.006,75,1.767,76,2.973,77,2.973,78,2.973,79,4.764,80,4.764,81,4.764,82,4.475,83,4.764,84,4.764,85,4.764,86,4.764,87,4.764,88,4.475,89,2.558,90,1.767,91,1.767,92,3.403,93,3.403,94,3.403,95,3.403,96,3.403,97,3.403,98,2.973,99,2.973,100,3.403,101,3.403,102,3.403,103,3.403,104,3.403]],["title/injectables/AppService.html",[63,2.619,105,0.789]],["body/injectables/AppService.html",[3,0.129,4,0.165,5,0.147,7,0.301,8,0.012,9,0.996,47,0.165,48,0.19,49,0.01,50,0.01,55,0.697,56,2.16,57,6.832,59,0.996,61,1.774,62,1.572,63,4.443,67,1.774,105,1.339,106,2.026,107,4.998,108,5.72,109,5.72,110,5.72]],["title/classes/Auth.html",[48,0.137,111,2.788]],["body/classes/Auth.html",[3,0.143,4,0.184,5,0.163,8,0.011,47,0.184,48,0.212,49,0.011,50,0.011,111,5.04,112,1.735,113,5.558]],["title/controllers/AuthController.html",[51,1.615,114,2.992]],["body/controllers/AuthController.html",[3,0.03,4,0.039,5,0.034,7,0.352,8,0.013,9,0.234,47,0.039,48,0.045,49,0.003,50,0.003,51,0.528,53,0.528,55,0.164,56,0.723,58,2.074,59,1.127,61,2.008,62,1.235,65,0.697,66,0.547,67,2.008,111,0.911,114,1.699,115,1.172,116,0.808,117,3.004,118,1.844,119,2.038,120,2.038,121,3.093,122,3.696,123,3.093,124,3.696,125,2.332,126,3.696,127,2.332,128,3.05,129,2.038,130,3.696,131,2.332,132,2.332,133,1.172,134,3.548,135,1.341,136,3.024,137,1.341,138,1.341,139,1.887,140,1.606,141,0.912,142,1.606,143,2.389,144,1.172,145,3.118,146,2.332,147,1.341,148,1.172,149,1.341,150,1.341,151,2.1,152,1.341,153,3.696,154,1.761,155,1.341,156,1.341,157,2.51,158,1.341,159,1.066,160,0.808,161,1.341,162,1.341,163,3.629,164,1.341,165,3.255,166,3.658,167,2.693,168,1.341,169,1.341,170,4.326,171,1.341,172,1.341,173,1.341,174,1.341,175,1.341,176,1.341,177,1.341,178,1.341,179,1.341,180,1.341,181,1.172,182,3.118,183,1.341,184,1.341,185,1.172,186,1.341,187,2.038,188,2.332,189,1.341,190,2.332,191,1.341,192,1.341,193,1.341,194,2.254,195,1.341,196,1.341,197,1.341,198,2.038,199,2.51,200,1.341,201,1.341,202,2.624,203,1.341,204,2.332,205,2.008,206,1.341,207,1.333,208,0.808,209,1.341,210,0.911,211,0.767,212,0.977,213,0.808,214,2.254,215,3.093,216,3.346,217,2.254,218,0.856,219,0.977,220,0.459,221,0.547,222,1.863,223,1.061,224,0.911,225,1.584,226,1.172,227,1.172,228,1.584,229,1.172,230,0.977,231,1.341,232,2.843,233,0.911,234,0.767,235,0.911,236,1.172,237,2.038,238,0.977,239,1.341,240,0.977,241,1.341,242,0.977,243,1.341,244,1.172,245,0.808,246,0.977,247,1.341,248,1.341,249,1.341,250,1.341,251,1.341,252,2.492,253,1.341,254,1.341,255,1.341,256,1.341,257,1.341,258,1.341,259,1.341,260,3.05,261,5.224,262,1.341,263,1.341,264,1.341,265,2.41,266,0.977,267,2.972,268,3.093,269,1.341,270,1.341,271,0.977,272,1.172,273,1.341,274,1.061,275,0.856,276,1.584,277,1.341,278,0.856,279,1.341,280,1.341,281,1.341,282,1.341,283,1.341,284,1.341,285,1.341,286,1.341,287,1.341,288,1.341,289,2.038,290,1.341,291,1.341,292,2.332,293,1.341,294,3.093,295,1.341,296,2.332,297,1.341,298,1.341,299,1.341,300,1.341,301,1.341,302,1.341,303,1.341,304,1.341,305,1.341,306,1.341,307,1.341,308,2.332,309,1.341,310,2.332,311,1.341,312,1.341,313,0.977,314,1.341,315,2.332,316,1.341,317,1.341]],["title/modules/AuthModule.html",[0,1.233,79,2.788]],["body/modules/AuthModule.html",[0,1.799,2,1.532,3,0.082,4,0.105,5,0.093,7,0.421,8,0.012,9,0.63,10,3.496,11,1.724,14,2.558,47,0.105,48,0.12,49,0.007,50,0.007,53,2.024,70,1.724,71,1.88,72,1.88,73,1.724,74,3.111,75,1.88,79,5.637,82,4.569,88,4.569,89,2.674,90,1.88,91,1.88,98,3.163,99,3.163,114,4.365,222,4.316,223,2.862,318,3.163,319,3.62,320,3.163,321,4.865,322,4.865,323,4.865,324,4.865,325,4.865,326,3.62,327,3.62,328,2.862,329,5.148,330,1.724,331,3.62,332,3.62,333,6.893,334,3.62,335,3.62,336,3.62,337,3.62,338,3.62,339,3.163]],["title/injectables/AuthService.html",[105,0.789,222,2.474]],["body/injectables/AuthService.html",[3,0.035,4,0.045,5,0.04,7,0.372,8,0.012,9,0.273,11,0.747,45,1.37,47,0.045,48,0.052,49,0.004,50,0.004,55,0.191,56,0.827,59,1.14,61,1.987,62,1.657,66,1.674,67,1.882,105,0.512,106,0.555,117,2.924,118,2.109,119,2.33,120,2.33,128,3.646,129,2.33,133,2.33,134,3.125,139,2.053,140,1.748,141,0.874,142,1.748,143,2.68,144,2.33,145,3.125,148,2.33,151,2.57,154,2.677,159,1.591,160,0.945,181,2.33,182,3.125,185,2.33,198,2.33,199,1.065,202,2.63,205,1.503,211,0.896,221,0.639,222,1.607,224,1.065,225,1.811,226,1.37,227,1.37,228,3.125,229,1.37,236,1.37,237,2.33,244,1.37,245,0.945,252,2.825,265,2.534,267,2.772,274,2.109,275,1.701,278,2.219,289,2.33,328,1.24,340,1.37,341,2.667,342,2.33,343,2.86,344,2.667,345,2.667,346,4.105,347,1.173,348,1.37,349,2.487,350,5.338,351,3.051,352,3.405,353,3.479,354,3.638,355,1.568,356,1.568,357,2.667,358,1.568,359,2.751,360,1.568,361,2.33,362,1.568,363,2.667,364,1.568,365,1.568,366,2.667,367,1.568,368,1.568,369,2.667,370,1.568,371,1.568,372,1.568,373,1.568,374,1.568,375,1.568,376,1.524,377,1.24,378,1.568,379,1.37,380,1.24,381,0.945,382,1.37,383,1.811,384,1.37,385,1.24,386,1.568,387,1.943,388,1.568,389,0.639,390,0.717,391,2.286,392,1.568,393,1.24,394,1.24,395,1.37,396,3.479,397,1.568,398,3.479,399,2.667,400,1.568,401,1.24,402,3.587,403,1.568,404,1.568,405,2.667,406,1.568,407,1.568,408,2.346,409,1.877,410,1.385,411,1.568,412,1.568,413,1.37,414,3.041,415,2.667,416,3.479,417,1.568,418,2.667,419,1.568,420,3.479,421,1.568,422,1.568,423,1.568,424,2.667,425,1.568,426,1.568,427,1.568,428,1.37,429,1.568,430,1.568,431,1.451,432,2.667,433,1.568,434,1.24,435,2.33,436,1.568,437,1.568,438,1.568,439,1.568,440,1.568,441,1.568,442,1.568,443,1.943,444,1.37,445,1.37,446,1.143,447,1.568,448,1.568,449,1.065,450,1.143,451,1.568,452,1.568,453,2.667,454,1.568,455,2.33,456,1.568,457,1.568,458,1.065]],["title/classes/BaseAPIDocument.html",[48,0.137,459,3.247]],["body/classes/BaseAPIDocument.html",[3,0.109,4,0.14,5,0.124,7,0.255,8,0.012,47,0.14,48,0.161,49,0.009,50,0.009,55,0.59,56,1.946,59,1.092,61,1.502,67,1.502,112,1.321,140,1.321,141,0.661,220,1.658,267,2.917,343,4.466,409,2.869,413,4.231,435,4.231,459,4.961,460,4.231,461,1.767,462,6.96,463,7.362,464,2.129,465,3.528,466,6.96,467,4.842,468,4.842,469,4.842,470,4.842,471,4.842,472,4.842,473,4.842,474,4.842,475,4.842,476,4.842,477,4.842,478,4.842,479,3.829,480,4.231,481,4.842,482,4.842]],["title/classes/ChangePasswordDto.html",[48,0.137,134,2.788]],["body/classes/ChangePasswordDto.html",[3,0.1,4,0.128,5,0.114,7,0.311,8,0.012,47,0.128,48,0.197,49,0.009,50,0.009,55,0.54,58,1.897,59,1.031,62,1.605,112,1.209,128,4.857,134,4.021,136,2.82,141,0.808,220,1.518,267,4.466,410,3.075,461,1.667,464,3.127,483,5.825,484,3.506,485,3.567,486,4.286,487,3.874,488,5.625,489,4.681,490,3.874,491,4.434,492,4.466,493,4.434,494,3.627,495,3.231,496,3.231,497,2.303,498,3.231,499,3.506,500,3.506,501,3.506,502,3.231,503,3.506,504,3.506]],["title/entities/Comment.html",[505,1.956,506,2.133]],["body/entities/Comment.html",[3,0.095,4,0.122,5,0.109,7,0.367,8,0.012,47,0.122,48,0.141,49,0.008,50,0.008,55,0.515,58,2.084,59,1.132,62,1.292,141,0.887,205,2.407,221,1.722,343,4.533,389,3.269,390,1.931,461,1.613,505,2.729,506,2.976,507,2.193,508,3.69,509,3.918,510,4.416,511,4.223,512,4.53,513,4.223,514,4.223,515,4.223,516,4.223,517,4.416,518,4.738,519,2.011,520,3.275,521,2.868,522,1.31,523,4.223,524,4.223]],["title/controllers/CommentController.html",[51,1.615,525,2.992]],["body/controllers/CommentController.html",[3,0.084,4,0.107,5,0.095,7,0.38,8,0.012,9,0.647,47,0.107,48,0.124,49,0.008,50,0.008,51,1.461,53,1.461,55,0.453,56,1.626,58,1.68,59,0.913,61,1.626,62,1.371,65,1.929,66,1.515,67,1.626,116,2.238,117,2.742,136,2.894,139,1.68,140,1.43,141,0.829,142,1.43,143,2.398,157,2.522,159,2.398,165,3.773,170,4.21,194,2.707,207,2.997,208,2.238,210,2.522,213,2.238,214,3.82,216,3.82,217,3.82,218,2.369,219,2.707,220,1.272,232,2.522,233,2.522,234,2.123,235,2.522,252,2.219,260,2.707,265,1.41,266,2.707,267,2.238,271,2.707,506,3.428,525,3.82,526,3.246,527,5.309,528,5.243,529,3.714,530,4.836,531,3.714,532,3.714,533,3.246,534,3.159,535,3.714,536,2.937,537,3.714,538,3.714,539,3.56,540,3.714,541,3.875,542,3.246,543,3.246,544,2.937,545,3.714,546,3.714,547,3.714,548,3.714,549,3.714,550,3.714]],["title/modules/CommentModule.html",[0,1.233,80,2.788]],["body/modules/CommentModule.html",[0,2.131,2,2.137,3,0.114,4,0.146,5,0.13,7,0.407,8,0.012,9,0.879,14,2.509,47,0.146,48,0.168,49,0.009,50,0.009,53,2.534,70,2.405,71,2.622,72,2.622,73,2.405,74,3.687,75,2.622,80,5.366,89,3.347,90,2.622,91,2.622,506,2.622,525,5.173,541,5.04,542,4.412,551,4.412,552,4.412,553,5.049,554,3.22,555,2.405,556,5.049,557,3.679,558,5.049]],["title/injectables/CommentService.html",[105,0.789,541,2.619]],["body/injectables/CommentService.html",[3,0.087,4,0.111,5,0.099,7,0.384,8,0.012,9,0.669,47,0.111,48,0.128,49,0.008,50,0.008,55,0.469,56,1.666,59,1.078,61,1.666,62,1.397,67,1.666,105,1.032,106,1.362,117,2.772,139,1.984,140,1.689,141,0.845,142,1.689,143,2.457,159,3.065,205,2.333,211,2.198,221,1.568,252,2.62,265,2.039,347,2.362,376,2.198,391,1.911,408,2.198,409,1.758,506,3.481,519,1.832,527,4.694,530,4.659,541,3.426,543,3.36,544,3.04,555,1.832,557,2.802,559,3.36,560,5.372,561,3.845,562,4.551,563,3.845,564,5.372,565,5.372,566,3.845,567,5.372,568,3.845,569,2.611,570,3.845,571,5.372,572,3.845,573,3.845,574,3.845,575,3.845,576,3.845,577,3.845,578,3.36,579,3.04,580,3.04]],["title/classes/CommonEntity.html",[48,0.137,520,2.347]],["body/classes/CommonEntity.html",[3,0.113,4,0.145,5,0.129,7,0.264,8,0.012,47,0.145,48,0.167,49,0.009,50,0.009,55,0.611,58,2.267,59,1.232,62,1.447,112,1.367,141,0.965,159,3.236,343,4.687,461,1.807,519,2.388,520,3.667,581,4.38,582,7.075,583,7.075,584,5.898,585,7.075,586,5.013,587,6.415,588,5.013,589,7.075,590,5.013,591,5.013,592,5.013]],["title/classes/ConfirmEmailDto.html",[48,0.137,145,2.788]],["body/classes/ConfirmEmailDto.html",[3,0.129,4,0.165,5,0.147,8,0.012,47,0.165,48,0.19,49,0.01,50,0.01,55,0.697,59,1.213,62,1.764,112,1.56,141,0.95,145,4.731,151,3.435,428,6.564,461,1.962,593,6.564,594,4.998,595,5.72,596,5.72]],["title/classes/CreateAuthDto.html",[48,0.137,597,2.992]],["body/classes/CreateAuthDto.html",[3,0.143,4,0.183,5,0.163,8,0.011,47,0.183,48,0.211,49,0.011,50,0.011,112,1.727,597,5.394,598,5.533,599,5.007]],["title/classes/CreateCommentDto.html",[48,0.137,530,2.619]],["body/classes/CreateCommentDto.html",[3,0.109,4,0.14,5,0.124,7,0.366,8,0.012,47,0.14,48,0.208,49,0.009,50,0.009,55,0.588,58,2.006,59,1.09,62,1.412,112,1.316,136,2.982,141,0.854,220,1.652,389,3.183,390,2.207,461,1.763,464,3.233,485,3.772,486,4.43,492,4.186,494,3.781,497,2.506,506,2.506,509,4.59,530,3.993,600,6.072,601,3.816,602,4.217,603,4.825,604,5.494,605,4.217,606,4.825]],["title/classes/CreateOrderDto.html",[48,0.137,607,2.619]],["body/classes/CreateOrderDto.html",[3,0.143,4,0.183,5,0.163,8,0.011,47,0.183,48,0.211,49,0.011,50,0.011,112,1.727,607,4.722,608,5.533,609,5.007]],["title/classes/CreateProductDto.html",[48,0.137,610,2.619]],["body/classes/CreateProductDto.html",[3,0.072,4,0.093,5,0.083,7,0.248,8,0.012,47,0.093,48,0.157,49,0.007,50,0.007,55,0.391,58,2.277,59,1.237,62,1.809,112,0.876,136,3.385,140,1.527,141,1.015,142,1.989,220,1.099,275,2.048,458,2.18,461,1.329,464,3.476,485,4.281,486,4.763,492,3.717,494,3.967,497,1.667,509,4.142,610,3.01,611,6.371,612,2.539,613,5.745,614,4.79,615,5.745,616,5.745,617,5.745,618,3.21,619,3.21,620,4.72,621,3.21,622,3.21,623,4.72,624,3.21,625,6.17,626,3.21,627,3.21,628,2.451,629,3.21,630,3.21,631,3.21,632,3.21,633,3.21,634,5.392,635,4.891,636,4.72,637,2.805,638,3.21,639,3.21]],["title/classes/CreateRatingDto.html",[48,0.137,640,2.619]],["body/classes/CreateRatingDto.html",[3,0.126,4,0.162,5,0.144,7,0.295,8,0.012,47,0.162,48,0.187,49,0.01,50,0.01,55,0.683,59,1.198,112,1.529,141,0.939,205,2.236,221,2.286,461,1.938,628,3.574,640,4.39,641,6.507,642,4.434,643,6.507,644,4.256,645,5.607,646,5.607]],["title/classes/CreateReservationDto.html",[48,0.137,647,2.619]],["body/classes/CreateReservationDto.html",[3,0.086,4,0.11,5,0.098,7,0.324,8,0.012,47,0.11,48,0.178,49,0.008,50,0.008,55,0.465,58,2.253,59,1.224,62,1.507,112,1.04,136,3.349,141,0.959,154,2.544,220,1.306,275,2.433,389,2.971,390,1.744,409,1.744,431,2.075,461,1.504,464,3.455,485,4.236,486,4.735,492,4.236,494,3.964,497,1.981,506,1.981,509,4.236,584,5.559,602,3.333,604,4.874,605,3.333,647,3.407,648,6.367,649,3.016,650,6.143,651,6.143,652,5.386,653,3.814,654,3.814,655,3.814,656,3.892,657,3.814,658,3.814,659,3.814,660,5.341]],["title/classes/CreateUserDto.html",[48,0.137,202,2.347]],["body/classes/CreateUserDto.html",[3,0.078,4,0.1,5,0.089,7,0.307,8,0.012,47,0.1,48,0.165,49,0.007,50,0.007,55,0.42,58,2.167,59,1.177,62,1.708,112,0.939,136,3.038,140,1.589,141,0.923,142,1.922,151,3.222,202,2.839,220,1.179,410,3.512,461,1.399,464,3.268,485,3.843,486,4.479,488,5.043,489,3.928,492,3.843,494,3.833,495,2.51,496,2.51,497,1.789,498,2.51,499,5.347,500,2.723,501,2.723,502,2.51,503,2.723,504,3.928,635,4.341,661,6.156,662,2.51,663,4.246,664,3.861,665,3.009,666,3.444,667,5.091,668,3.444,669,3.444,670,3.444,671,3.444,672,3.444,673,3.444,674,3.444,675,3.444,676,4.341,677,5.091,678,1.874,679,3.009,680,2.51,681,2.51]],["title/modules/DatabaseModule.html",[0,1.233,81,2.788]],["body/modules/DatabaseModule.html",[0,1.918,2,2.107,3,0.112,4,0.144,5,0.128,7,0.391,8,0.012,9,0.867,10,4.337,11,2.371,14,3.174,47,0.144,48,0.166,49,0.009,50,0.009,81,4.337,141,0.679,351,4.031,377,3.936,410,2.585,431,3.475,505,2.371,507,2.585,554,3.175,555,2.371,667,4.35,682,4.978,683,6.387,684,4.978,685,4.35,686,4.35,687,4.978,688,3.936,689,4.978,690,4.35,691,4.978,692,4.978,693,4.978,694,4.978,695,4.978,696,4.978,697,4.978,698,4.978,699,4.978]],["title/modules/EmailModule.html",[0,1.233,82,2.619]],["body/modules/EmailModule.html",[0,2.142,2,2.16,3,0.115,4,0.148,5,0.131,7,0.375,8,0.012,9,0.888,10,4.407,11,2.431,14,2.536,47,0.148,48,0.17,49,0.009,50,0.009,70,2.431,71,2.651,72,2.651,73,2.431,74,3.706,75,3.706,82,5.135,89,3.37,90,2.651,91,2.651,352,5.349,382,4.459,700,4.459,701,4.459,702,4.459,703,5.103]],["title/injectables/EmailService.html",[105,0.789,352,2.619]],["body/injectables/EmailService.html",[3,0.101,4,0.129,5,0.115,7,0.376,8,0.012,9,0.779,11,2.132,47,0.129,48,0.149,49,0.009,50,0.009,55,0.546,56,1.848,59,1.166,61,1.388,65,2.325,66,1.825,67,1.388,105,1.145,106,1.585,111,3.039,139,1.909,140,1.625,141,0.914,142,1.625,205,1.344,339,3.911,347,1.968,351,4.37,352,3.8,391,3.328,461,1.678,704,3.911,705,6.697,706,5.958,707,3.261,708,5.958,709,5.958,710,6.697,711,4.476,712,4.476,713,6.697,714,4.476,715,5.958,716,3.911,717,4.476,718,4.476,719,4.476,720,4.476,721,4.476,722,4.476,723,4.476]],["title/injectables/GoogleAuthGuard.html",[105,0.789,238,2.992]],["body/injectables/GoogleAuthGuard.html",[3,0.131,4,0.168,5,0.149,7,0.398,8,0.012,9,1.012,47,0.168,48,0.194,49,0.01,50,0.01,105,1.352,106,2.059,238,5.126,330,2.769,522,2.182,664,3.02,678,3.163,724,5.08,725,3.708,726,7.035,727,3.948]],["title/injectables/GoogleAuthStrategy.html",[105,0.789,321,2.788]],["body/injectables/GoogleAuthStrategy.html",[3,0.072,4,0.092,5,0.082,7,0.361,8,0.012,9,0.556,11,1.522,47,0.092,48,0.106,49,0.007,50,0.007,55,0.39,56,1.459,59,0.819,61,0.991,62,1.548,66,1.918,105,0.904,106,1.132,117,2.118,139,1.507,140,1.679,141,0.642,142,1.283,151,2.553,163,2.689,205,1.412,211,1.827,252,1.991,265,2.49,278,4.378,321,3.195,330,1.522,347,2.068,349,3.526,351,3.923,376,2.689,381,1.926,391,2.338,408,1.827,409,1.462,446,2.329,449,2.17,450,2.329,522,1.459,663,2.329,664,3.408,678,1.739,681,2.329,707,2.329,728,4.878,729,2.038,730,3.791,731,3.791,732,4.704,733,3.791,734,2.527,735,3.196,736,5.582,737,4.414,738,6.157,739,2.793,740,4.704,741,1.926,742,2.527,743,2.793,744,2.17,745,2.527,746,3.196,747,2.793,748,3.196,749,2.527,750,3.196,751,2.793,752,4.414,753,4.878,754,2.793,755,4.878,756,5.582,757,3.196,758,2.329,759,3.196,760,2.793,761,2.793,762,3.196,763,4.111,764,2.793,765,2.793,766,2.527,767,2.793,768,2.793,769,4.111,770,2.793]],["title/classes/HttpExceptionFilter.html",[48,0.137,771,3.247]],["body/classes/HttpExceptionFilter.html",[3,0.096,4,0.123,5,0.11,7,0.303,8,0.012,9,0.742,47,0.123,48,0.142,49,0.008,50,0.008,55,0.519,56,1.788,59,0.742,61,1.321,62,1.65,112,1.162,139,1.365,140,1.162,141,0.581,142,1.162,167,4.2,246,3.105,265,2.775,276,3.914,376,2.435,409,2.636,449,4.436,455,6.116,628,2.213,681,4.2,688,5.166,771,4.558,772,5.037,773,3.723,774,5.037,775,6.533,776,5.764,777,6.999,778,4.261,779,4.261,780,4.2,781,4.261,782,3.723,783,4.261,784,4.261,785,4.261,786,6.533,787,4.261,788,4.261,789,5.166,790,5.166,791,3.723,792,5.764,793,5.764,794,5.764,795,4.261]],["title/injectables/JwtAuthGuard.html",[105,0.789,234,2.347]],["body/injectables/JwtAuthGuard.html",[3,0.134,4,0.172,5,0.153,7,0.375,8,0.012,9,1.033,47,0.172,48,0.198,49,0.01,50,0.01,105,1.369,106,2.102,234,4.072,330,2.827,522,2.209,725,3.786,727,4.031,796,5.186,797,7.124]],["title/injectables/JwtAuthStrategy.html",[105,0.789,322,2.788]],["body/injectables/JwtAuthStrategy.html",[3,0.097,4,0.124,5,0.11,7,0.397,8,0.012,9,0.746,11,2.042,47,0.124,48,0.143,49,0.008,50,0.008,55,0.522,56,1.795,59,1.008,61,1.329,67,1.329,105,1.112,106,1.518,117,2.487,139,1.854,140,1.579,141,0.79,142,1.579,143,1.96,322,3.93,330,2.042,347,2.545,348,3.746,349,3.752,351,4.412,381,2.583,383,4.765,384,3.746,391,2.876,414,3.746,479,3.389,522,1.795,729,2.734,730,2.911,731,2.911,733,3.93,741,2.583,744,2.911,798,5.726,799,5.057,800,4.286,801,5.788,802,4.286,803,4.286,804,4.286,805,4.286,806,4.286,807,4.286,808,4.286,809,4.286]],["title/classes/KakaoAuthGuard.html",[48,0.137,240,2.992]],["body/classes/KakaoAuthGuard.html",[3,0.134,4,0.172,5,0.153,7,0.376,8,0.012,47,0.172,48,0.198,49,0.01,50,0.01,112,1.626,240,5.204,330,2.839,522,2.215,664,3.096,678,3.243,725,3.802,727,4.048,810,5.208,811,7.142]],["title/injectables/KakaoAuthStrategy.html",[105,0.789,323,2.788]],["body/injectables/KakaoAuthStrategy.html",[3,0.076,4,0.097,5,0.086,7,0.367,8,0.012,9,0.584,11,1.598,47,0.097,48,0.112,49,0.007,50,0.007,55,0.409,56,1.511,59,0.848,61,1.04,62,1.575,66,1.987,105,0.937,106,1.188,117,2.178,139,1.562,140,1.719,141,0.665,142,1.329,151,2.625,163,2.786,205,1.463,211,1.917,252,2.063,265,2.649,278,4.019,323,3.31,330,1.598,347,2.143,349,3.58,351,3.99,376,2.786,381,2.021,391,2.422,408,1.917,409,1.534,446,2.444,449,2.278,450,2.444,522,1.511,663,2.444,664,3.476,678,1.825,707,2.444,729,2.14,730,3.898,731,3.898,733,3.898,734,2.652,737,4.539,741,2.021,744,2.278,745,2.652,749,2.652,752,3.854,753,5.016,755,2.931,760,2.931,761,2.931,763,4.259,764,2.931,765,2.931,766,2.652,767,2.931,768,2.931,769,4.259,770,2.931,812,5.016,813,4.874,814,2.931,815,5.016,816,3.354,817,4.259,818,2.652,819,3.354,820,3.354,821,5.74,822,3.354,823,3.354,824,3.354]],["title/injectables/LocalAuthGuard.html",[105,0.789,230,2.992]],["body/injectables/LocalAuthGuard.html",[3,0.131,4,0.168,5,0.149,7,0.398,8,0.012,9,1.012,47,0.168,48,0.194,49,0.01,50,0.01,105,1.352,106,2.059,230,5.126,330,2.769,522,2.182,664,3.02,678,3.163,725,3.708,727,3.948,825,5.08,826,7.035]],["title/injectables/LocalAuthStrategy.html",[105,0.789,324,2.788]],["body/injectables/LocalAuthStrategy.html",[3,0.099,4,0.127,5,0.113,7,0.389,8,0.012,9,0.765,47,0.127,48,0.146,49,0.008,50,0.008,55,0.535,56,1.825,59,1.024,61,1.362,62,1.716,65,2.281,67,1.362,105,1.131,106,1.556,117,2.518,139,1.885,140,1.605,141,0.803,142,1.605,151,3.034,163,3.363,205,1.767,221,1.791,222,4.582,223,3.473,324,3.996,330,2.092,347,1.931,410,3.681,522,1.825,680,3.201,729,2.802,730,2.983,731,2.983,733,3.996,741,2.646,744,2.983,799,5.141,827,5.797,828,4.392,829,4.392,830,5.884,831,4.392,832,4.392,833,4.392]],["title/classes/LoginUserDto.html",[48,0.137,228,2.788]],["body/classes/LoginUserDto.html",[3,0.109,4,0.14,5,0.125,7,0.331,8,0.012,47,0.14,48,0.209,49,0.009,50,0.009,55,0.592,58,2.015,59,1.095,62,1.663,112,1.325,136,2.995,141,0.858,151,3.492,220,1.664,228,4.27,410,3.966,461,1.771,464,3.241,485,3.788,486,4.441,492,3.788,494,3.793,495,3.54,496,3.54,497,2.523,498,3.54,662,3.54,665,4.246,676,5.494,679,4.246,834,6.092,835,4.859,836,4.859,837,4.859]],["title/injectables/NaverAuthGuard.html",[105,0.789,242,2.992]],["body/injectables/NaverAuthGuard.html",[3,0.131,4,0.168,5,0.149,7,0.398,8,0.012,9,1.012,47,0.168,48,0.194,49,0.01,50,0.01,105,1.352,106,2.059,242,5.126,330,2.769,522,2.182,664,3.02,678,3.163,725,3.708,727,3.948,838,5.08,839,7.035]],["title/injectables/NaverAuthStrategy.html",[105,0.789,325,2.788]],["body/injectables/NaverAuthStrategy.html",[3,0.09,4,0.115,5,0.102,7,0.388,8,0.012,9,0.692,11,1.893,47,0.115,48,0.132,49,0.008,50,0.008,55,0.484,56,1.705,59,0.957,61,1.233,62,1.665,66,2.241,105,1.056,106,1.408,117,2.391,139,1.761,140,1.719,141,0.75,142,1.499,151,1.818,163,3.142,278,4.918,313,2.896,325,3.733,330,1.893,347,2.417,349,3.76,351,4.219,381,2.395,391,2.731,522,1.705,664,2.064,678,2.162,707,2.896,729,2.535,730,4.279,731,4.279,733,4.279,734,3.143,737,4.982,739,3.473,741,2.395,744,2.699,745,3.143,747,3.473,749,3.143,751,3.473,752,3.143,814,3.473,815,5.506,817,4.803,840,5.506,841,5.496,842,3.473,843,3.974,844,3.974,845,3.974,846,3.974]],["title/classes/NewPasswordDto.html",[48,0.137,182,2.788]],["body/classes/NewPasswordDto.html",[3,0.111,4,0.142,5,0.126,7,0.333,8,0.012,47,0.142,48,0.211,49,0.009,50,0.009,55,0.598,58,1.573,59,0.855,62,1.428,112,1.339,128,5.105,136,2.338,141,0.67,182,4.298,220,1.681,410,3.288,461,1.782,464,2.783,484,3.882,485,2.958,486,3.814,487,4.29,488,5.852,489,5.005,490,4.29,492,3.814,494,3.444,495,3.577,496,3.577,497,2.55,498,3.577,499,3.882,500,3.882,501,3.882,502,3.577,503,3.882,504,3.882,847,5.531,848,4.909]],["title/classes/Order.html",[48,0.137,849,2.619]],["body/classes/Order.html",[3,0.143,4,0.184,5,0.163,8,0.011,47,0.184,48,0.212,49,0.011,50,0.011,112,1.735,849,4.734,850,5.558]],["title/controllers/OrderController.html",[51,1.615,851,2.992]],["body/controllers/OrderController.html",[3,0.081,4,0.104,5,0.092,7,0.361,8,0.012,9,0.624,47,0.104,48,0.119,49,0.007,50,0.007,51,1.409,53,1.409,55,0.437,56,1.585,58,2.2,59,1.195,61,2.13,62,1.725,65,1.861,66,1.461,67,2.13,116,2.159,139,2.081,140,1.772,141,0.886,142,1.772,159,3.265,194,2.611,207,2.921,208,3.589,213,2.159,218,2.285,220,1.227,534,3.079,539,3.471,607,4.554,849,2.285,851,3.724,852,3.131,853,5.675,854,4.466,855,4.466,856,4.041,857,3.131,858,3.583,859,3.583,860,3.131,861,3.583,862,3.131,863,4.041,864,3.583,865,3.131,866,5.102,867,5.11,868,3.583,869,2.833,870,2.433,871,3.8,872,3.131,873,3.131,874,4.041,875,3.131,876,3.583,877,3.583,878,3.583,879,3.583,880,3.583,881,3.583,882,3.583,883,3.583,884,3.583,885,3.583,886,3.583]],["title/modules/OrderModule.html",[0,1.233,83,2.788]],["body/modules/OrderModule.html",[0,2.175,2,2.232,3,0.119,4,0.152,5,0.136,7,0.381,8,0.012,9,0.918,47,0.152,48,0.176,49,0.01,50,0.01,53,2.605,70,2.512,71,2.739,72,2.739,73,2.512,74,3.762,75,2.739,83,5.426,89,3.441,90,2.739,91,2.739,851,5.278,871,5.096,872,4.608,887,4.608,888,4.608,889,5.274,890,5.274]],["title/injectables/OrderService.html",[105,0.789,871,2.619]],["body/injectables/OrderService.html",[3,0.087,4,0.112,5,0.1,7,0.327,8,0.012,9,0.675,47,0.112,48,0.129,49,0.008,50,0.008,55,0.473,56,1.675,59,1.231,61,2.33,62,1.595,67,2.193,105,1.038,106,1.373,139,2.155,140,1.835,141,0.918,142,1.835,159,3.349,409,1.773,534,3.255,607,4.511,628,4.043,849,4.511,853,5.877,854,4.721,855,4.721,856,4.272,857,4.721,860,4.721,862,4.721,865,4.721,866,5.103,871,3.446,873,3.388,874,4.272,875,3.388,891,3.388,892,3.877,893,3.877,894,3.877,895,3.877,896,3.877,897,6.18,898,3.877,899,3.877,900,3.877]],["title/classes/PageDto.html",[48,0.137,901,2.788]],["body/classes/PageDto.html",[3,0.102,4,0.13,5,0.116,7,0.353,8,0.012,47,0.13,48,0.199,49,0.009,50,0.009,55,0.549,58,1.917,59,1.17,66,3.123,112,1.229,139,1.443,140,1.229,141,0.977,142,1.229,220,1.542,276,5.06,347,1.98,431,3.255,461,1.685,494,3.655,497,2.339,634,5.871,901,4.063,902,3.936,903,5.695,904,5.983,905,6.511,906,5.202,907,5.983,908,4.504,909,4.504,910,4.504,911,3.282,912,3.936,913,4.504,914,4.504]],["title/classes/PageMetaDto.html",[48,0.137,906,2.788]],["body/classes/PageMetaDto.html",[3,0.084,4,0.107,5,0.095,7,0.276,8,0.012,47,0.107,48,0.124,49,0.008,50,0.008,55,0.453,58,2.315,59,1.292,66,3.37,112,1.013,139,1.19,140,1.013,141,1.013,142,1.013,220,1.272,347,2.305,458,2.522,461,1.476,494,4.376,628,3.938,656,4.809,903,2.707,906,3.56,915,5.996,916,3.246,917,6.076,918,6.076,919,5.504,920,5.309,921,6.076,922,5.309,923,3.714,924,4.809,925,5.243,926,3.714,927,3.714,928,3.714,929,3.714,930,3.714,931,3.714,932,2.937,933,3.714,934,2.238,935,5.309,936,3.714,937,4.581,938,3.714,939,3.714,940,3.714,941,3.714,942,3.714,943,3.714]],["title/interfaces/PageMetaDtoParametersInterface.html",[924,2.992,944,2.04]],["body/interfaces/PageMetaDtoParametersInterface.html",[3,0.126,4,0.161,5,0.144,7,0.294,8,0.012,47,0.161,49,0.01,50,0.01,55,0.681,141,0.937,461,1.933,628,3.861,903,4.07,911,4.07,919,6.132,924,5.003,932,4.416,934,4.995,944,2.775,945,3.562,946,4.88,947,4.88,948,4.416]],["title/classes/PageOptionsDto.html",[48,0.137,934,2.474]],["body/classes/PageOptionsDto.html",[3,0.082,4,0.105,5,0.094,7,0.344,8,0.012,47,0.105,48,0.2,49,0.007,50,0.007,55,0.445,58,1.928,59,1.14,66,3.131,67,1.131,112,0.995,141,0.98,142,1.959,220,1.249,434,2.884,458,5.125,461,1.457,464,3.376,465,4.383,497,1.895,628,3.836,677,5.721,849,3.837,915,5.467,920,5.257,922,5.257,934,3.118,935,3.187,937,3.187,949,3.187,950,5.176,951,6.016,952,6.041,953,6.016,954,3.648,955,3.648,956,3.648,957,5.176,958,3.648,959,3.648,960,4.523,961,5.176,962,5.176,963,3.648,964,3.648,965,3.648,966,3.648,967,6.547,968,3.648,969,3.648,970,6.016,971,3.187,972,3.648,973,3.187,974,3.187,975,3.648,976,5.176,977,5.176,978,3.648]],["title/entities/Product.html",[389,1.674,505,1.956]],["body/entities/Product.html",[3,0.064,4,0.082,5,0.073,7,0.327,8,0.012,47,0.082,48,0.094,49,0.006,50,0.006,55,0.344,58,2.386,59,1.296,62,1.703,140,1.413,141,1.016,142,1.578,154,3.49,205,2.044,221,1.15,245,1.7,343,4.779,389,1.747,401,2.231,431,3.987,461,1.207,464,1.24,505,2.041,506,3.537,507,1.465,509,3.122,510,4.976,512,2.231,517,3.519,518,3.122,519,1.344,520,2.449,521,1.916,522,0.875,557,2.056,613,4.528,614,3.775,615,4.528,616,4.528,617,4.528,628,2.691,637,2.465,656,3.122,979,2.465,980,4.097,981,5.181,982,4.528,983,2.821,984,6.552,985,6.552,986,2.821,987,2.465,988,4.285,989,2.821,990,3.744,991,2.821,992,2.231,993,2.821,994,2.821,995,2.821,996,2.821,997,2.821,998,2.465,999,2.821,1000,2.821,1001,2.821,1002,2.821,1003,3.388,1004,3.744,1005,2.821,1006,2.465,1007,2.821,1008,2.465]],["title/controllers/ProductController.html",[51,1.615,1009,2.992]],["body/controllers/ProductController.html",[3,0.053,4,0.068,5,0.06,7,0.357,8,0.013,9,0.408,47,0.068,48,0.078,49,0.005,50,0.005,51,0.921,53,0.921,55,0.285,56,1.15,58,1.829,59,0.994,61,1.77,62,1.653,65,1.216,66,0.955,67,1.883,116,1.411,117,2.876,136,3.381,139,1.829,140,1.557,141,0.828,142,1.557,143,2.395,157,1.59,159,3.016,160,1.411,163,2.12,165,2.993,170,3.34,207,2.632,208,1.411,210,1.59,212,2.702,213,1.411,214,2.702,216,4.424,217,2.702,218,1.494,219,1.706,220,0.802,232,1.59,233,1.59,234,1.339,235,1.59,252,2.569,260,4.159,265,1.987,266,1.706,267,1.411,271,1.706,272,2.046,389,2.894,390,1.071,534,2.234,536,1.852,539,1.59,610,4.787,614,4.159,856,1.852,863,1.852,870,2.518,901,1.59,911,1.706,934,3.658,948,1.852,1009,2.702,1010,2.046,1011,4.604,1012,3.709,1013,4.023,1014,3.709,1015,4.604,1016,2.342,1017,2.342,1018,2.342,1019,2.342,1020,2.342,1021,2.342,1022,2.342,1023,2.342,1024,2.342,1025,2.046,1026,2.046,1027,2.342,1028,2.342,1029,2.046,1030,2.342,1031,2.342,1032,2.342,1033,2.342,1034,2.342,1035,2.937,1036,2.046,1037,1.852,1038,1.852,1039,2.046,1040,2.342,1041,2.342,1042,2.342,1043,4.023,1044,2.342,1045,2.342,1046,2.342,1047,2.046,1048,3.241,1049,2.342,1050,2.342,1051,2.342,1052,2.342,1053,2.342,1054,2.342,1055,2.342]],["title/interfaces/ProductInterface.html",[944,2.04,1056,3.247]],["body/interfaces/ProductInterface.html",[3,0.13,4,0.167,5,0.149,7,0.305,8,0.012,47,0.167,49,0.01,50,0.01,55,0.706,141,0.79,389,3.403,390,2.648,461,1.976,522,2.177,780,5.114,944,2.877,945,3.693,1056,5.549,1057,5.059]],["title/modules/ProductModule.html",[0,1.233,84,2.788]],["body/modules/ProductModule.html",[0,2.131,2,2.137,3,0.114,4,0.146,5,0.13,7,0.407,8,0.012,9,0.879,14,2.509,47,0.146,48,0.168,49,0.009,50,0.009,53,2.534,70,2.405,71,2.622,72,2.622,73,2.405,74,3.687,75,2.622,84,5.366,89,3.347,90,2.622,91,2.622,389,2.059,390,2.309,554,3.22,555,2.405,1009,5.173,1035,5.04,1036,4.412,1058,4.412,1059,4.412,1060,5.049,1061,5.049,1062,5.049]],["title/injectables/ProductService.html",[105,0.789,1035,2.619]],["body/injectables/ProductService.html",[3,0.048,4,0.062,5,0.055,7,0.347,8,0.013,9,0.374,47,0.062,48,0.071,49,0.005,50,0.005,55,0.262,56,1.073,59,1.017,61,1.695,62,1.618,67,1.905,105,0.665,106,0.76,117,2.825,139,1.872,140,1.593,141,0.797,142,1.593,143,2.279,159,3.098,160,1.294,163,1.978,205,1.981,211,1.227,221,0.875,252,3.078,265,2.628,275,1.369,347,1.521,376,1.227,389,2.762,390,0.982,391,1.067,394,1.698,408,1.227,409,1.987,431,1.168,443,3.167,507,2.257,519,1.023,555,1.023,562,3.385,569,1.458,578,1.876,579,1.698,580,1.698,610,4.574,614,5.046,758,1.564,901,1.458,906,3.385,911,2.521,912,1.876,919,2.736,934,3.702,948,1.698,980,3.436,982,4.776,1013,3.798,1025,1.876,1035,2.207,1037,1.698,1038,1.698,1039,1.876,1048,3.023,1063,1.876,1064,3.46,1065,3.46,1066,3.46,1067,3.46,1068,2.147,1069,2.147,1070,3.46,1071,2.147,1072,3.46,1073,2.147,1074,3.46,1075,2.147,1076,3.46,1077,2.147,1078,3.46,1079,2.147,1080,2.147,1081,2.147,1082,2.147,1083,2.147,1084,3.46,1085,3.46,1086,3.46,1087,2.147,1088,2.147,1089,2.147,1090,2.736,1091,2.147,1092,2.147,1093,3.46,1094,2.147,1095,2.147,1096,2.147,1097,2.147,1098,2.147,1099,2.147,1100,2.147,1101,2.147,1102,2.147,1103,2.147,1104,2.147,1105,2.147,1106,3.46,1107,1.698,1108,2.147,1109,1.876,1110,3.46,1111,2.147,1112,2.147,1113,2.147]],["title/entities/Rating.html",[505,1.956,644,2.347]],["body/entities/Rating.html",[3,0.108,4,0.139,5,0.124,7,0.365,8,0.012,47,0.139,48,0.16,49,0.009,50,0.009,55,0.586,58,2.001,59,1.087,141,0.852,205,2.384,221,1.961,343,4.458,458,4.242,461,1.759,464,2.114,505,2.975,507,2.498,510,4.242,517,4.242,518,3.504,519,2.291,520,3.57,521,3.266,522,1.491,628,3.244,643,6.062,644,4.35,992,3.803,1114,4.202,1115,4.202,1116,4.809,1117,4.809,1118,4.809,1119,5.458,1120,4.809]],["title/controllers/RatingController.html",[51,1.615,1121,2.992]],["body/controllers/RatingController.html",[3,0.11,4,0.141,5,0.125,7,0.402,8,0.012,9,0.849,47,0.141,48,0.162,49,0.009,50,0.009,51,1.917,53,1.917,65,2.532,66,1.988,67,1.512,116,2.937,117,1.85,157,3.311,165,2.787,170,3.11,207,2.787,208,3.797,210,3.311,213,2.937,232,3.311,233,3.311,234,2.787,235,3.311,252,2.063,265,1.85,640,4.454,644,2.787,869,3.855,870,3.311,1121,4.592,1122,4.26,1123,4.454,1124,4.875,1125,3.855,1126,3.855,1127,4.875,1128,4.875,1129,5.506,1130,4.875,1131,4.875]],["title/modules/RatingModule.html",[0,1.233,85,2.788]],["body/modules/RatingModule.html",[0,2.131,2,2.137,3,0.114,4,0.146,5,0.13,7,0.407,8,0.012,9,0.879,14,2.509,47,0.146,48,0.168,49,0.009,50,0.009,53,2.534,70,2.405,71,2.622,72,2.622,73,2.405,74,3.687,75,2.622,85,5.366,89,3.347,90,2.622,91,2.622,554,3.22,555,2.405,644,2.886,1121,5.173,1123,5.04,1132,4.412,1133,4.412,1134,5.049,1135,5.049,1136,5.049,1137,5.049,1138,5.049]],["title/injectables/RatingService.html",[105,0.789,1123,2.619]],["body/injectables/RatingService.html",[3,0.102,4,0.131,5,0.117,7,0.404,8,0.012,9,0.789,47,0.131,48,0.151,49,0.009,50,0.009,55,0.553,56,1.863,59,1.046,61,1.406,67,1.406,105,1.155,106,1.605,117,2.558,139,1.925,140,1.639,141,0.82,142,1.639,143,2.073,205,1.361,221,1.848,252,2.543,265,1.72,347,2.642,391,2.252,519,2.159,555,2.159,562,4.873,569,3.078,640,4.894,644,2.591,1123,3.832,1125,3.584,1126,3.584,1129,5.25,1139,3.961,1140,6.008,1141,4.533,1142,4.533,1143,6.008,1144,6.008,1145,4.533,1146,3.961,1147,4.533,1148,4.533,1149,4.533,1150,4.533]],["title/modules/RedisModule.html",[0,1.233,86,2.788]],["body/modules/RedisModule.html",[0,1.953,2,2.167,3,0.115,4,0.148,5,0.132,7,0.396,8,0.012,9,0.892,10,4.417,11,2.44,14,3.232,47,0.148,48,0.17,49,0.009,50,0.009,86,4.417,205,1.538,351,4.085,354,4.05,377,4.05,379,4.475,380,4.05,393,4.05,410,2.66,431,2.787,685,4.475,686,4.475,688,4.05,690,4.475,1151,5.121,1152,5.121,1153,6.504,1154,5.683,1155,5.121,1156,5.121,1157,5.121,1158,5.121,1159,5.121,1160,5.121,1161,5.121,1162,5.121]],["title/interfaces/RequestWithUserInterface.html",[165,2.347,944,2.04]],["body/interfaces/RequestWithUserInterface.html",[3,0.128,4,0.164,5,0.146,7,0.365,8,0.012,47,0.164,49,0.01,50,0.01,55,0.692,141,0.774,165,3.962,205,2.497,221,2.314,246,4.135,461,1.952,522,2.15,780,5.455,944,2.82,945,3.619,1163,4.958]],["title/entities/Reservation.html",[154,1.956,505,1.956]],["body/entities/Reservation.html",[3,0.084,4,0.108,5,0.096,7,0.348,8,0.012,47,0.108,48,0.125,49,0.008,50,0.008,55,0.456,58,2.321,59,1.261,62,1.494,141,1.015,154,2.511,205,2.35,221,1.527,343,4.729,389,3.192,390,1.712,431,2.868,461,1.485,464,1.646,505,2.511,507,1.944,509,3.676,510,5.053,512,2.96,517,4.144,518,3.841,519,1.783,520,3.013,521,2.542,522,1.161,584,4.169,650,5.332,651,5.332,652,5.332,656,3.841,992,2.96,998,3.271,1003,2.96,1004,4.607,1164,3.271,1165,3.744,1166,3.744,1167,3.744,1168,3.744,1169,3.744,1170,3.271,1171,5.272,1172,3.744,1173,3.744,1174,3.744,1175,3.744,1176,3.744]],["title/controllers/ReservationController.html",[51,1.615,1177,2.992]],["body/controllers/ReservationController.html",[3,0.06,4,0.077,5,0.068,7,0.362,8,0.012,9,0.462,47,0.077,48,0.088,49,0.006,50,0.006,51,1.043,53,1.043,55,0.323,56,1.268,58,1.796,59,0.976,61,1.738,62,1.442,65,1.378,66,1.082,67,1.738,116,1.598,117,2.825,136,3.362,139,1.796,140,1.529,141,0.826,142,1.529,143,2.563,154,2.883,157,2.776,159,2.563,160,2.463,165,3.932,166,2.318,170,4.679,194,3.634,199,1.801,205,2.119,207,2.336,208,2.463,210,1.801,212,1.933,213,1.598,214,2.979,216,4.41,217,2.979,218,1.692,219,1.933,220,0.908,221,1.082,232,1.801,233,1.801,234,1.516,235,1.801,252,2.372,260,4.083,265,2.127,266,1.933,267,1.598,271,1.933,389,2.805,390,1.213,533,2.318,536,2.097,539,1.801,647,4.502,863,2.097,870,1.801,1026,2.318,1029,2.318,1177,2.979,1178,2.318,1179,4.987,1180,3.572,1181,4.987,1182,4.088,1183,2.652,1184,2.652,1185,2.652,1186,2.652,1187,2.652,1188,2.318,1189,2.652,1190,2.652,1191,2.652,1192,2.652,1193,2.652,1194,2.652,1195,3.181,1196,2.318,1197,2.097,1198,2.097,1199,2.652,1200,2.652,1201,3.572,1202,2.652,1203,2.652,1204,2.652,1205,3.232,1206,2.652,1207,2.652,1208,2.652,1209,2.652,1210,2.652]],["title/modules/ReservationModule.html",[0,1.233,87,2.788]],["body/modules/ReservationModule.html",[0,2.131,2,2.137,3,0.114,4,0.146,5,0.13,7,0.407,8,0.012,9,0.879,14,2.509,47,0.146,48,0.168,49,0.009,50,0.009,53,2.534,70,2.405,71,2.622,72,2.622,73,2.405,74,3.687,75,2.622,87,5.366,89,3.347,90,2.622,91,2.622,154,2.405,245,3.042,554,3.22,555,2.405,1177,5.173,1195,5.04,1196,4.412,1211,4.412,1212,4.412,1213,5.049,1214,5.049,1215,5.049]],["title/injectables/ReservationService.html",[105,0.789,1195,2.619]],["body/injectables/ReservationService.html",[3,0.059,4,0.075,5,0.067,7,0.36,8,0.012,9,0.452,47,0.075,48,0.087,49,0.006,50,0.006,55,0.317,56,1.248,59,1.044,61,1.719,62,1.431,67,1.967,105,0.773,106,0.92,117,2.812,139,1.921,140,1.636,141,0.818,142,1.636,143,2.535,154,3.476,159,2.535,160,2.424,205,2.419,211,1.486,221,1.06,245,1.566,252,2.892,265,2.407,347,1.769,376,1.486,389,3.095,390,1.189,391,1.292,408,2.3,409,1.84,443,1.894,507,2.09,519,1.238,555,1.238,562,3.765,569,1.765,579,2.055,580,2.055,647,4.219,741,1.566,1090,2.055,1107,3.893,1109,2.271,1180,3.516,1188,3.516,1195,2.567,1197,2.055,1198,2.055,1201,3.516,1205,3.182,1216,2.271,1217,4.924,1218,4.024,1219,4.024,1220,2.599,1221,2.599,1222,4.024,1223,2.599,1224,2.599,1225,2.599,1226,4.024,1227,2.599,1228,4.024,1229,2.599,1230,2.599,1231,2.599,1232,2.599,1233,2.599,1234,2.599,1235,2.599,1236,3.182,1237,2.599,1238,2.599,1239,2.599,1240,2.599,1241,2.599,1242,2.599,1243,2.599,1244,4.024,1245,2.271,1246,4.024,1247,2.271,1248,2.599,1249,3.516,1250,2.599,1251,2.599,1252,2.599,1253,2.599]],["title/interfaces/TokenPayloadInterface.html",[383,2.788,944,2.04]],["body/interfaces/TokenPayloadInterface.html",[3,0.135,4,0.174,5,0.154,8,0.012,47,0.174,49,0.01,50,0.01,55,0.733,62,1.731,141,0.82,359,6.286,383,4.874,461,2.021,944,2.987,945,3.834,1254,5.252]],["title/injectables/TransformInterceptor.html",[105,0.789,1255,3.247]],["body/injectables/TransformInterceptor.html",[3,0.164,4,0.136,5,0.121,7,0.324,8,0.012,9,0.818,47,0.198,48,0.156,49,0.009,50,0.009,55,0.573,56,1.908,59,0.818,61,1.457,67,1.457,105,1.182,106,1.664,139,1.505,140,1.281,141,0.839,142,1.281,167,3.423,199,3.19,265,1.783,276,4.177,774,4.105,789,3.715,790,3.715,791,4.105,905,4.105,1255,4.864,1256,3.423,1257,6.859,1258,4.698,1259,6.359,1260,6.859,1261,7.277,1262,4.698,1263,6.151,1264,6.859,1265,6.151,1266,4.698,1267,4.105,1268,3.715,1269,4.698,1270,4.698]],["title/classes/UpdateAuthDto.html",[48,0.137,1271,3.247]],["body/classes/UpdateAuthDto.html",[3,0.133,4,0.171,5,0.152,7,0.374,8,0.012,47,0.171,48,0.197,49,0.01,50,0.01,112,1.612,522,2.204,534,3.561,597,4.307,599,4.674,1271,5.619,1272,5.165,1273,7.106,1274,3.561,1275,4.014,1276,4.014,1277,5.91]],["title/classes/UpdateCommentDto.html",[48,0.137,1278,3.247]],["body/classes/UpdateCommentDto.html",[3,0.134,4,0.172,5,0.153,7,0.375,8,0.012,47,0.172,48,0.198,49,0.01,50,0.01,112,1.619,220,2.032,522,2.209,530,3.786,534,3.576,544,4.693,601,4.693,1274,3.576,1278,5.633,1279,5.186,1280,7.124]],["title/classes/UpdateOrderDto.html",[48,0.137,866,2.788]],["body/classes/UpdateOrderDto.html",[3,0.133,4,0.171,5,0.152,7,0.374,8,0.012,47,0.171,48,0.197,49,0.01,50,0.01,112,1.612,522,2.204,534,3.561,607,3.77,609,4.674,866,4.826,874,4.674,1274,3.561,1275,4.014,1276,4.014,1281,5.165,1282,7.106]],["title/classes/UpdateProductDto.html",[48,0.137,1283,3.247]],["body/classes/UpdateProductDto.html",[3,0.133,4,0.171,5,0.152,7,0.374,8,0.012,47,0.171,48,0.197,49,0.01,50,0.01,112,1.612,522,2.204,610,3.77,612,4.674,1037,4.674,1038,4.674,1274,3.561,1275,4.014,1276,4.014,1283,5.619,1284,5.165,1285,7.106]],["title/classes/UpdateRatingDto.html",[48,0.137,1286,3.247]],["body/classes/UpdateRatingDto.html",[3,0.134,4,0.172,5,0.153,7,0.375,8,0.012,47,0.172,48,0.198,49,0.01,50,0.01,112,1.619,220,2.032,522,2.209,640,3.786,642,4.693,1125,4.693,1126,4.693,1274,3.576,1286,5.633,1287,5.186,1288,7.124]],["title/classes/UpdateReservationDto.html",[48,0.137,1289,3.247]],["body/classes/UpdateReservationDto.html",[3,0.134,4,0.172,5,0.153,7,0.375,8,0.012,47,0.172,48,0.198,49,0.01,50,0.01,112,1.619,220,2.032,522,2.209,647,3.786,649,4.693,1197,4.693,1198,4.693,1274,3.576,1289,5.633,1290,5.186,1291,7.124]],["title/classes/UpdateUserDto.html",[48,0.137,1292,3.247]],["body/classes/UpdateUserDto.html",[3,0.133,4,0.171,5,0.152,7,0.374,8,0.012,47,0.171,48,0.197,49,0.01,50,0.01,112,1.612,202,3.378,224,4.014,225,4.014,522,2.204,662,4.307,1274,3.561,1275,4.014,1276,4.014,1292,5.619,1293,5.165,1294,7.106]],["title/entities/User.html",[205,1.233,505,1.956]],["body/entities/User.html",[3,0.052,4,0.067,5,0.06,7,0.365,8,0.013,9,0.404,47,0.067,48,0.077,49,0.005,50,0.005,55,0.283,58,2.17,59,1.179,62,1.528,67,1.143,117,1.398,140,1.249,141,0.947,142,1.422,151,2.094,154,3.528,163,1.328,205,1.106,211,1.328,245,1.399,252,2.206,265,1.398,275,1.481,343,4.623,376,1.328,389,2.585,390,1.062,408,2.106,409,1.685,410,2.379,431,3.291,446,2.685,449,2.502,450,2.685,461,1.038,464,1.62,505,1.755,506,3.293,507,1.206,510,4.305,517,3.11,519,1.106,520,2.106,521,1.577,522,0.72,557,1.692,644,3.967,663,3.337,664,3.518,678,1.264,681,1.692,766,1.837,974,4.555,980,3.621,987,4.002,990,3.22,1003,4.495,1043,4.002,1115,2.03,1119,3.22,1146,2.03,1170,2.03,1205,1.837,1245,3.22,1247,3.22,1268,1.837,1295,2.03,1296,3.684,1297,2.323,1298,2.323,1299,2.323,1300,2.323,1301,3.684,1302,2.323,1303,2.323,1304,2.323,1305,2.323,1306,2.323,1307,2.323,1308,2.323,1309,2.323,1310,3.684,1311,3.684,1312,2.03,1313,1.837,1314,3.22,1315,2.323,1316,2.323,1317,3.22,1318,2.323,1319,2.323,1320,2.323,1321,2.323,1322,3.684,1323,2.323,1324,3.684,1325,2.323,1326,2.323,1327,2.323,1328,2.323,1329,2.323,1330,2.03,1331,2.323,1332,2.323,1333,2.323,1334,2.323,1335,3.684,1336,2.323,1337,3.684,1338,2.323,1339,2.323]],["title/controllers/UsersController.html",[51,1.615,1340,2.992]],["body/controllers/UsersController.html",[3,0.091,4,0.117,5,0.104,7,0.36,8,0.012,9,0.702,47,0.117,48,0.134,49,0.008,50,0.008,51,1.585,53,1.585,55,0.491,56,1.721,58,1.778,59,0.966,61,1.721,62,1.432,65,2.094,66,1.644,67,1.969,116,2.429,117,2.882,139,1.778,140,1.514,141,0.757,142,1.514,143,2.538,159,2.538,202,4.237,205,1.666,207,2.304,208,2.429,213,2.429,218,2.571,220,1.38,224,2.737,225,2.737,252,2.686,265,2.409,349,3.154,381,2.429,395,3.522,444,3.522,539,3.769,869,3.187,870,2.737,1047,4.85,1236,5.019,1340,4.044,1341,3.522,1342,4.85,1343,5.55,1344,3.522,1345,4.031,1346,4.031,1347,4.031,1348,4.031,1349,4.031,1350,4.031,1351,4.031,1352,4.85,1353,4.031,1354,4.031]],["title/modules/UsersModule.html",[0,1.233,88,2.619]],["body/modules/UsersModule.html",[0,2.086,2,2.042,3,0.109,4,0.14,5,0.124,7,0.401,8,0.012,9,0.84,14,2.398,47,0.14,48,0.161,49,0.009,50,0.009,53,2.462,70,2.299,71,2.506,72,2.506,73,2.299,74,3.609,75,3.609,88,5.069,89,3.251,90,2.506,91,2.506,205,1.449,221,1.968,349,4.135,381,2.907,554,3.078,555,2.299,1340,5.063,1355,4.217,1356,4.217,1357,4.217,1358,4.825,1359,4.825,1360,4.825,1361,4.825]],["title/injectables/UsersService.html",[105,0.789,349,2.04]],["body/injectables/UsersService.html",[3,0.05,4,0.064,5,0.057,7,0.34,8,0.013,9,0.384,47,0.064,48,0.073,49,0.005,50,0.005,55,0.269,56,1.097,59,1.03,61,1.719,62,1.651,67,2.003,105,0.68,106,0.782,117,2.868,118,2.797,139,1.895,140,1.613,141,0.807,142,1.613,143,2.535,151,2.705,154,3.631,159,2.841,160,1.33,170,1.408,202,3.168,205,2.198,212,1.608,221,0.9,224,1.499,225,1.499,245,1.33,252,2.954,265,2.593,274,1.745,278,2.256,342,3.091,347,1.555,349,1.758,359,2.797,361,3.091,389,2.065,390,1.009,391,1.097,394,1.745,408,2.022,409,1.618,410,2.299,434,1.745,443,2.578,445,3.869,507,2.63,519,1.051,555,1.051,562,3.439,569,1.499,604,2.797,1008,1.929,1090,2.797,1107,1.745,1236,1.745,1249,1.929,1312,1.929,1313,1.745,1317,1.929,1342,3.091,1344,3.091,1352,3.091,1362,1.929,1363,3.538,1364,2.207,1365,2.207,1366,3.538,1367,3.538,1368,2.207,1369,2.207,1370,3.538,1371,2.207,1372,2.207,1373,2.207,1374,2.207,1375,2.207,1376,2.207,1377,2.207,1378,2.207,1379,3.538,1380,3.538,1381,3.538,1382,2.207,1383,2.207,1384,2.207,1385,2.207,1386,3.538,1387,2.207,1388,2.207,1389,2.207,1390,2.207,1391,2.207,1392,2.207,1393,2.207,1394,2.207,1395,2.207,1396,2.207,1397,2.207,1398,4.427,1399,3.538,1400,2.207,1401,2.207]],["title/interfaces/VerificationTokenPayloadInterface.html",[387,2.992,944,2.04]],["body/interfaces/VerificationTokenPayloadInterface.html",[3,0.135,4,0.174,5,0.154,8,0.012,47,0.174,49,0.01,50,0.01,55,0.733,62,1.731,141,0.82,151,3.636,387,5.23,461,2.021,944,2.987,945,3.834,1402,5.252]],["title/coverage.html",[1403,4.912]],["body/coverage.html",[3,0.048,5,0.055,8,0.012,48,0.265,49,0.005,50,0.005,51,2.509,52,1.557,54,1.868,63,1.363,73,1.018,105,1.467,107,1.868,111,1.451,113,1.868,114,1.557,115,1.868,134,1.451,141,0.292,145,1.451,154,1.018,165,1.222,182,1.451,202,1.222,205,0.642,222,1.288,228,1.451,230,1.557,234,1.222,238,1.557,240,1.557,242,1.557,321,1.451,322,1.451,323,1.451,324,1.451,325,1.451,340,1.868,349,1.062,352,1.363,383,1.451,385,1.69,387,1.557,389,0.871,409,0.977,459,1.69,460,1.868,483,1.868,484,2.726,505,2.597,506,1.11,508,1.868,520,1.222,525,1.557,526,1.868,530,1.363,541,1.363,559,1.868,581,1.868,593,1.868,594,1.868,597,1.557,598,1.868,599,2.726,600,1.868,601,2.726,607,1.363,608,1.868,609,2.726,610,1.363,611,1.868,612,2.726,640,1.363,641,1.868,642,2.726,644,1.222,647,1.363,648,1.868,649,2.726,661,1.868,662,3.157,704,1.868,724,1.868,725,3.478,728,1.868,729,3.478,758,6.202,771,1.69,772,1.868,773,1.868,796,1.868,798,1.868,810,1.868,812,1.868,825,1.868,827,1.868,834,1.868,838,1.868,840,1.868,847,1.868,849,1.363,850,1.868,851,1.557,852,1.868,866,1.451,871,1.363,891,1.868,901,1.451,902,1.868,903,1.557,906,1.451,915,2.726,916,1.868,924,1.557,932,1.69,934,1.288,944,2.71,946,1.868,947,1.868,949,1.868,979,1.868,1009,1.557,1010,1.868,1035,1.363,1056,1.69,1057,1.868,1063,1.868,1114,1.868,1121,1.557,1122,1.868,1123,1.363,1139,1.868,1163,1.868,1164,1.868,1177,1.557,1178,1.868,1195,1.363,1216,1.868,1254,1.868,1255,1.69,1256,2.512,1271,1.69,1272,1.868,1278,1.69,1279,1.868,1281,1.868,1283,1.69,1284,1.868,1286,1.69,1287,1.868,1289,1.69,1290,1.868,1292,1.69,1293,1.868,1295,1.868,1340,1.557,1341,1.868,1362,1.868,1402,1.868,1403,1.868,1404,2.137,1405,2.137,1406,2.137,1407,6.589,1408,2.137,1409,2.137,1410,7.94,1411,7.354,1412,5.453,1413,1.868,1414,4.333,1415,1.868,1416,3.447,1417,1.868,1418,1.868,1419,2.137,1420,5.83,1421,3.447,1422,2.137,1423,2.137,1424,1.868]],["title/dependencies.html",[70,2.355,1425,2.989]],["body/dependencies.html",[8,0.012,9,0.688,11,1.883,13,3.454,48,0.182,49,0.008,50,0.008,70,1.883,220,1.353,246,2.88,313,4.577,328,3.125,330,1.883,354,4.329,380,4.329,393,3.125,479,4.329,497,2.053,519,1.883,555,1.883,680,3.99,716,3.454,741,4.552,742,4.329,743,4.784,818,4.329,842,3.454,973,3.454,1154,3.454,1267,3.454,1275,2.684,1276,2.684,1313,3.125,1314,3.454,1330,3.454,1426,3.952,1427,3.952,1428,3.952,1429,7.122,1430,3.952,1431,3.952,1432,3.952,1433,3.952,1434,3.952,1435,3.952,1436,3.952,1437,3.952,1438,5.475,1439,3.952,1440,3.952,1441,3.952,1442,3.952,1443,3.952,1444,3.952,1445,3.952,1446,7.122,1447,3.952,1448,3.952,1449,5.475,1450,3.952,1451,5.475,1452,3.952,1453,3.952,1454,3.952,1455,3.952,1456,3.952,1457,3.952,1458,3.952,1459,3.952,1460,3.952,1461,3.952,1462,3.952,1463,3.952,1464,3.952,1465,3.952,1466,3.952,1467,3.952,1468,3.952,1469,3.952,1470,3.952,1471,3.952]],["title/miscellaneous/enumerations.html",[1472,1.955,1473,4.32]],["body/miscellaneous/enumerations.html",[8,0.012,49,0.01,50,0.01,55,0.697,313,5.076,465,5.939,509,4.197,664,3.618,680,5.076,742,5.509,818,5.509,952,6.088,1472,3.269,1473,4.998,1474,5.72,1475,5.72,1476,5.72,1477,6.966,1478,5.72]],["title/miscellaneous/functions.html",[1472,1.955,1479,4.32]],["body/miscellaneous/functions.html",[8,0.011,49,0.011,50,0.011,55,0.782,73,3.757,1418,5.608,1472,3.669,1479,5.608,1480,6.418]],["title/index.html",[55,0.501,1481,3.588]],["body/index.html",[0,0.991,1,3.862,2,1.397,8,0.012,49,0.007,50,0.007,53,1.298,63,3.627,69,6.092,70,1.572,71,1.714,72,1.714,73,1.572,74,1.714,75,1.714,76,2.884,77,2.884,78,2.884,79,5.553,80,4.515,81,3.862,82,4.572,83,4.515,84,4.515,85,4.515,86,3.862,87,4.515,88,4.572,89,2.501,90,1.714,91,1.714,106,1.169,112,0.9,222,3.426,318,2.884,320,2.884,321,3.862,322,3.862,323,3.862,324,3.862,325,3.862,349,3.562,352,4.572,502,2.405,507,1.714,541,3.627,551,2.884,552,2.884,700,2.884,701,2.884,702,2.884,871,3.627,887,2.884,888,2.884,945,2.105,960,4.208,1035,3.627,1058,2.884,1059,2.884,1123,3.627,1132,2.884,1133,2.884,1195,3.627,1211,2.884,1212,2.884,1355,2.884,1356,2.884,1357,2.884,1481,2.884,1482,3.3,1483,3.3,1484,3.3]],["title/modules.html",[2,2.379]],["body/modules.html",[1,3.555,2,2.215,8,0.009,49,0.009,50,0.009,69,3.814,79,3.555,80,3.555,81,3.555,82,3.339,83,3.555,84,3.555,85,3.555,86,3.555,87,3.555,88,3.339,1485,7.219,1486,7.219,1487,8.416,1488,8.263,1489,8.263,1490,8.263]],["title/properties.html",[461,1.392,1425,2.989]],["body/properties.html",[8,0.012,49,0.011,50,0.011,136,3.016,461,1.783,1491,6.332,1492,6.332,1493,6.332,1494,6.332,1495,6.332]],["title/miscellaneous/typealiases.html",[1472,1.955,1496,4.943]],["body/miscellaneous/typealiases.html",[8,0.011,49,0.011,50,0.011,55,0.782,141,0.876,167,5.436,1256,4.677,1472,3.669,1497,6.418,1498,5.608]],["title/miscellaneous/variables.html",[1472,1.955,1499,4.32]],["body/miscellaneous/variables.html",[3,0.053,8,0.012,49,0.003,50,0.003,55,0.167,67,0.424,141,0.186,143,0.625,151,1.434,187,1.194,199,0.928,205,0.41,207,1.793,265,0.518,276,0.928,385,1.873,401,5.39,402,1.194,464,1.379,465,2.285,480,1.194,628,1.23,754,1.194,758,5.234,780,0.995,782,1.194,789,1.08,790,1.08,897,1.194,971,4.605,1006,1.194,1256,0.995,1259,1.194,1268,1.08,1413,1.194,1415,2.07,1417,1.194,1424,4.824,1472,0.781,1498,1.194,1499,1.194,1500,1.366,1501,1.366,1502,1.366,1503,1.366,1504,1.366,1505,3.742,1506,1.366,1507,1.366,1508,1.366,1509,1.366,1510,1.366,1511,1.366,1512,2.369,1513,6.724,1514,4.639,1515,2.369,1516,1.366,1517,1.366,1518,1.366,1519,7.183,1520,6.511,1521,5.521,1522,6.817,1523,3.136,1524,7.242,1525,4.639,1526,3.742,1527,3.742,1528,2.369,1529,1.366,1530,1.366,1531,6.101,1532,3.742,1533,4.233,1534,5.27,1535,2.369,1536,6.622,1537,5.931,1538,2.369,1539,1.366,1540,1.366,1541,3.136,1542,1.366,1543,2.369,1544,1.366,1545,4.98,1546,1.366,1547,5.931,1548,4.233,1549,3.742,1550,1.366,1551,1.366,1552,4.233,1553,4.639,1554,1.366,1555,1.366,1556,1.366,1557,1.366,1558,1.366,1559,1.366,1560,4.233,1561,7.296,1562,1.366,1563,1.366,1564,3.136,1565,4.98,1566,1.366,1567,1.366,1568,3.136,1569,5.27,1570,3.742,1571,4.639,1572,3.136,1573,3.742,1574,3.742,1575,1.366,1576,2.369,1577,2.369,1578,5.27,1579,3.742,1580,2.369,1581,4.639,1582,4.233,1583,3.136,1584,1.366,1585,2.369,1586,1.366,1587,3.136,1588,1.366,1589,1.366,1590,1.366,1591,1.366,1592,4.639,1593,1.366,1594,1.366,1595,1.366,1596,1.366,1597,2.369,1598,2.369,1599,3.136,1600,3.136,1601,1.366,1602,2.369,1603,3.136,1604,1.366,1605,1.366,1606,1.366,1607,1.366,1608,3.742,1609,3.136,1610,4.639,1611,4.233,1612,1.366,1613,1.366,1614,5.931,1615,1.366,1616,1.366,1617,2.369,1618,2.369,1619,1.366,1620,1.366,1621,1.366,1622,1.366,1623,1.366,1624,3.742,1625,3.136,1626,1.366,1627,1.366,1628,1.366,1629,3.136,1630,1.366,1631,1.366,1632,2.369,1633,1.366,1634,1.366,1635,1.366,1636,2.369,1637,1.366,1638,1.366,1639,2.369,1640,1.366,1641,2.369,1642,1.366,1643,1.366,1644,2.369,1645,1.366,1646,1.366,1647,6.511,1648,1.366,1649,1.366,1650,1.366,1651,1.366,1652,1.366,1653,4.98,1654,1.366,1655,1.366,1656,1.366,1657,5.739,1658,1.366,1659,1.366,1660,3.136,1661,1.366,1662,1.366,1663,1.366,1664,1.366,1665,2.369,1666,1.366,1667,1.366,1668,1.366,1669,1.366,1670,1.366,1671,1.366,1672,1.366,1673,1.366,1674,1.366,1675,1.366,1676,1.366,1677,1.366,1678,1.366,1679,1.366,1680,1.366,1681,1.366,1682,1.366,1683,1.366,1684,1.366,1685,1.366,1686,1.366,1687,1.366,1688,1.366,1689,1.366,1690,1.366,1691,1.366,1692,1.366,1693,1.366,1694,1.366]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":758,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/ProductService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":1492,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1469,"title":{},"body":{"dependencies.html":{}}}],["0.1.8",{"_index":1447,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":1456,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1462,"title":{},"body":{"dependencies.html":{}}}],["0.3.17",{"_index":1471,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1455,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1461,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1410,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1409,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1408,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1407,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1411,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1412,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1422,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1420,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1421,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1416,"title":{},"body":{"coverage.html":{}}}],["000000",{"_index":1591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0pt",{"_index":1543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"entities/Rating.html":{}}}],["1.0",{"_index":474,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["1.0.0",{"_index":1449,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":1451,"title":{},"body":{"dependencies.html":{}}}],["1.0.35",{"_index":1450,"title":{},"body":{"dependencies.html":{}}}],["1.0.6",{"_index":1464,"title":{},"body":{"dependencies.html":{}}}],["1.1.22",{"_index":1427,"title":{},"body":{"dependencies.html":{}}}],["1.4",{"_index":1535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.4.3",{"_index":1439,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1458,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":1459,"title":{},"body":{"dependencies.html":{}}}],["1.8.3",{"_index":1441,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{},"classes/PageOptionsDto.html":{},"injectables/UsersService.html":{}}}],["10.0.0",{"_index":1429,"title":{},"body":{"dependencies.html":{}}}],["10.1.0",{"_index":1432,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10px",{"_index":1565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10})@type(undefined)@isint()@min(1)@max(50)@isoptional",{"_index":963,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["12",{"_index":1482,"title":{},"body":{"index.html":{}}}],["12px",{"_index":1585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["14px",{"_index":1532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["15px",{"_index":1602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["16px",{"_index":1649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["17.1.1",{"_index":1428,"title":{},"body":{"dependencies.html":{}}}],["17.1.9",{"_index":1443,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":1483,"title":{},"body":{"index.html":{}}}],["1px",{"_index":1618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1})@isnumber",{"_index":629,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["1})@type(undefined)@isint()@min(1)@isoptional",{"_index":958,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["2.0",{"_index":1454,"title":{},"body":{"dependencies.html":{}}}],["2.0.8",{"_index":1465,"title":{},"body":{"dependencies.html":{}}}],["2.4.2",{"_index":1436,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1452,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1268,"title":{},"body":{"injectables/TransformInterceptor.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["20px",{"_index":1577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["25px",{"_index":1623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["27",{"_index":1484,"title":{},"body":{"index.html":{}}}],["28px",{"_index":1648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":1685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.0",{"_index":1430,"title":{},"body":{"dependencies.html":{}}}],["3.0.9",{"_index":1448,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":1596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["30px",{"_index":1594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["34495e",{"_index":1660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3498db",{"_index":1610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["35px",{"_index":1595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3px",{"_index":1575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":1318,"title":{},"body":{"entities/User.html":{}}}],["4.0.1",{"_index":1463,"title":{},"body":{"dependencies.html":{}}}],["4.1",{"_index":1453,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["404",{"_index":768,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["5",{"_index":960,"title":{},"body":{"classes/PageOptionsDto.html":{},"index.html":{}}}],["50",{"_index":962,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["580px",{"_index":1564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5px",{"_index":1609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.4.9",{"_index":1445,"title":{},"body":{"dependencies.html":{}}}],["6.9.4",{"_index":1460,"title":{},"body":{"dependencies.html":{}}}],["620px",{"_index":1646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7",{"_index":501,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["7.1.8",{"_index":1434,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1470,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":502,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/NewPasswordDto.html":{},"index.html":{}}}],["8.11.1",{"_index":1466,"title":{},"body":{"dependencies.html":{}}}],["94102",{"_index":1691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["999999",{"_index":1584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["__dirname",{"_index":696,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["_accesstoken",{"_index":740,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["_refreshtoken",{"_index":736,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["a1234567",{"_index":498,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["a1234567!'})@isstring()@minlength(7)@matches(/^(?=.*[a",{"_index":670,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["a1234567!'})@minlength(7)@matches(/^(?=.*[a",{"_index":487,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/NewPasswordDto.html":{}}}],["a1234567@'})@isstring",{"_index":836,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["a:hover",{"_index":1661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abbey",{"_index":1686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abcd@google.com",{"_index":679,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{}}}],["abcd@google.com'})@isemail",{"_index":665,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{}}}],["abstract",{"_index":592,"title":{},"body":{"classes/CommonEntity.html":{}}}],["access",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{}}}],["accessors",{"_index":950,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["accesstoken",{"_index":817,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["accesstoken_expiration_time",{"_index":26,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["accesstoken_secret_key",{"_index":25,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["action",{"_index":897,"title":{},"body":{"injectables/OrderService.html":{},"miscellaneous/variables.html":{}}}],["addbearerauth",{"_index":475,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["adds",{"_index":898,"title":{},"body":{"injectables/OrderService.html":{}}}],["adjust",{"_index":1538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alert('login",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["aliases",{"_index":1497,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["already",{"_index":764,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["antialiased",{"_index":1530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["any(product.category",{"_index":1089,"title":{},"body":{"injectables/ProductService.html":{}}}],["api",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/OrderController.html":{},"controllers/ReservationController.html":{}}}],["api'})@apicreatedresponse({description",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["api'})@apiresponse({description",{"_index":533,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ReservationController.html":{}}}],["apibearerauth",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["apibearerauth('access",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["apibody",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["apibody({type",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["apicreatedresponse",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["apiproperty",{"_index":494,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{}}}],["apiproperty()@isoptional",{"_index":672,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty({description",{"_index":485,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["apiproperty({type",{"_index":910,"title":{},"body":{"classes/PageDto.html":{}}}],["apipropertyoptional",{"_index":967,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["apipropertyoptional({enum",{"_index":954,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["apipropertyoptional({minimum",{"_index":957,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["apiresponse",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["apiresponse({description",{"_index":1019,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('comment",{"_index":545,"title":{},"body":{"controllers/CommentController.html":{}}}],["apitags('order",{"_index":876,"title":{},"body":{"controllers/OrderController.html":{}}}],["apitags('product",{"_index":1040,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags('reservation",{"_index":1199,"title":{},"body":{"controllers/ReservationController.html":{}}}],["apitags('users",{"_index":1348,"title":{},"body":{"controllers/UsersController.html":{}}}],["appconfigmodule",{"_index":1,"title":{"modules/AppConfigModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["appcontroller",{"_index":52,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["apple",{"_index":1655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":69,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["appservice",{"_index":63,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["argumentshost",{"_index":777,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":985,"title":{},"body":{"entities/Product.html":{}}}],["array.isarray(category",{"_index":1092,"title":{},"body":{"injectables/ProductService.html":{}}}],["article",{"_index":1650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["asc",{"_index":1477,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["async",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/RatingController.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":111,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"injectables/EmailService.html":{},"coverage.html":{}}}],["auth.dto",{"_index":1277,"title":{},"body":{"classes/UpdateAuthDto.html":{}}}],["auth.dto.ts",{"_index":599,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["auth.guard",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{}}}],["auth.guard.ts",{"_index":725,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"classes/KakaoAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/NaverAuthGuard.html":{},"coverage.html":{}}}],["auth.strategy",{"_index":333,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.strategy.ts",{"_index":729,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"coverage.html":{}}}],["auth.strategy.ts:10",{"_index":800,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["auth.strategy.ts:12",{"_index":734,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["auth.strategy.ts:16",{"_index":831,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["auth.strategy.ts:21",{"_index":802,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["auth.strategy.ts:23",{"_index":816,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["auth.strategy.ts:25",{"_index":739,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["auth.strategy.ts:9",{"_index":829,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["auth/auth.controller",{"_index":331,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalAuthStrategy.html":{}}}],["auth/guards/google",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/guards/jwt",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{}}}],["auth/guards/kakao",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/guards/local",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/guards/naver",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/interfaces/requestwithuser.interface",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{}}}],["auth/interfaces/tokenpayload.interface",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthStrategy.html":{}}}],["auth/interfaces/verificationtokenpayload.interface",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth/strategies/google",{"_index":337,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/strategies/jwt",{"_index":334,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/strategies/kakao",{"_index":335,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/strategies/local",{"_index":332,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/strategies/naver",{"_index":336,"title":{},"body":{"modules/AuthModule.html":{}}}],["authcontroller",{"_index":114,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":727,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"classes/KakaoAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/NaverAuthGuard.html":{}}}],["authguard('jwt",{"_index":797,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard(provider.google",{"_index":726,"title":{},"body":{"injectables/GoogleAuthGuard.html":{}}}],["authguard(provider.kakao",{"_index":811,"title":{},"body":{"classes/KakaoAuthGuard.html":{}}}],["authguard(provider.local",{"_index":826,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authguard(provider.naver",{"_index":839,"title":{},"body":{"injectables/NaverAuthGuard.html":{}}}],["authmodule",{"_index":79,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"index.html":{},"modules.html":{}}}],["author",{"_index":1495,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":222,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalAuthStrategy.html":{},"coverage.html":{},"index.html":{}}}],["auto",{"_index":1560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["autoloadentities",{"_index":698,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["automatically",{"_index":1554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["available",{"_index":1486,"title":{},"body":{"modules.html":{}}}],["await",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/RatingController.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["background",{"_index":1521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["badrequestexception",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('token",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('wrong",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["baseapidocument",{"_index":459,"title":{"classes/BaseAPIDocument.html":{}},"body":{"classes/BaseAPIDocument.html":{},"coverage.html":{}}}],["bcrypt",{"_index":1312,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["bcrypt.compare(apassword",{"_index":1338,"title":{},"body":{"entities/User.html":{}}}],["bcrypt.gensalt(10",{"_index":1323,"title":{},"body":{"entities/User.html":{}}}],["bcrypt.hash(password",{"_index":1400,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(this.password",{"_index":1325,"title":{},"body":{"entities/User.html":{}}}],["bcryptjs",{"_index":1313,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bearer",{"_index":478,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["beartoken",{"_index":806,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["beforeinsert",{"_index":1310,"title":{},"body":{"entities/User.html":{}}}],["beforesavefunction",{"_index":1320,"title":{},"body":{"entities/User.html":{}}}],["bicubic",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["block",{"_index":1553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["body",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["bold",{"_index":1622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":656,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/PageMetaDto.html":{},"entities/Product.html":{},"entities/Reservation.html":{}}}],["bootstrap",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["border",{"_index":1513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["both",{"_index":1580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bottom",{"_index":1578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["box",{"_index":1569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brand",{"_index":613,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["browse",{"_index":1487,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1488,"title":{},"body":{"modules.html":{}}}],["btn",{"_index":1614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":482,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["builder",{"_index":462,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["button",{"_index":1677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buttons",{"_index":1613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buyer",{"_index":643,"title":{},"body":{"classes/CreateRatingDto.html":{},"entities/Rating.html":{}}}],["ca",{"_index":1690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cache",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"modules/RedisModule.html":{},"dependencies.html":{}}}],["cache_manager",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["cachemanger",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["cachemodule",{"_index":1152,"title":{},"body":{"modules/RedisModule.html":{}}}],["cachemodule.registerasync",{"_index":1155,"title":{},"body":{"modules/RedisModule.html":{}}}],["call",{"_index":1670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callbackurl",{"_index":749,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["callhandler",{"_index":1261,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["capitalize",{"_index":1598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KakaoAuthStrategy.html":{},"entities/User.html":{}}}],["catch(exception",{"_index":776,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":781,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["category",{"_index":614,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["category.length",{"_index":1087,"title":{},"body":{"injectables/ProductService.html":{}}}],["center",{"_index":1581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["centered",{"_index":1563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cfg",{"_index":686,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["cfg.get('postgres_db",{"_index":695,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["cfg.get('postgres_host",{"_index":689,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["cfg.get('postgres_password",{"_index":693,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["cfg.get('postgres_port",{"_index":691,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["cfg.get('postgres_username",{"_index":692,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["cfg.get('redis_host",{"_index":1156,"title":{},"body":{"modules/RedisModule.html":{}}}],["cfg.get('redis_password",{"_index":1159,"title":{},"body":{"modules/RedisModule.html":{}}}],["cfg.get('redis_port",{"_index":1157,"title":{},"body":{"modules/RedisModule.html":{}}}],["cfg.get('redis_ttl",{"_index":1161,"title":{},"body":{"modules/RedisModule.html":{}}}],["cfg.get('redis_user",{"_index":1158,"title":{},"body":{"modules/RedisModule.html":{}}}],["changepassword",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["changepassword(@body",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["changepassword(changepassworddto",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["changepassword(email",{"_index":1367,"title":{},"body":{"injectables/UsersService.html":{}}}],["changepassworddto",{"_index":134,"title":{"classes/ChangePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["changepassworddto.newpassword",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["changepasswordwithtoken",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["changepasswordwithtoken(userid",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":48,"title":{"classes/Auth.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/KakaoAuthGuard.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":112,"title":{},"body":{"classes/Auth.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/KakaoAuthGuard.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["clear",{"_index":1579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["click",{"_index":1676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clientid",{"_index":745,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["clients",{"_index":1662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clientsecret",{"_index":747,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["close",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["cluster_appmodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authmodule",{"_index":318,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_imports",{"_index":319,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":320,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_commentmodule",{"_index":551,"title":{},"body":{"modules/CommentModule.html":{},"index.html":{}}}],["cluster_commentmodule_providers",{"_index":552,"title":{},"body":{"modules/CommentModule.html":{},"index.html":{}}}],["cluster_emailmodule",{"_index":700,"title":{},"body":{"modules/EmailModule.html":{},"index.html":{}}}],["cluster_emailmodule_exports",{"_index":701,"title":{},"body":{"modules/EmailModule.html":{},"index.html":{}}}],["cluster_emailmodule_providers",{"_index":702,"title":{},"body":{"modules/EmailModule.html":{},"index.html":{}}}],["cluster_ordermodule",{"_index":887,"title":{},"body":{"modules/OrderModule.html":{},"index.html":{}}}],["cluster_ordermodule_providers",{"_index":888,"title":{},"body":{"modules/OrderModule.html":{},"index.html":{}}}],["cluster_productmodule",{"_index":1058,"title":{},"body":{"modules/ProductModule.html":{},"index.html":{}}}],["cluster_productmodule_providers",{"_index":1059,"title":{},"body":{"modules/ProductModule.html":{},"index.html":{}}}],["cluster_ratingmodule",{"_index":1132,"title":{},"body":{"modules/RatingModule.html":{},"index.html":{}}}],["cluster_ratingmodule_providers",{"_index":1133,"title":{},"body":{"modules/RatingModule.html":{},"index.html":{}}}],["cluster_reservationmodule",{"_index":1211,"title":{},"body":{"modules/ReservationModule.html":{},"index.html":{}}}],["cluster_reservationmodule_providers",{"_index":1212,"title":{},"body":{"modules/ReservationModule.html":{},"index.html":{}}}],["cluster_usersmodule",{"_index":1355,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["cluster_usersmodule_exports",{"_index":1357,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["cluster_usersmodule_providers",{"_index":1356,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["code",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfirmEmailDto.html":{}}}],["collapse",{"_index":1539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["color",{"_index":1522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":510,"title":{},"body":{"entities/Comment.html":{},"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"entities/User.html":{}}}],["column('text",{"_index":984,"title":{},"body":{"entities/Product.html":{}}}],["column({default",{"_index":992,"title":{},"body":{"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{}}}],["column({nullable",{"_index":1301,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":1170,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["column({unique",{"_index":1298,"title":{},"body":{"entities/User.html":{}}}],["comment",{"_index":506,"title":{"entities/Comment.html":{}},"body":{"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateReservationDto.html":{},"entities/Product.html":{},"entities/User.html":{},"coverage.html":{}}}],["comment'})@apibearerauth('access",{"_index":535,"title":{},"body":{"controllers/CommentController.html":{}}}],["comment'})@isstring",{"_index":602,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateReservationDto.html":{}}}],["comment.dto",{"_index":544,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/UpdateCommentDto.html":{}}}],["comment.dto.ts",{"_index":601,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:11",{"_index":603,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.dto.ts:18",{"_index":606,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.product",{"_index":988,"title":{},"body":{"entities/Product.html":{}}}],["comment.user",{"_index":1296,"title":{},"body":{"entities/User.html":{}}}],["comment/comment.controller",{"_index":556,"title":{},"body":{"modules/CommentModule.html":{}}}],["comment/comment.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["comment/comment.service",{"_index":542,"title":{},"body":{"controllers/CommentController.html":{},"modules/CommentModule.html":{}}}],["comment/dto/create",{"_index":543,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{}}}],["comment/entities/comment.entity",{"_index":557,"title":{},"body":{"modules/CommentModule.html":{},"injectables/CommentService.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["commentcontroller",{"_index":525,"title":{"controllers/CommentController.html":{}},"body":{"controllers/CommentController.html":{},"modules/CommentModule.html":{},"coverage.html":{}}}],["commentgeybyid",{"_index":560,"title":{},"body":{"injectables/CommentService.html":{}}}],["commentgeybyid(id",{"_index":565,"title":{},"body":{"injectables/CommentService.html":{}}}],["commentmodule",{"_index":80,"title":{"modules/CommentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentModule.html":{},"index.html":{},"modules.html":{}}}],["commentrepository",{"_index":564,"title":{},"body":{"injectables/CommentService.html":{}}}],["comments",{"_index":980,"title":{},"body":{"entities/Product.html":{},"injectables/ProductService.html":{},"entities/User.html":{}}}],["commentservice",{"_index":541,"title":{"injectables/CommentService.html":{}},"body":{"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"coverage.html":{},"index.html":{}}}],["common/config/config.module",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["common/constants/order.constants",{"_index":968,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["common/dtos/page",{"_index":911,"title":{},"body":{"classes/PageDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["common/dtos/page.dto",{"_index":1039,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["common/entities/common.entity",{"_index":521,"title":{},"body":{"entities/Comment.html":{},"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"entities/User.html":{}}}],["common/interfaces/page",{"_index":931,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["common/template/verificationemail",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["commonentity",{"_index":520,"title":{"classes/CommonEntity.html":{}},"body":{"entities/Comment.html":{},"classes/CommonEntity.html":{},"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"entities/User.html":{},"coverage.html":{}}}],["company",{"_index":1683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["completed",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["compodoc/compodoc",{"_index":1426,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":10,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/RedisModule.html":{}}}],["configmodule.forroot",{"_index":15,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["configservice",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"modules/RedisModule.html":{}}}],["configservice.get('accesstoken_secret_key",{"_index":808,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["configservice.get('email_password",{"_index":721,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_service",{"_index":718,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_user",{"_index":719,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('google_auth_callback_url",{"_index":750,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["configservice.get('google_auth_clientid",{"_index":746,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["configservice.get('google_auth_clientsecret",{"_index":748,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["configservice.get('kakao_auth_callback_url",{"_index":820,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["configservice.get('kakao_auth_clientid",{"_index":819,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["configservice.get('naver_auth_callback_url",{"_index":845,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["configservice.get('naver_auth_clientid",{"_index":843,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["configservice.get('naver_auth_clientsecret",{"_index":844,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["confirmemail",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["confirmemail(@body",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmemail(confirmemaildto",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["confirmemaildto",{"_index":145,"title":{"classes/ConfirmEmailDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["confirmemaildto.code",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log",{"_index":1246,"title":{},"body":{"injectables/ReservationService.html":{}}}],["console.log(\"dsdad\",reservationquery",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('google",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(category",{"_index":1091,"title":{},"body":{"injectables/ProductService.html":{}}}],["console.log(createratingdto",{"_index":1149,"title":{},"body":{"injectables/RatingService.html":{}}}],["console.log(err",{"_index":1335,"title":{},"body":{"entities/User.html":{}}}],["console.log(newrating",{"_index":1131,"title":{},"body":{"controllers/RatingController.html":{}}}],["console.log(newreservation",{"_index":1233,"title":{},"body":{"injectables/ReservationService.html":{}}}],["console.log(userinput",{"_index":761,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["const",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KakaoAuthStrategy.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/RatingController.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"injectables/ReservationService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":828,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["constructor(commentrepository",{"_index":561,"title":{},"body":{"injectables/CommentService.html":{}}}],["constructor(configservice",{"_index":707,"title":{},"body":{"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["constructor(data",{"_index":904,"title":{},"body":{"classes/PageDto.html":{}}}],["constructor(private",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CommentController.html":{},"injectables/EmailService.html":{},"injectables/LocalAuthStrategy.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{}}}],["constructor(productrepository",{"_index":1068,"title":{},"body":{"injectables/ProductService.html":{}}}],["constructor(ratingrepository",{"_index":1141,"title":{},"body":{"injectables/RatingService.html":{}}}],["constructor(reservationrepository",{"_index":1220,"title":{},"body":{"injectables/ReservationService.html":{}}}],["constructor(undefined",{"_index":923,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["constructor(userrepository",{"_index":1364,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthStrategy.html":{}}}],["container",{"_index":1549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["content",{"_index":1568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["context",{"_index":1263,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["controller",{"_index":51,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('comment",{"_index":546,"title":{},"body":{"controllers/CommentController.html":{}}}],["controller('order",{"_index":877,"title":{},"body":{"controllers/OrderController.html":{}}}],["controller('product",{"_index":1041,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller('rating",{"_index":1127,"title":{},"body":{"controllers/RatingController.html":{}}}],["controller('reservation",{"_index":1200,"title":{},"body":{"controllers/ReservationController.html":{}}}],["controller('users",{"_index":1349,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["cookie",{"_index":1457,"title":{},"body":{"dependencies.html":{}}}],["count",{"_index":1237,"title":{},"body":{"injectables/ReservationService.html":{}}}],["coverage",{"_index":1403,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":534,"title":{},"body":{"controllers/CommentController.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"controllers/ProductController.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{}}}],["create(@body",{"_index":878,"title":{},"body":{"controllers/OrderController.html":{}}}],["create(createorderdto",{"_index":857,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["createauthdto",{"_index":597,"title":{"classes/CreateAuthDto.html":{}},"body":{"classes/CreateAuthDto.html":{},"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["createcomment",{"_index":527,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{}}}],["createcomment(createcommentdto",{"_index":567,"title":{},"body":{"injectables/CommentService.html":{}}}],["createcomment(req",{"_index":529,"title":{},"body":{"controllers/CommentController.html":{}}}],["createcommentdto",{"_index":530,"title":{"classes/CreateCommentDto.html":{}},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CreateCommentDto.html":{},"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["createcommentdto})@apioperation({summary",{"_index":532,"title":{},"body":{"controllers/CommentController.html":{}}}],["createdat",{"_index":582,"title":{},"body":{"classes/CommonEntity.html":{}}}],["createdatecolumn",{"_index":585,"title":{},"body":{"classes/CommonEntity.html":{}}}],["createorderdto",{"_index":607,"title":{"classes/CreateOrderDto.html":{}},"body":{"classes/CreateOrderDto.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":1502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createproduct",{"_index":1011,"title":{},"body":{"controllers/ProductController.html":{}}}],["createproduct(req",{"_index":1016,"title":{},"body":{"controllers/ProductController.html":{}}}],["createproductdto",{"_index":610,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createproductdto})@apioperation({summary",{"_index":1018,"title":{},"body":{"controllers/ProductController.html":{}}}],["createquerybuilder('comment",{"_index":575,"title":{},"body":{"injectables/CommentService.html":{}}}],["createquerybuilder('product",{"_index":1101,"title":{},"body":{"injectables/ProductService.html":{}}}],["createrating",{"_index":1140,"title":{},"body":{"injectables/RatingService.html":{}}}],["createrating(@body",{"_index":1128,"title":{},"body":{"controllers/RatingController.html":{}}}],["createrating(createratingdto",{"_index":1144,"title":{},"body":{"injectables/RatingService.html":{}}}],["createratingdto",{"_index":640,"title":{"classes/CreateRatingDto.html":{}},"body":{"classes/CreateRatingDto.html":{},"controllers/RatingController.html":{},"injectables/RatingService.html":{},"classes/UpdateRatingDto.html":{},"coverage.html":{}}}],["createreservation",{"_index":1179,"title":{},"body":{"controllers/ReservationController.html":{}}}],["createreservation(req",{"_index":1183,"title":{},"body":{"controllers/ReservationController.html":{}}}],["createreservationdto",{"_index":647,"title":{"classes/CreateReservationDto.html":{}},"body":{"classes/CreateReservationDto.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["createreservationdto})@apioperation({summary",{"_index":1185,"title":{},"body":{"controllers/ReservationController.html":{}}}],["createtransport",{"_index":715,"title":{},"body":{"injectables/EmailService.html":{}}}],["createuser",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":202,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["ctx",{"_index":782,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":785,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":784,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cursor",{"_index":1619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customuser",{"_index":1415,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["d",{"_index":1331,"title":{},"body":{"entities/User.html":{}}}],["data",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"classes/PageDto.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":694,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":81,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"index.html":{},"modules.html":{}}}],["date",{"_index":584,"title":{},"body":{"classes/CommonEntity.html":{},"classes/CreateReservationDto.html":{},"entities/Reservation.html":{}}}],["date().toisostring",{"_index":794,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["db",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProductService.html":{},"injectables/UsersService.html":{}}}],["declarations",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["decodedconfirmationtoken",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodedconfirmationtoken(token",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoration",{"_index":1611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"classes/CommonEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"controllers/OrderController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":464,"title":{},"body":{"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":59,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"injectables/RatingService.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":870,"title":{},"body":{"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":863,"title":{},"body":{"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":1023,"title":{},"body":{"controllers/ProductController.html":{}}}],["delete(':id')@useguards(jwtauthguard)@apioperation({summary",{"_index":1189,"title":{},"body":{"controllers/ReservationController.html":{}}}],["deleted",{"_index":1109,"title":{},"body":{"injectables/ProductService.html":{},"injectables/ReservationService.html":{}}}],["deleteproductbyiid",{"_index":1012,"title":{},"body":{"controllers/ProductController.html":{}}}],["deleteproductbyiid(@param('id",{"_index":1054,"title":{},"body":{"controllers/ProductController.html":{}}}],["deleteproductbyiid(id",{"_index":1022,"title":{},"body":{"controllers/ProductController.html":{}}}],["deletereservationbyid",{"_index":1180,"title":{},"body":{"controllers/ReservationController.html":{},"injectables/ReservationService.html":{}}}],["deletereservationbyid(@param('id",{"_index":1209,"title":{},"body":{"controllers/ReservationController.html":{}}}],["deletereservationbyid(id",{"_index":1188,"title":{},"body":{"controllers/ReservationController.html":{},"injectables/ReservationService.html":{}}}],["dependencies",{"_index":70,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{}}}],["desc",{"_index":509,"title":{},"body":{"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"entities/Product.html":{},"entities/Reservation.html":{},"miscellaneous/enumerations.html":{}}}],["description",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"controllers/CommentController.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{},"properties.html":{}}}],["design",{"_index":1669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["display",{"_index":1552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["displayname",{"_index":753,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["distractions",{"_index":1678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["div",{"_index":1654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":1404,"title":{},"body":{"coverage.html":{}}}],["documentbuilder",{"_index":466,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["don't",{"_index":1692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["done",{"_index":737,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["done(null",{"_index":752,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["down",{"_index":1557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto",{"_index":932,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"coverage.html":{}}}],["element",{"_index":1566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthStrategy.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"miscellaneous/variables.html":{}}}],["email.dto",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["email.dto.ts",{"_index":594,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["email.dto.ts:2",{"_index":596,"title":{},"body":{"classes/ConfirmEmailDto.html":{}}}],["email.dto.ts:3",{"_index":595,"title":{},"body":{"classes/ConfirmEmailDto.html":{}}}],["email/email.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["email/email.service",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{},"modules/EmailModule.html":{}}}],["email_password",{"_index":29,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["email_service",{"_index":27,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["email_user",{"_index":28,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["emailcodebyredis",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailmodule",{"_index":82,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"index.html":{},"modules.html":{}}}],["emails",{"_index":754,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"miscellaneous/variables.html":{}}}],["emails.length",{"_index":757,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["emails[0].value",{"_index":759,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["emailservice",{"_index":352,"title":{"injectables/EmailService.html":{}},"body":{"injectables/AuthService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"coverage.html":{},"index.html":{}}}],["emailvalue",{"_index":756,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["entities",{"_index":507,"title":{},"body":{"entities/Comment.html":{},"modules/DatabaseModule.html":{},"entities/Product.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["entities/rating.entity",{"_index":1137,"title":{},"body":{"modules/RatingModule.html":{}}}],["entity",{"_index":505,"title":{"entities/Comment.html":{},"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"entities/User.html":{}},"body":{"entities/Comment.html":{},"modules/DatabaseModule.html":{},"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":697,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["enum",{"_index":974,"title":{},"body":{"classes/PageOptionsDto.html":{},"entities/User.html":{}}}],["enumerations",{"_index":1473,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":46,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["err",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"entities/User.html":{}}}],["err.status",{"_index":767,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["err?.name",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["error",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{}}}],["error.message",{"_index":795,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ex",{"_index":637,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["exception",{"_index":779,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":773,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:11",{"_index":778,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":788,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":787,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":775,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["executioncontext",{"_index":1259,"title":{},"body":{"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["expired",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":47,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{}}}],["exports",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["express",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/RequestWithUserInterface.html":{},"dependencies.html":{}}}],["extends",{"_index":522,"title":{},"body":{"entities/Comment.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"entities/Product.html":{},"interfaces/ProductInterface.html":{},"entities/Rating.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["externalclass",{"_index":1653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":803,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":805,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["f6f6f6",{"_index":1523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":638,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["false})@isarray",{"_index":621,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["family",{"_index":1525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ffffff",{"_index":1573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{}}}],["fill",{"_index":1567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["findall",{"_index":853,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["findone",{"_index":854,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["findone(@param('id",{"_index":881,"title":{},"body":{"controllers/OrderController.html":{}}}],["findone(id",{"_index":860,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["findoperator",{"_index":1376,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":1628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["font",{"_index":1524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["footer",{"_index":1571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forgot",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotpassword",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["forgotpassword(@body('email",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpassword(email",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["francisco",{"_index":1689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["friendly",{"_index":1643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":1419,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1479,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateaccesstoken",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateaccesstoken(userid",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatenumber",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateotp",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('/profile/:id",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/profile/:id')@apibearerauth('access",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('1234",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':id",{"_index":539,"title":{},"body":{"controllers/CommentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apioperation({summary",{"_index":1029,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["get('google",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/callback",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('kakao",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('kakao/callback",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('naver",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('naver/callback",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apioperation({summary",{"_index":1026,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["getallproducts",{"_index":1013,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["getallproducts(@query('category",{"_index":1042,"title":{},"body":{"controllers/ProductController.html":{}}}],["getallproducts(pageoptionsdto",{"_index":1025,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["getallreservation",{"_index":1181,"title":{},"body":{"controllers/ReservationController.html":{}}}],["getallreservation(user",{"_index":1191,"title":{},"body":{"controllers/ReservationController.html":{}}}],["getallusers",{"_index":1350,"title":{},"body":{"controllers/UsersController.html":{}}}],["getcommentbyid",{"_index":528,"title":{},"body":{"controllers/CommentController.html":{}}}],["getcommentbyid(@param('id",{"_index":549,"title":{},"body":{"controllers/CommentController.html":{}}}],["getcommentbyid(id",{"_index":538,"title":{},"body":{"controllers/CommentController.html":{}}}],["gethello",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getone",{"_index":578,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ProductService.html":{}}}],["getproductbyid",{"_index":1014,"title":{},"body":{"controllers/ProductController.html":{}}}],["getproductbyid(@param('id",{"_index":1050,"title":{},"body":{"controllers/ProductController.html":{}}}],["getproductbyid(id",{"_index":1028,"title":{},"body":{"controllers/ProductController.html":{}}}],["getreservationbyid",{"_index":1182,"title":{},"body":{"controllers/ReservationController.html":{}}}],["getreservationbyid(@param('id",{"_index":1207,"title":{},"body":{"controllers/ReservationController.html":{}}}],["getreservationbyid(id",{"_index":1193,"title":{},"body":{"controllers/ReservationController.html":{}}}],["getskip",{"_index":965,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["getuserbyemail",{"_index":1363,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":1370,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid",{"_index":1342,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyid(@param('id",{"_index":1353,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(id",{"_index":1344,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserinfobytoken",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["getuserinfobytoken(id",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["global",{"_index":1507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["goes",{"_index":1510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["good",{"_index":1679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["google",{"_index":742,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["google_auth_callback_url",{"_index":37,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["google_auth_clientid",{"_index":35,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["google_auth_clientsecret",{"_index":36,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["googleauthguard",{"_index":238,"title":{"injectables/GoogleAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthGuard.html":{},"coverage.html":{}}}],["googleauthstrategy",{"_index":321,"title":{"injectables/GoogleAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthStrategy.html":{},"coverage.html":{},"index.html":{}}}],["googlelogin",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogincallback",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogincallback(req",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["graph",{"_index":1485,"title":{},"body":{"modules.html":{}}}],["gravatar",{"_index":1314,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["gravatar.url(this.email",{"_index":1327,"title":{},"body":{"entities/User.html":{}}}],["guard",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["h1",{"_index":1587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["h2",{"_index":1588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["h3",{"_index":1589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["h4",{"_index":1590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hapi/joi",{"_index":13,"title":{},"body":{"modules/AppConfigModule.html":{},"dependencies.html":{}}}],["hasnextpage",{"_index":917,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":918,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["head",{"_index":1652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["header",{"_index":480,"title":{},"body":{"classes/BaseAPIDocument.html":{},"miscellaneous/variables.html":{}}}],["height",{"_index":1534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hello",{"_index":109,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":1511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hi",{"_index":1666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hidden",{"_index":1636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hide",{"_index":1637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hope",{"_index":1681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":688,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/RedisModule.html":{}}}],["host.switchtohttp",{"_index":783,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["hr",{"_index":1640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["html",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["htmlemail",{"_index":1694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":476,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["http://localhost:3000",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@get('google')@useguards(googleauthguard",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@get('google/callback')@useguards(googleauthguard",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@get('kakao')@useguards(kakaoauthguard",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@get('kakao/callback')@useguards(kakaoauthguard",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@get('naver')@useguards(naverauthguard",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@get('naver/callback')@useguards(naverauthguard",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/ProductService.html":{},"injectables/ReservationService.html":{},"entities/User.html":{}}}],["httpexception(\"not",{"_index":1252,"title":{},"body":{"injectables/ReservationService.html":{}}}],["httpexception('no",{"_index":579,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ProductService.html":{},"injectables/ReservationService.html":{}}}],["httpexception(err.message",{"_index":1339,"title":{},"body":{"entities/User.html":{}}}],["httpexceptionfilter",{"_index":771,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https",{"_index":1334,"title":{},"body":{"entities/User.html":{}}}],["httpstatus",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CommentService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/ProductService.html":{},"injectables/ReservationService.html":{},"entities/User.html":{}}}],["httpstatus.bad_request",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.conflict",{"_index":766,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"entities/User.html":{}}}],["httpstatus.forbidden",{"_index":1253,"title":{},"body":{"injectables/ReservationService.html":{}}}],["httpstatus.not_found",{"_index":580,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ProductService.html":{},"injectables/ReservationService.html":{}}}],["httpstatus.ok",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["id",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1405,"title":{},"body":{"coverage.html":{}}}],["if(reservation.user.id",{"_index":1250,"title":{},"body":{"injectables/ReservationService.html":{}}}],["img",{"_index":1512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implements",{"_index":774,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{}}}],["import",{"_index":7,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["important",{"_index":1561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["imports",{"_index":14,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/RedisModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{}}}],["inc",{"_index":1684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["index",{"_index":55,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"injectables/RatingService.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["inherit",{"_index":1657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initializeoptions",{"_index":463,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["inject",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["inject(cache_manager",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":105,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CommentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/OrderService.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CommentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/OrderService.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":106,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CommentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/OrderService.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["injectrepository",{"_index":569,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"injectables/ReservationService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(comment",{"_index":570,"title":{},"body":{"injectables/CommentService.html":{}}}],["injectrepository(product",{"_index":1080,"title":{},"body":{"injectables/ProductService.html":{}}}],["injectrepository(rating",{"_index":1147,"title":{},"body":{"injectables/RatingService.html":{}}}],["injectrepository(reservation",{"_index":1231,"title":{},"body":{"injectables/ReservationService.html":{}}}],["injectrepository(user",{"_index":1377,"title":{},"body":{"injectables/UsersService.html":{}}}],["inline",{"_index":1621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insert",{"_index":486,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["inside",{"_index":1607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intercept",{"_index":1257,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":1258,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["interface",{"_index":944,"title":{"interfaces/PageMetaDtoParametersInterface.html":{},"interfaces/ProductInterface.html":{},"interfaces/RequestWithUserInterface.html":{},"interfaces/TokenPayloadInterface.html":{},"interfaces/VerificationTokenPayloadInterface.html":{}},"body":{"interfaces/PageMetaDtoParametersInterface.html":{},"interfaces/ProductInterface.html":{},"interfaces/RequestWithUserInterface.html":{},"interfaces/TokenPayloadInterface.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":945,"title":{},"body":{"interfaces/PageMetaDtoParametersInterface.html":{},"interfaces/ProductInterface.html":{},"interfaces/RequestWithUserInterface.html":{},"interfaces/TokenPayloadInterface.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"index.html":{}}}],["internalservererrorexception",{"_index":1311,"title":{},"body":{"entities/User.html":{}}}],["interpolation",{"_index":1516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isarray",{"_index":634,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/PageDto.html":{}}}],["isarray()@apiproperty({isarray",{"_index":908,"title":{},"body":{"classes/PageDto.html":{}}}],["isboolean",{"_index":660,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["isemail",{"_index":676,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{}}}],["isenum",{"_index":969,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(orderconstants",{"_index":975,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isglobal",{"_index":1162,"title":{},"body":{"modules/RedisModule.html":{}}}],["isint",{"_index":970,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isnotempty",{"_index":635,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":636,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isoptional",{"_index":677,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PageOptionsDto.html":{}}}],["ispasswordmatch",{"_index":1337,"title":{},"body":{"entities/User.html":{}}}],["ispasswordmatched",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["isselling",{"_index":981,"title":{},"body":{"entities/Product.html":{}}}],["isstring",{"_index":492,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["itemcount",{"_index":919,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"injectables/ProductService.html":{}}}],["joi",{"_index":12,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.number().required",{"_index":21,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.object",{"_index":17,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().required",{"_index":19,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joincolumn",{"_index":517,"title":{},"body":{"entities/Comment.html":{},"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"entities/User.html":{}}}],["json.stringify(user",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["jwt",{"_index":479,"title":{},"body":{"classes/BaseAPIDocument.html":{},"injectables/JwtAuthStrategy.html":{},"dependencies.html":{}}}],["jwt_chagne_password_expiresin",{"_index":44,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["jwt_chagne_password_secret",{"_index":43,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["jwtauthguard",{"_index":234,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"coverage.html":{}}}],["jwtauthstrategy",{"_index":322,"title":{"injectables/JwtAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthStrategy.html":{},"coverage.html":{},"index.html":{}}}],["jwtfromrequest",{"_index":804,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["jwtmodule",{"_index":327,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":338,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["kakao",{"_index":818,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["kakao_auth_callback_url",{"_index":39,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["kakao_auth_clientid",{"_index":38,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["kakaoauthguard",{"_index":240,"title":{"classes/KakaoAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"classes/KakaoAuthGuard.html":{},"coverage.html":{}}}],["kakaoauthstrategy",{"_index":323,"title":{"injectables/KakaoAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/KakaoAuthStrategy.html":{},"coverage.html":{},"index.html":{}}}],["kakaologin",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaologincallback",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaologincallback(@req",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaologincallback(req",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["koreamarket",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["koreamarketapi",{"_index":472,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["koreanmarket",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["last",{"_index":1627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["left",{"_index":1608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leftjoinandselect('comment.user",{"_index":576,"title":{},"body":{"injectables/CommentService.html":{}}}],["leftjoinandselect('comments.user",{"_index":1104,"title":{},"body":{"injectables/ProductService.html":{}}}],["leftjoinandselect('product.comments",{"_index":1103,"title":{},"body":{"injectables/ProductService.html":{}}}],["leftjoinandselect('product.seller",{"_index":1102,"title":{},"body":{"injectables/ProductService.html":{}}}],["leftjoinandselect('user.reservation",{"_index":1383,"title":{},"body":{"injectables/UsersService.html":{}}}],["legend",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["li",{"_index":1603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":1493,"title":{},"body":{"properties.html":{}}}],["line",{"_index":1533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["link",{"_index":1656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["list",{"_index":1604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["local",{"_index":680,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/LocalAuthStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["local'})@isstring()@isoptional",{"_index":674,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["localauthguard",{"_index":230,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localauthstrategy",{"_index":324,"title":{"injectables/LocalAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalAuthStrategy.html":{},"coverage.html":{},"index.html":{}}}],["location",{"_index":650,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/Reservation.html":{}}}],["login",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(loginuserdto",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuserdto",{"_index":228,"title":{"classes/LoginUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["loginuserdto.password",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuserdto})@httpcode(200)@useguards(localauthguard)@apiresponse({description",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["lspace",{"_index":1542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["luck",{"_index":1680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mail",{"_index":713,"title":{},"body":{"injectables/EmailService.html":{}}}],["mail.options",{"_index":710,"title":{},"body":{"injectables/EmailService.html":{}}}],["main",{"_index":1572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mainpageurl",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["make",{"_index":1551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["makes",{"_index":1562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manager",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{},"modules/RedisModule.html":{},"dependencies.html":{}}}],["manytomany",{"_index":1119,"title":{},"body":{"entities/Rating.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":1115,"title":{},"body":{"entities/Rating.html":{},"entities/User.html":{}}}],["manytoone",{"_index":518,"title":{},"body":{"entities/Comment.html":{},"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{}}}],["manytoone(undefined",{"_index":512,"title":{},"body":{"entities/Comment.html":{},"entities/Product.html":{},"entities/Reservation.html":{}}}],["map",{"_index":1266,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["margin",{"_index":1536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matched",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["matches",{"_index":495,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["matches(/^(?=.*[a",{"_index":503,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["matching",{"_index":50,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.itemcount",{"_index":941,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["max",{"_index":971,"title":{},"body":{"classes/PageOptionsDto.html":{},"miscellaneous/variables.html":{}}}],["max(50",{"_index":978,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["maximum",{"_index":961,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["mb0",{"_index":1631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["media",{"_index":1644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":790,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["messageviewbody",{"_index":1658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meta",{"_index":903,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"coverage.html":{}}}],["meta.dto",{"_index":912,"title":{},"body":{"classes/PageDto.html":{},"injectables/ProductService.html":{}}}],["meta.dto.ts",{"_index":916,"title":{},"body":{"classes/PageMetaDto.html":{},"coverage.html":{}}}],["meta.dto.ts:12",{"_index":927,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:15",{"_index":929,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:18",{"_index":926,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:21",{"_index":925,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:6",{"_index":928,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:9",{"_index":930,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["metadata",{"_index":1468,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":972,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["min(1",{"_index":977,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["minimum",{"_index":976,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["minlength",{"_index":496,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["minlength(7",{"_index":500,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["miscellaneous",{"_index":1472,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":1332,"title":{},"body":{"entities/User.html":{}}}],["mobile",{"_index":1642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":1517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["model",{"_index":1005,"title":{},"body":{"entities/Product.html":{}}}],["module",{"_index":0,"title":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/RedisModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/RedisModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/RedisModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["ms",{"_index":1515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mso",{"_index":1541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mt0",{"_index":1630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["navaer_auth_callback_url",{"_index":42,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["naver",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{},"injectables/NaverAuthStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["naver_auth_clientid",{"_index":40,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["naver_auth_clientsecret",{"_index":41,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["naverauthguard",{"_index":242,"title":{"injectables/NaverAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/NaverAuthGuard.html":{},"coverage.html":{}}}],["naverauthstrategy",{"_index":325,"title":{"injectables/NaverAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/NaverAuthStrategy.html":{},"coverage.html":{},"index.html":{}}}],["naverlogin",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["naverlogincallback",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["naverlogincallback(@req",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{}}}],["naverlogincallback(req",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["nbsp",{"_index":1665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestinterceptor",{"_index":1265,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/common/cache",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{},"modules/RedisModule.html":{}}}],["nestjs/config",{"_index":11,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"modules/RedisModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1431,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":328,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1275,"title":{},"body":{"classes/UpdateAuthDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":330,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1433,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"controllers/CommentController.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"controllers/OrderController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":555,"title":{},"body":{"modules/CommentModule.html":{},"injectables/CommentService.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"injectables/CommentService.html":{},"classes/CreateReservationDto.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/OrderService.html":{},"injectables/ProductService.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newcomment",{"_index":571,"title":{},"body":{"injectables/CommentService.html":{}}}],["newpassword",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/NewPasswordDto.html":{}}}],["newpassword(newpassworddto",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["newpassworddto",{"_index":182,"title":{"classes/NewPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/NewPasswordDto.html":{},"coverage.html":{}}}],["newpassworddto.newpassword",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["newproduct",{"_index":1048,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["newrating",{"_index":1129,"title":{},"body":{"controllers/RatingController.html":{},"injectables/RatingService.html":{}}}],["newreservation",{"_index":1201,"title":{},"body":{"controllers/ReservationController.html":{},"injectables/ReservationService.html":{}}}],["newsignup",{"_index":1352,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["newsignup.provider",{"_index":1396,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser",{"_index":769,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["next",{"_index":1260,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1269,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["nickname",{"_index":846,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["nodemailer",{"_index":716,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":714,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":705,"title":{},"body":{"injectables/EmailService.html":{}}}],["none",{"_index":1514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["normal",{"_index":1601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":1375,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception('no",{"_index":1399,"title":{},"body":{"injectables/UsersService.html":{}}}],["now",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["null",{"_index":681,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"entities/User.html":{}}}],["nullable",{"_index":990,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["number",{"_index":628,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/OrderService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"entities/Rating.html":{},"miscellaneous/variables.html":{}}}],["oauth2",{"_index":743,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{}}}],["object",{"_index":1006,"title":{},"body":{"entities/Product.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":1270,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["observable",{"_index":1264,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["ok",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["ol",{"_index":1600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onetomany",{"_index":1003,"title":{},"body":{"entities/Product.html":{},"entities/Reservation.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":987,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["onetoone",{"_index":1004,"title":{},"body":{"entities/Product.html":{},"entities/Reservation.html":{}}}],["onetoone(undefined",{"_index":998,"title":{},"body":{"entities/Product.html":{},"entities/Reservation.html":{}}}],["opacity",{"_index":1634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["option",{"_index":722,"title":{},"body":{"injectables/EmailService.html":{}}}],["optional",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":712,"title":{},"body":{"injectables/EmailService.html":{}}}],["options.dto",{"_index":948,"title":{},"body":{"interfaces/PageMetaDtoParametersInterface.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["options.dto.ts",{"_index":949,"title":{},"body":{"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:10",{"_index":956,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:20",{"_index":959,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:32",{"_index":964,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:34",{"_index":966,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["order",{"_index":849,"title":{"classes/Order.html":{}},"body":{"classes/Order.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["order.dto",{"_index":874,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/UpdateOrderDto.html":{}}}],["order.dto.ts",{"_index":609,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["order/dto/create",{"_index":873,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["order/dto/update",{"_index":875,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["order/order.controller",{"_index":890,"title":{},"body":{"modules/OrderModule.html":{}}}],["order/order.module",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["order/order.service",{"_index":872,"title":{},"body":{"controllers/OrderController.html":{},"modules/OrderModule.html":{}}}],["orderby('product.createdat",{"_index":1094,"title":{},"body":{"injectables/ProductService.html":{}}}],["orderconstants",{"_index":952,"title":{},"body":{"classes/PageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["orderconstants.asc",{"_index":953,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["ordercontroller",{"_index":851,"title":{"controllers/OrderController.html":{}},"body":{"controllers/OrderController.html":{},"modules/OrderModule.html":{},"coverage.html":{}}}],["ordermodule",{"_index":83,"title":{"modules/OrderModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OrderModule.html":{},"index.html":{},"modules.html":{}}}],["orderservice",{"_index":871,"title":{"injectables/OrderService.html":{}},"body":{"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"coverage.html":{},"index.html":{}}}],["otp",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["out",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["overflow",{"_index":1635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overview",{"_index":1481,"title":{"index.html":{}},"body":{"index.html":{}}}],["p",{"_index":1582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["package",{"_index":1425,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":1537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["page",{"_index":920,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["pagecount",{"_index":921,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":901,"title":{"classes/PageDto.html":{}},"body":{"classes/PageDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["pagedto(entities",{"_index":1099,"title":{},"body":{"injectables/ProductService.html":{}}}],["pagemetadto",{"_index":906,"title":{"classes/PageMetaDto.html":{}},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["pagemetadtoparametersinterface",{"_index":924,"title":{"interfaces/PageMetaDtoParametersInterface.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"coverage.html":{}}}],["pageoptionsdto",{"_index":934,"title":{"classes/PageOptionsDto.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["pageoptionsdto.order",{"_index":1095,"title":{},"body":{"injectables/ProductService.html":{}}}],["pageoptionsdto.page",{"_index":936,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.take",{"_index":938,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["param",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{}}}],["parameters",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parameters.interface",{"_index":933,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["parameters.interface.ts",{"_index":947,"title":{},"body":{"interfaces/PageMetaDtoParametersInterface.html":{},"coverage.html":{}}}],["parser",{"_index":1438,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":1274,"title":{},"body":{"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createauthdto",{"_index":1273,"title":{},"body":{"classes/UpdateAuthDto.html":{}}}],["partialtype(createcommentdto",{"_index":1280,"title":{},"body":{"classes/UpdateCommentDto.html":{}}}],["partialtype(createorderdto",{"_index":1282,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["partialtype(createproductdto",{"_index":1285,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createratingdto",{"_index":1288,"title":{},"body":{"classes/UpdateRatingDto.html":{}}}],["partialtype(createreservationdto",{"_index":1291,"title":{},"body":{"classes/UpdateReservationDto.html":{}}}],["partialtype(createuserdto",{"_index":1294,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pass",{"_index":720,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":741,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/ReservationService.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":329,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":730,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["passportstrategy(strategy",{"_index":799,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{}}}],["password",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"modules/RedisModule.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["password.dto",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["password.dto.ts",{"_index":484,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/NewPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:10",{"_index":493,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:13",{"_index":848,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["password.dto.ts:20",{"_index":491,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password_change_url",{"_index":45,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AuthService.html":{}}}],["patch",{"_index":869,"title":{},"body":{"controllers/OrderController.html":{},"controllers/RatingController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":867,"title":{},"body":{"controllers/OrderController.html":{}}}],["payload",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthStrategy.html":{}}}],["payload.email",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["pg",{"_index":1330,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["phone",{"_index":1558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["picture",{"_index":755,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["pointer",{"_index":1620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["port",{"_index":690,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["position",{"_index":1606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{}}}],["post('/create",{"_index":1047,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UsersController.html":{}}}],["post('/create')@apibody({type",{"_index":1017,"title":{},"body":{"controllers/ProductController.html":{}}}],["post('change/password",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('change/password')@apioperation({summary",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('confirm/email",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('create",{"_index":547,"title":{},"body":{"controllers/CommentController.html":{}}}],["post('create')@apibody({type",{"_index":531,"title":{},"body":{"controllers/CommentController.html":{}}}],["post('forgot/password",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('forgot/password')@apioperation({summary",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@apioperation({summary",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('newpassword",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('newpassword')@apioperation({summary",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('send/email",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('send/email')@apiresponse({description",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup')@apicreatedresponse({description",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apibody({type",{"_index":1184,"title":{},"body":{"controllers/ReservationController.html":{}}}],["postgres",{"_index":687,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres_db",{"_index":24,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["postgres_host",{"_index":18,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["postgres_password",{"_index":23,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["postgres_port",{"_index":20,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["postgres_username",{"_index":22,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["postsignup",{"_index":1343,"title":{},"body":{"controllers/UsersController.html":{}}}],["postsignup(@body",{"_index":1351,"title":{},"body":{"controllers/UsersController.html":{}}}],["postsignup(createuserdto",{"_index":1346,"title":{},"body":{"controllers/UsersController.html":{}}}],["powered",{"_index":1639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{}}}],["preheader",{"_index":1632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preserve",{"_index":1651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preview",{"_index":1664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["price",{"_index":615,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["primary",{"_index":1624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primarygeneratedcolumn",{"_index":591,"title":{},"body":{"classes/CommonEntity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":587,"title":{},"body":{"classes/CommonEntity.html":{}}}],["private",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"injectables/ReservationService.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":683,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["product",{"_index":389,"title":{"entities/Product.html":{}},"body":{"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateReservationDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["product.comments",{"_index":524,"title":{},"body":{"entities/Comment.html":{}}}],["product.comments)@joincolumn",{"_index":513,"title":{},"body":{"entities/Comment.html":{}}}],["product.dto",{"_index":1038,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts",{"_index":612,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:11",{"_index":627,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:19",{"_index":624,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:26",{"_index":630,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:34",{"_index":631,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:42",{"_index":622,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:49",{"_index":633,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:57",{"_index":619,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.id",{"_index":1389,"title":{},"body":{"injectables/UsersService.html":{}}}],["product.reservation",{"_index":1175,"title":{},"body":{"entities/Reservation.html":{}}}],["product.reservation)@joincolumn",{"_index":1167,"title":{},"body":{"entities/Reservation.html":{}}}],["product.seller",{"_index":1245,"title":{},"body":{"injectables/ReservationService.html":{},"entities/User.html":{}}}],["product/dto/create",{"_index":1037,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{}}}],["product/entities/product.entity",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/CreateReservationDto.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["product/product.controller",{"_index":1061,"title":{},"body":{"modules/ProductModule.html":{}}}],["product/product.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["product/product.service",{"_index":1036,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{}}}],["productbrand",{"_index":639,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["productbrand'})@isstring()@isnotempty",{"_index":618,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["productcontroller",{"_index":1009,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["productcreate",{"_index":1064,"title":{},"body":{"injectables/ProductService.html":{}}}],["productcreate(createproductdto",{"_index":1072,"title":{},"body":{"injectables/ProductService.html":{}}}],["productdeletebyid",{"_index":1065,"title":{},"body":{"injectables/ProductService.html":{}}}],["productdeletebyid(id",{"_index":1074,"title":{},"body":{"injectables/ProductService.html":{}}}],["productgetall(category",{"_index":1083,"title":{},"body":{"injectables/ProductService.html":{}}}],["productgetbyid",{"_index":1066,"title":{},"body":{"injectables/ProductService.html":{}}}],["productgetbyid(id",{"_index":1076,"title":{},"body":{"injectables/ProductService.html":{}}}],["productid",{"_index":604,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateReservationDto.html":{},"injectables/UsersService.html":{}}}],["productid'})@isstring",{"_index":605,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreateReservationDto.html":{}}}],["productimg",{"_index":616,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["productinterface",{"_index":1056,"title":{"interfaces/ProductInterface.html":{}},"body":{"interfaces/ProductInterface.html":{},"coverage.html":{}}}],["productmodule",{"_index":84,"title":{"modules/ProductModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"index.html":{},"modules.html":{}}}],["productname",{"_index":625,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["productname'})@isstring",{"_index":632,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["productname'})@isstring()@isnotempty",{"_index":626,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["productrepository",{"_index":1070,"title":{},"body":{"injectables/ProductService.html":{}}}],["productreservation",{"_index":1217,"title":{},"body":{"injectables/ReservationService.html":{}}}],["productreservation(createreservationdto",{"_index":1224,"title":{},"body":{"injectables/ReservationService.html":{}}}],["products",{"_index":1043,"title":{},"body":{"controllers/ProductController.html":{},"entities/User.html":{}}}],["products'})@apibearerauth('access",{"_index":1020,"title":{},"body":{"controllers/ProductController.html":{}}}],["productservice",{"_index":1035,"title":{"injectables/ProductService.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{},"index.html":{}}}],["productupdatebyid",{"_index":1067,"title":{},"body":{"injectables/ProductService.html":{}}}],["productupdatebyid(id",{"_index":1078,"title":{},"body":{"injectables/ProductService.html":{}}}],["profile",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/UsersService.html":{}}}],["profile(id",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["profile._json.kakao_account",{"_index":823,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["profile._json.properties",{"_index":822,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["profile_image",{"_index":821,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["profileimg",{"_index":663,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"entities/User.html":{}}}],["promise",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/User.html":{}}}],["properties",{"_index":461,"title":{"properties.html":{}},"body":{"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"interfaces/ProductInterface.html":{},"entities/Rating.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"interfaces/TokenPayloadInterface.html":{},"entities/User.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"properties.html":{}}}],["protocol",{"_index":1333,"title":{},"body":{"entities/User.html":{}}}],["provided",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["provider",{"_index":664,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["provider.google",{"_index":732,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["provider.kakao",{"_index":813,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["provider.local",{"_index":1317,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["provider.naver",{"_index":841,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["providers",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["public",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"entities/Comment.html":{},"classes/CommonEntity.html":{},"entities/Product.html":{},"entities/Rating.html":{},"entities/Reservation.html":{},"entities/User.html":{}}}],["purchase",{"_index":651,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/Reservation.html":{}}}],["purpose",{"_index":1674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["put",{"_index":1034,"title":{},"body":{"controllers/ProductController.html":{}}}],["put(':id",{"_index":1052,"title":{},"body":{"controllers/ProductController.html":{}}}],["put(':id')@apioperation({summary",{"_index":1032,"title":{},"body":{"controllers/ProductController.html":{}}}],["query",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{},"injectables/UsersService.html":{}}}],["query('category",{"_index":1045,"title":{},"body":{"controllers/ProductController.html":{}}}],["query('product",{"_index":1204,"title":{},"body":{"controllers/ReservationController.html":{}}}],["query('reservation",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["query('user",{"_index":1203,"title":{},"body":{"controllers/ReservationController.html":{}}}],["query.andwhere('product.id",{"_index":1388,"title":{},"body":{"injectables/UsersService.html":{}}}],["query.andwhere('reservation.id",{"_index":1385,"title":{},"body":{"injectables/UsersService.html":{}}}],["query.getone",{"_index":1390,"title":{},"body":{"injectables/UsersService.html":{}}}],["querybuilder",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProductService.html":{},"injectables/ReservationService.html":{},"injectables/UsersService.html":{}}}],["querybuilder.andwhere(':category",{"_index":1088,"title":{},"body":{"injectables/ProductService.html":{}}}],["querybuilder.andwhere('product.category",{"_index":1093,"title":{},"body":{"injectables/ProductService.html":{}}}],["querybuilder.getcount",{"_index":1098,"title":{},"body":{"injectables/ProductService.html":{}}}],["querybuilder.getrawandentities",{"_index":1090,"title":{},"body":{"injectables/ProductService.html":{},"injectables/ReservationService.html":{},"injectables/UsersService.html":{}}}],["querybuilder.leftjoinandselect('product.comments",{"_index":1086,"title":{},"body":{"injectables/ProductService.html":{}}}],["querybuilder.leftjoinandselect('product.seller",{"_index":1085,"title":{},"body":{"injectables/ProductService.html":{}}}],["querybuilder.leftjoinandselect('reservation.product",{"_index":1241,"title":{},"body":{"injectables/ReservationService.html":{}}}],["querybuilder.leftjoinandselect('reservation.user",{"_index":1240,"title":{},"body":{"injectables/ReservationService.html":{}}}],["querybuilder.leftjoinandselect('user.reservation",{"_index":1380,"title":{},"body":{"injectables/UsersService.html":{}}}],["querybuilder.where('reservation.product.id",{"_index":1243,"title":{},"body":{"injectables/ReservationService.html":{}}}],["querybuilder.where('reservation.user",{"_index":1242,"title":{},"body":{"injectables/ReservationService.html":{}}}],["querybuilder.where('user.reservation",{"_index":1381,"title":{},"body":{"injectables/UsersService.html":{}}}],["r",{"_index":1329,"title":{},"body":{"entities/User.html":{}}}],["radius",{"_index":1574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rating",{"_index":644,"title":{"entities/Rating.html":{}},"body":{"classes/CreateRatingDto.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"entities/User.html":{},"coverage.html":{}}}],["rating.buyer",{"_index":1319,"title":{},"body":{"entities/User.html":{}}}],["rating.buyer)@joincolumn",{"_index":1306,"title":{},"body":{"entities/User.html":{}}}],["rating.controller",{"_index":1136,"title":{},"body":{"modules/RatingModule.html":{}}}],["rating.dto",{"_index":1126,"title":{},"body":{"controllers/RatingController.html":{},"injectables/RatingService.html":{},"classes/UpdateRatingDto.html":{}}}],["rating.dto.ts",{"_index":642,"title":{},"body":{"classes/CreateRatingDto.html":{},"classes/UpdateRatingDto.html":{},"coverage.html":{}}}],["rating.dto.ts:4",{"_index":646,"title":{},"body":{"classes/CreateRatingDto.html":{}}}],["rating.dto.ts:5",{"_index":645,"title":{},"body":{"classes/CreateRatingDto.html":{}}}],["rating.service",{"_index":1135,"title":{},"body":{"modules/RatingModule.html":{}}}],["rating/dto/create",{"_index":1125,"title":{},"body":{"controllers/RatingController.html":{},"injectables/RatingService.html":{},"classes/UpdateRatingDto.html":{}}}],["rating/entities/rating.entity",{"_index":1146,"title":{},"body":{"injectables/RatingService.html":{},"entities/User.html":{}}}],["rating/rating.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["rating/rating.service",{"_index":1124,"title":{},"body":{"controllers/RatingController.html":{}}}],["ratingcontroller",{"_index":1121,"title":{"controllers/RatingController.html":{}},"body":{"controllers/RatingController.html":{},"modules/RatingModule.html":{},"coverage.html":{}}}],["ratingmodule",{"_index":85,"title":{"modules/RatingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RatingModule.html":{},"index.html":{},"modules.html":{}}}],["ratingrepository",{"_index":1143,"title":{},"body":{"injectables/RatingService.html":{}}}],["ratingservice",{"_index":1123,"title":{"injectables/RatingService.html":{}},"body":{"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"coverage.html":{},"index.html":{}}}],["readonly",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentController.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"controllers/UsersController.html":{}}}],["really",{"_index":1671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recipient",{"_index":1675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["record",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["redis",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{},"modules/RedisModule.html":{},"dependencies.html":{}}}],["redis/redis.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_host",{"_index":30,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["redis_password",{"_index":33,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["redis_port",{"_index":31,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["redis_ttl",{"_index":34,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["redis_user",{"_index":32,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["redismodule",{"_index":86,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"index.html":{},"modules.html":{}}}],["redisstore",{"_index":1153,"title":{},"body":{"modules/RedisModule.html":{}}}],["reflect",{"_index":1467,"title":{},"body":{"dependencies.html":{}}}],["refreshtoken",{"_index":815,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["region",{"_index":617,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["relations",{"_index":1107,"title":{},"body":{"injectables/ProductService.html":{},"injectables/ReservationService.html":{},"injectables/UsersService.html":{}}}],["remove",{"_index":855,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["remove(@param('id",{"_index":885,"title":{},"body":{"controllers/OrderController.html":{}}}],["remove(id",{"_index":862,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["removes",{"_index":900,"title":{},"body":{"injectables/OrderService.html":{}}}],["repository",{"_index":562,"title":{},"body":{"injectables/CommentService.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"injectables/ReservationService.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{},"injectables/UsersService.html":{}}}],["req.user",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["req.user.email",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":780,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/ProductInterface.html":{},"interfaces/RequestWithUserInterface.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":1504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestwithuserinterface",{"_index":165,"title":{"interfaces/RequestWithUserInterface.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"interfaces/RequestWithUserInterface.html":{},"controllers/ReservationController.html":{},"coverage.html":{}}}],["required",{"_index":620,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["res",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationController.html":{}}}],["res.send(script",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{}}}],["reservation",{"_index":154,"title":{"entities/Reservation.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateReservationDto.html":{},"entities/Product.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["reservation.dto",{"_index":1198,"title":{},"body":{"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"classes/UpdateReservationDto.html":{}}}],["reservation.dto.ts",{"_index":649,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["reservation.dto.ts:11",{"_index":654,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:18",{"_index":653,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:25",{"_index":658,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:32",{"_index":655,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.dto.ts:38",{"_index":659,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.id",{"_index":1387,"title":{},"body":{"injectables/UsersService.html":{}}}],["reservation.product",{"_index":1008,"title":{},"body":{"entities/Product.html":{},"injectables/UsersService.html":{}}}],["reservation.product)@joincolumn",{"_index":999,"title":{},"body":{"entities/Product.html":{}}}],["reservation.product.seller",{"_index":1393,"title":{},"body":{"injectables/UsersService.html":{}}}],["reservation.user",{"_index":1247,"title":{},"body":{"injectables/ReservationService.html":{},"entities/User.html":{}}}],["reservation.user)@joincolumn",{"_index":1308,"title":{},"body":{"entities/User.html":{}}}],["reservation.user.id",{"_index":1248,"title":{},"body":{"injectables/ReservationService.html":{}}}],["reservation/dto/create",{"_index":1197,"title":{},"body":{"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"classes/UpdateReservationDto.html":{}}}],["reservation/entities/reservation.entity",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Product.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["reservation/reservation.controller",{"_index":1214,"title":{},"body":{"modules/ReservationModule.html":{}}}],["reservation/reservation.module",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["reservation/reservation.service",{"_index":1196,"title":{},"body":{"controllers/ReservationController.html":{},"modules/ReservationModule.html":{}}}],["reservationcontroller",{"_index":1177,"title":{"controllers/ReservationController.html":{}},"body":{"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"coverage.html":{}}}],["reservationdate",{"_index":652,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/Reservation.html":{}}}],["reservationgetall",{"_index":1218,"title":{},"body":{"injectables/ReservationService.html":{}}}],["reservationgetall(user",{"_index":1226,"title":{},"body":{"injectables/ReservationService.html":{}}}],["reservationgetbyid",{"_index":1219,"title":{},"body":{"injectables/ReservationService.html":{}}}],["reservationgetbyid(id",{"_index":1228,"title":{},"body":{"injectables/ReservationService.html":{}}}],["reservationid",{"_index":1386,"title":{},"body":{"injectables/UsersService.html":{}}}],["reservationmodule",{"_index":87,"title":{"modules/ReservationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ReservationModule.html":{},"index.html":{},"modules.html":{}}}],["reservationquery",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["reservationrepository",{"_index":1222,"title":{},"body":{"injectables/ReservationService.html":{}}}],["reservations",{"_index":1205,"title":{},"body":{"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"entities/User.html":{}}}],["reservations.length",{"_index":1238,"title":{},"body":{"injectables/ReservationService.html":{}}}],["reservationservice",{"_index":1195,"title":{"injectables/ReservationService.html":{}},"body":{"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"coverage.html":{},"index.html":{}}}],["reset",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["resets",{"_index":1508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/typealiases.html":{}}}],["response.status(status).json",{"_index":792,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["responsive",{"_index":1641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["results",{"_index":49,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/EmailService.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageOptionsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/RatingController.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["right",{"_index":1629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["road",{"_index":1687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["root/app.controller",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["root/app.service",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["rspace",{"_index":1544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":1267,"title":{},"body":{"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["s",{"_index":1328,"title":{},"body":{"entities/User.html":{}}}],["saltvalue",{"_index":1322,"title":{},"body":{"entities/User.html":{}}}],["san",{"_index":1688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sans",{"_index":1526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scheme",{"_index":477,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["scope",{"_index":751,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["screen",{"_index":1645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["script",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["secret",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":807,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["seller",{"_index":982,"title":{},"body":{"entities/Product.html":{},"injectables/ProductService.html":{}}}],["send",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["sendemail",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["sendemail(@body('email",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendemail(createuserdto.name",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendemail(email",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["sendmail",{"_index":706,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(options",{"_index":709,"title":{},"body":{"injectables/EmailService.html":{}}}],["separate",{"_index":1540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serif",{"_index":1527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["service",{"_index":339,"title":{},"body":{"modules/AuthModule.html":{},"injectables/EmailService.html":{}}}],["set",{"_index":1550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setbasepath('api",{"_index":481,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["setdescription('public",{"_index":471,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["settitle('koreanmarketapi",{"_index":470,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["setversion('1.0",{"_index":473,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["show",{"_index":1663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shrink",{"_index":1556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["simple",{"_index":1505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["size",{"_index":1531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sizing",{"_index":1570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skip",{"_index":951,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["skip(pageoptionsdto.skip",{"_index":1096,"title":{},"body":{"injectables/ProductService.html":{}}}],["smoothing",{"_index":1529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sole",{"_index":1673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["solid",{"_index":1617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["something",{"_index":1559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sometimes",{"_index":1667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"modules/CommentModule.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"controllers/RatingController.html":{},"modules/RatingModule.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"modules/ReservationModule.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCommentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateRatingDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{}}}],["span",{"_index":1583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1480,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../order.constants.ts",{"_index":1474,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../provider.enum.ts",{"_index":1475,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../transform.interceptor.ts",{"_index":1498,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":1500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../verificationemail.ts",{"_index":1501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":60,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":107,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":108,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:109",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:116",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:123",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:140",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:148",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:172",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:179",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:189",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:195",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:45",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:55",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:63",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:68",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:81",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:93",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":326,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:115",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:123",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:127",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:134",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:150",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:157",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:27",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:37",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:49",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:66",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:76",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:88",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:96",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/create",{"_index":598,"title":{},"body":{"classes/CreateAuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/update",{"_index":1272,"title":{},"body":{"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":113,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/guards/google",{"_index":724,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":796,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/kakao",{"_index":810,"title":{},"body":{"classes/KakaoAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":825,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/naver",{"_index":838,"title":{},"body":{"injectables/NaverAuthGuard.html":{},"coverage.html":{}}}],["src/auth/interfaces/product.interface.ts",{"_index":1057,"title":{},"body":{"interfaces/ProductInterface.html":{},"coverage.html":{}}}],["src/auth/interfaces/requestwithuser.interface.ts",{"_index":1163,"title":{},"body":{"interfaces/RequestWithUserInterface.html":{},"coverage.html":{}}}],["src/auth/interfaces/tokenpayload.interface.ts",{"_index":1254,"title":{},"body":{"interfaces/TokenPayloadInterface.html":{},"coverage.html":{}}}],["src/auth/interfaces/verificationtokenpayload.interface.ts",{"_index":1402,"title":{},"body":{"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{}}}],["src/auth/strategies/google",{"_index":728,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt",{"_index":798,"title":{},"body":{"injectables/JwtAuthStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/kakao",{"_index":812,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local",{"_index":827,"title":{},"body":{"injectables/LocalAuthStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/naver",{"_index":840,"title":{},"body":{"injectables/NaverAuthStrategy.html":{},"coverage.html":{}}}],["src/comment/comment.controller.ts",{"_index":526,"title":{},"body":{"controllers/CommentController.html":{},"coverage.html":{}}}],["src/comment/comment.controller.ts:36",{"_index":537,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/comment/comment.controller.ts:44",{"_index":540,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/comment/comment.module.ts",{"_index":553,"title":{},"body":{"modules/CommentModule.html":{}}}],["src/comment/comment.service.ts",{"_index":559,"title":{},"body":{"injectables/CommentService.html":{},"coverage.html":{}}}],["src/comment/comment.service.ts:15",{"_index":568,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comment/comment.service.ts:24",{"_index":566,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comment/comment.service.ts:9",{"_index":563,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comment/dto/create",{"_index":600,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/comment/dto/update",{"_index":1279,"title":{},"body":{"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["src/comment/entities/comment.entity.ts",{"_index":508,"title":{},"body":{"entities/Comment.html":{},"coverage.html":{}}}],["src/comment/entities/comment.entity.ts:10",{"_index":511,"title":{},"body":{"entities/Comment.html":{}}}],["src/comment/entities/comment.entity.ts:14",{"_index":516,"title":{},"body":{"entities/Comment.html":{}}}],["src/comment/entities/comment.entity.ts:18",{"_index":514,"title":{},"body":{"entities/Comment.html":{}}}],["src/common/config/config.module.ts",{"_index":6,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["src/common/config/swagger.document.ts",{"_index":460,"title":{},"body":{"classes/BaseAPIDocument.html":{},"coverage.html":{}}}],["src/common/config/swagger.document.ts:4",{"_index":467,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["src/common/config/swagger.document.ts:6",{"_index":468,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["src/common/constants/order.constants.ts",{"_index":1476,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/decorator/user.decorator.ts",{"_index":1413,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dtos/page",{"_index":915,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts",{"_index":902,"title":{},"body":{"classes/PageDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts:11",{"_index":907,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dtos/page.dto.ts:8",{"_index":909,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/entities/common.entity.ts",{"_index":581,"title":{},"body":{"classes/CommonEntity.html":{},"coverage.html":{}}}],["src/common/entities/common.entity.ts:12",{"_index":586,"title":{},"body":{"classes/CommonEntity.html":{}}}],["src/common/entities/common.entity.ts:15",{"_index":590,"title":{},"body":{"classes/CommonEntity.html":{}}}],["src/common/entities/common.entity.ts:9",{"_index":588,"title":{},"body":{"classes/CommonEntity.html":{}}}],["src/common/filters/http",{"_index":772,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/interceptors/transform.interceptor.ts",{"_index":1256,"title":{},"body":{"injectables/TransformInterceptor.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/common/interceptors/transform.interceptor.ts:22",{"_index":1262,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/common/interfaces/page",{"_index":946,"title":{},"body":{"interfaces/PageMetaDtoParametersInterface.html":{},"coverage.html":{}}}],["src/common/template/verificationemail.ts",{"_index":1417,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/database.module.ts",{"_index":682,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/email/email.module.ts",{"_index":703,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service.ts",{"_index":704,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:19",{"_index":711,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:8",{"_index":708,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/main.ts",{"_index":1418,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/order/dto/create",{"_index":608,"title":{},"body":{"classes/CreateOrderDto.html":{},"coverage.html":{}}}],["src/order/dto/update",{"_index":1281,"title":{},"body":{"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["src/order/entities/order.entity.ts",{"_index":850,"title":{},"body":{"classes/Order.html":{},"coverage.html":{}}}],["src/order/order.controller.ts",{"_index":852,"title":{},"body":{"controllers/OrderController.html":{},"coverage.html":{}}}],["src/order/order.controller.ts:21",{"_index":858,"title":{},"body":{"controllers/OrderController.html":{}}}],["src/order/order.controller.ts:26",{"_index":859,"title":{},"body":{"controllers/OrderController.html":{}}}],["src/order/order.controller.ts:31",{"_index":861,"title":{},"body":{"controllers/OrderController.html":{}}}],["src/order/order.controller.ts:36",{"_index":868,"title":{},"body":{"controllers/OrderController.html":{}}}],["src/order/order.controller.ts:41",{"_index":864,"title":{},"body":{"controllers/OrderController.html":{}}}],["src/order/order.module.ts",{"_index":889,"title":{},"body":{"modules/OrderModule.html":{}}}],["src/order/order.service.ts",{"_index":891,"title":{},"body":{"injectables/OrderService.html":{},"coverage.html":{}}}],["src/order/order.service.ts:11",{"_index":893,"title":{},"body":{"injectables/OrderService.html":{}}}],["src/order/order.service.ts:15",{"_index":894,"title":{},"body":{"injectables/OrderService.html":{}}}],["src/order/order.service.ts:19",{"_index":896,"title":{},"body":{"injectables/OrderService.html":{}}}],["src/order/order.service.ts:23",{"_index":895,"title":{},"body":{"injectables/OrderService.html":{}}}],["src/order/order.service.ts:7",{"_index":892,"title":{},"body":{"injectables/OrderService.html":{}}}],["src/product/dto/create",{"_index":611,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/product/dto/update",{"_index":1284,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/product/entities/product.entity.ts",{"_index":979,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["src/product/entities/product.entity.ts:17",{"_index":994,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:23",{"_index":991,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:26",{"_index":995,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:32",{"_index":996,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:37",{"_index":986,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:40",{"_index":997,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:45",{"_index":993,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:48",{"_index":983,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:52",{"_index":1002,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:55",{"_index":989,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:62",{"_index":1000,"title":{},"body":{"entities/Product.html":{}}}],["src/product/product.controller.ts",{"_index":1010,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/product/product.controller.ts:40",{"_index":1027,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:56",{"_index":1021,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:73",{"_index":1030,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:81",{"_index":1033,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:90",{"_index":1024,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.module.ts",{"_index":1060,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/product/product.service.ts",{"_index":1063,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/product/product.service.ts:103",{"_index":1075,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:107",{"_index":1079,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:13",{"_index":1069,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:20",{"_index":1073,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:46",{"_index":1071,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:82",{"_index":1077,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/rating/dto/create",{"_index":641,"title":{},"body":{"classes/CreateRatingDto.html":{},"coverage.html":{}}}],["src/rating/dto/update",{"_index":1287,"title":{},"body":{"classes/UpdateRatingDto.html":{},"coverage.html":{}}}],["src/rating/entities/rating.entity.ts",{"_index":1114,"title":{},"body":{"entities/Rating.html":{},"coverage.html":{}}}],["src/rating/entities/rating.entity.ts:13",{"_index":1118,"title":{},"body":{"entities/Rating.html":{}}}],["src/rating/entities/rating.entity.ts:8",{"_index":1117,"title":{},"body":{"entities/Rating.html":{}}}],["src/rating/rating.controller.ts",{"_index":1122,"title":{},"body":{"controllers/RatingController.html":{},"coverage.html":{}}}],["src/rating/rating.module.ts",{"_index":1134,"title":{},"body":{"modules/RatingModule.html":{}}}],["src/rating/rating.service.ts",{"_index":1139,"title":{},"body":{"injectables/RatingService.html":{},"coverage.html":{}}}],["src/rating/rating.service.ts:15",{"_index":1145,"title":{},"body":{"injectables/RatingService.html":{}}}],["src/rating/rating.service.ts:9",{"_index":1142,"title":{},"body":{"injectables/RatingService.html":{}}}],["src/redis/redis.module.ts",{"_index":1151,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/reservation/dto/create",{"_index":648,"title":{},"body":{"classes/CreateReservationDto.html":{},"coverage.html":{}}}],["src/reservation/dto/update",{"_index":1290,"title":{},"body":{"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["src/reservation/entities/reservation.entity.ts",{"_index":1164,"title":{},"body":{"entities/Reservation.html":{},"coverage.html":{}}}],["src/reservation/entities/reservation.entity.ts:16",{"_index":1166,"title":{},"body":{"entities/Reservation.html":{}}}],["src/reservation/entities/reservation.entity.ts:20",{"_index":1168,"title":{},"body":{"entities/Reservation.html":{}}}],["src/reservation/entities/reservation.entity.ts:25",{"_index":1169,"title":{},"body":{"entities/Reservation.html":{}}}],["src/reservation/entities/reservation.entity.ts:29",{"_index":1174,"title":{},"body":{"entities/Reservation.html":{}}}],["src/reservation/entities/reservation.entity.ts:32",{"_index":1165,"title":{},"body":{"entities/Reservation.html":{}}}],["src/reservation/entities/reservation.entity.ts:35",{"_index":1172,"title":{},"body":{"entities/Reservation.html":{}}}],["src/reservation/reservation.controller.ts",{"_index":1178,"title":{},"body":{"controllers/ReservationController.html":{},"coverage.html":{}}}],["src/reservation/reservation.controller.ts:39",{"_index":1187,"title":{},"body":{"controllers/ReservationController.html":{}}}],["src/reservation/reservation.controller.ts:55",{"_index":1192,"title":{},"body":{"controllers/ReservationController.html":{}}}],["src/reservation/reservation.controller.ts:69",{"_index":1194,"title":{},"body":{"controllers/ReservationController.html":{}}}],["src/reservation/reservation.controller.ts:77",{"_index":1190,"title":{},"body":{"controllers/ReservationController.html":{}}}],["src/reservation/reservation.module.ts",{"_index":1213,"title":{},"body":{"modules/ReservationModule.html":{}}}],["src/reservation/reservation.service.ts",{"_index":1216,"title":{},"body":{"injectables/ReservationService.html":{},"coverage.html":{}}}],["src/reservation/reservation.service.ts:11",{"_index":1221,"title":{},"body":{"injectables/ReservationService.html":{}}}],["src/reservation/reservation.service.ts:18",{"_index":1225,"title":{},"body":{"injectables/ReservationService.html":{}}}],["src/reservation/reservation.service.ts:30",{"_index":1227,"title":{},"body":{"injectables/ReservationService.html":{}}}],["src/reservation/reservation.service.ts:51",{"_index":1229,"title":{},"body":{"injectables/ReservationService.html":{}}}],["src/reservation/reservation.service.ts:60",{"_index":1223,"title":{},"body":{"injectables/ReservationService.html":{}}}],["src/users/dto/change",{"_index":483,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["src/users/dto/confirm",{"_index":593,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":661,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/login",{"_index":834,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/users/dto/new",{"_index":847,"title":{},"body":{"classes/NewPasswordDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":1293,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/provider.enum.ts",{"_index":1478,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/users/entities/user.entity.ts",{"_index":1295,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:27",{"_index":1300,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:29",{"_index":1299,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":1302,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:34",{"_index":1303,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":1309,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:47",{"_index":1305,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:50",{"_index":1297,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:53",{"_index":1304,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:57",{"_index":1307,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1341,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:27",{"_index":1347,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:33",{"_index":1345,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1358,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1362,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:13",{"_index":1365,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:47",{"_index":1374,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:67",{"_index":1369,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:75",{"_index":1372,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:84",{"_index":1371,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:93",{"_index":1368,"title":{},"body":{"injectables/UsersService.html":{}}}],["statements",{"_index":1406,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":786,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":789,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["store",{"_index":1154,"title":{},"body":{"modules/RedisModule.html":{},"dependencies.html":{}}}],["strategy",{"_index":731,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["stretch",{"_index":1555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{}}}],["string,reservation",{"_index":1391,"title":{},"body":{"injectables/UsersService.html":{}}}],["style",{"_index":1605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["styles",{"_index":1625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["styling",{"_index":1509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subject",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["subscribed",{"_index":765,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["success",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ReservationController.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["success'})@apibearerauth('access",{"_index":1186,"title":{},"body":{"controllers/ReservationController.html":{}}}],["summary",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["super",{"_index":744,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["support",{"_index":1489,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1490,"title":{},"body":{"modules.html":{}}}],["swag",{"_index":499,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["synchronize",{"_index":699,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["t",{"_index":905,"title":{},"body":{"classes/PageDto.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":1424,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["table.body",{"_index":1647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1423,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":922,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["take(pageoptionsdto.take",{"_index":1097,"title":{},"body":{"injectables/ProductService.html":{}}}],["tbody",{"_index":1615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["td",{"_index":1545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["td:hover",{"_index":1659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["template",{"_index":1672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["text",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{},"entities/Product.html":{},"miscellaneous/variables.html":{}}}],["this.appservice.gethello",{"_index":68,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.changepassword(changepassworddto",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.changepasswordwithtoken",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.confirmemail(confirmemaildto",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.createuser(createuserdto",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.forgotpassword(email",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.generateaccesstoken(user.id",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login",{"_index":833,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["this.authservice.login(loginuserdto",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.profile(id",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.sendemail(email",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.builder",{"_index":469,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["this.cachemanger.del(confirmemaildto.email",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cachemanger.get(confirmemaildto.email",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cachemanger.set(email",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.commentrepository",{"_index":574,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentrepository.create",{"_index":572,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentrepository.save(newcomment",{"_index":573,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentservice.commentgeybyid(id",{"_index":550,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.createcomment(createcommentdto",{"_index":548,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.configservice.get",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('accesstoken_expiration_time')}m",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('accesstoken_secret_key",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_chagne_password_expiresin",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_chagne_password_secret",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.data",{"_index":913,"title":{},"body":{"classes/PageDto.html":{}}}],["this.decodedconfirmationtoken(changepassworddto.token",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.emailservice.sendmail",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generateotp",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hasnextpage",{"_index":943,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":942,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.itemcount",{"_index":939,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.jwtservice.sign(payload",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.meta",{"_index":914,"title":{},"body":{"classes/PageDto.html":{}}}],["this.nodemailertransport",{"_index":717,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail(options",{"_index":723,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.orderservice.create(createorderdto",{"_index":879,"title":{},"body":{"controllers/OrderController.html":{}}}],["this.orderservice.findall",{"_index":880,"title":{},"body":{"controllers/OrderController.html":{}}}],["this.orderservice.findone(+id",{"_index":882,"title":{},"body":{"controllers/OrderController.html":{}}}],["this.orderservice.remove(+id",{"_index":886,"title":{},"body":{"controllers/OrderController.html":{}}}],["this.orderservice.update(+id",{"_index":884,"title":{},"body":{"controllers/OrderController.html":{}}}],["this.page",{"_index":935,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.pagecount",{"_index":940,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.password",{"_index":1324,"title":{},"body":{"entities/User.html":{}}}],["this.productrepository",{"_index":1100,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.create",{"_index":1081,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.createquerybuilder",{"_index":1084,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.delete",{"_index":1108,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.findoneby",{"_index":1106,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.save(newproduct",{"_index":1082,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.update(createproductdto",{"_index":1111,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.update(id",{"_index":1112,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productservice.getallproducts(pageoptionsdto",{"_index":1046,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.productcreate",{"_index":1049,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.productdeletebyid(id",{"_index":1055,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.productgetall(category",{"_index":1044,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.productgetbyid(id",{"_index":1051,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.productupdatebyid(id",{"_index":1053,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.profileimg",{"_index":1326,"title":{},"body":{"entities/User.html":{}}}],["this.provider",{"_index":1321,"title":{},"body":{"entities/User.html":{}}}],["this.ratingrepository.create",{"_index":1148,"title":{},"body":{"injectables/RatingService.html":{}}}],["this.ratingrepository.save(newrating",{"_index":1150,"title":{},"body":{"injectables/RatingService.html":{}}}],["this.ratingservice.createrating(createratingdto",{"_index":1130,"title":{},"body":{"controllers/RatingController.html":{}}}],["this.reservationrepository.create",{"_index":1232,"title":{},"body":{"injectables/ReservationService.html":{}}}],["this.reservationrepository.createquerybuilder",{"_index":1239,"title":{},"body":{"injectables/ReservationService.html":{}}}],["this.reservationrepository.delete(id",{"_index":1251,"title":{},"body":{"injectables/ReservationService.html":{}}}],["this.reservationrepository.find",{"_index":1235,"title":{},"body":{"injectables/ReservationService.html":{}}}],["this.reservationrepository.findone",{"_index":1244,"title":{},"body":{"injectables/ReservationService.html":{}}}],["this.reservationrepository.save(newreservation",{"_index":1234,"title":{},"body":{"injectables/ReservationService.html":{}}}],["this.reservationservice.deletereservationbyid(id",{"_index":1210,"title":{},"body":{"controllers/ReservationController.html":{}}}],["this.reservationservice.productreservation",{"_index":1202,"title":{},"body":{"controllers/ReservationController.html":{}}}],["this.reservationservice.reservationgetall",{"_index":1206,"title":{},"body":{"controllers/ReservationController.html":{}}}],["this.reservationservice.reservationgetbyid(id",{"_index":1208,"title":{},"body":{"controllers/ReservationController.html":{}}}],["this.take",{"_index":937,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.userrepository.create(createuserdto",{"_index":1395,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.createquerybuilder",{"_index":1394,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.createquerybuilder('user",{"_index":1379,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":1392,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneby",{"_index":1398,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(newsignup",{"_index":1397,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":1401,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.changepassword",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.changepassword(userid",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.createuser",{"_index":770,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(email",{"_index":824,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["this.usersservice.getuserbyemail(emailvalue",{"_index":762,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["this.usersservice.getuserbyemail(loginuserdto.email",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getuserbyid(id",{"_index":1354,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyid(payload.userid",{"_index":809,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["this.usersservice.usergetall",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["throw",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/ProductService.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["timestamp",{"_index":793,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["timestamptz",{"_index":1171,"title":{},"body":{"entities/Reservation.html":{}}}],["token",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["token')@httpcode(200)@apioperation({summary",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["token')@useguards(jwtauthguard",{"_index":536,"title":{},"body":{"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/ReservationController.html":{}}}],["token=${token",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokenexpirederror",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokenpayloadinterface",{"_index":383,"title":{"interfaces/TokenPayloadInterface.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthStrategy.html":{},"interfaces/TokenPayloadInterface.html":{},"coverage.html":{}}}],["top",{"_index":1548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tr",{"_index":1616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transactional",{"_index":1506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transform",{"_index":1597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformer",{"_index":973,"title":{},"body":{"classes/PageOptionsDto.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":1255,"title":{"injectables/TransformInterceptor.html":{}},"body":{"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["transparent",{"_index":1633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateReservationDto.html":{},"modules/DatabaseModule.html":{},"classes/PageDto.html":{},"entities/Product.html":{},"injectables/ProductService.html":{},"modules/RedisModule.html":{},"entities/Reservation.html":{},"entities/User.html":{}}}],["true})@isboolean",{"_index":657,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["try",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"entities/User.html":{}}}],["ttl",{"_index":1160,"title":{},"body":{"modules/RedisModule.html":{}}}],["type",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"entities/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateRatingDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthStrategy.html":{},"classes/NewPasswordDto.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParametersInterface.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"interfaces/ProductInterface.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"injectables/RatingService.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1496,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":791,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{}}}],["typeorm",{"_index":519,"title":{},"body":{"entities/Comment.html":{},"injectables/CommentService.html":{},"classes/CommonEntity.html":{},"entities/Product.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"injectables/RatingService.html":{},"entities/Reservation.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":554,"title":{},"body":{"modules/CommentModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([comment",{"_index":558,"title":{},"body":{"modules/CommentModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":1062,"title":{},"body":{"modules/ProductModule.html":{}}}],["typeormmodule.forfeature([rating",{"_index":1138,"title":{},"body":{"modules/RatingModule.html":{}}}],["typeormmodule.forfeature([reservation",{"_index":1215,"title":{},"body":{"modules/ReservationModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1360,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":684,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":1276,"title":{},"body":{"classes/UpdateAuthDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["types/bcryptjs",{"_index":1435,"title":{},"body":{"dependencies.html":{}}}],["types/cookie",{"_index":1437,"title":{},"body":{"dependencies.html":{}}}],["types/gravatar",{"_index":1440,"title":{},"body":{"dependencies.html":{}}}],["types/hapi__joi",{"_index":1442,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":1444,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":1446,"title":{},"body":{"dependencies.html":{}}}],["typography",{"_index":1586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ul",{"_index":1599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"injectables/ProductService.html":{},"entities/User.html":{}}}],["undefined})@isarray",{"_index":623,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["undefined})@isenum(orderconstants)@isoptional",{"_index":955,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["underline",{"_index":1612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unique",{"_index":1315,"title":{},"body":{"entities/User.html":{}}}],["unknown",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/JwtAuthStrategy.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/RatingService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1494,"title":{},"body":{"properties.html":{}}}],["unsubscribe",{"_index":1693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":856,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{},"controllers/ProductController.html":{}}}],["update(@param('id",{"_index":883,"title":{},"body":{"controllers/OrderController.html":{}}}],["update(id",{"_index":865,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["updateauthdto",{"_index":1271,"title":{"classes/UpdateAuthDto.html":{}},"body":{"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["updatecommentdto",{"_index":1278,"title":{"classes/UpdateCommentDto.html":{}},"body":{"classes/UpdateCommentDto.html":{},"coverage.html":{}}}],["updated",{"_index":1113,"title":{},"body":{"injectables/ProductService.html":{}}}],["updatedat",{"_index":583,"title":{},"body":{"classes/CommonEntity.html":{}}}],["updatedatecolumn",{"_index":589,"title":{},"body":{"classes/CommonEntity.html":{}}}],["updateduser",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updateorderdto",{"_index":866,"title":{"classes/UpdateOrderDto.html":{}},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["updateproduct",{"_index":1110,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductbyid",{"_index":1015,"title":{},"body":{"controllers/ProductController.html":{}}}],["updateproductbyid(createproductdto",{"_index":1031,"title":{},"body":{"controllers/ProductController.html":{}}}],["updateproductdto",{"_index":1283,"title":{"classes/UpdateProductDto.html":{}},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateratingdto",{"_index":1286,"title":{"classes/UpdateRatingDto.html":{}},"body":{"classes/UpdateRatingDto.html":{},"coverage.html":{}}}],["updatereservationdto",{"_index":1289,"title":{"classes/UpdateReservationDto.html":{}},"body":{"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["updates",{"_index":899,"title":{},"body":{"injectables/OrderService.html":{}}}],["updateuserdto",{"_index":1292,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["url",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseAPIDocument.html":{}}}],["use",{"_index":1230,"title":{},"body":{"injectables/ReservationService.html":{}}}],["usefactory",{"_index":685,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["useful",{"_index":1626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{}}}],["useguards(googleauthguard",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/ProductController.html":{},"controllers/RatingController.html":{},"controllers/ReservationController.html":{}}}],["useguards(kakaoauthguard",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(naverauthguard",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":205,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"injectables/CommentService.html":{},"classes/CreateRatingDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"entities/Product.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"injectables/RatingService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.comments",{"_index":523,"title":{},"body":{"entities/Comment.html":{}}}],["user.comments)@joincolumn",{"_index":515,"title":{},"body":{"entities/Comment.html":{}}}],["user.dto",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":662,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":835,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:17",{"_index":837,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:19",{"_index":669,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":666,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":671,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:44",{"_index":675,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:48",{"_index":673,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":1249,"title":{},"body":{"injectables/ReservationService.html":{},"injectables/UsersService.html":{}}}],["user.password",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.products",{"_index":1007,"title":{},"body":{"entities/Product.html":{}}}],["user.products)@joincolumn",{"_index":1001,"title":{},"body":{"entities/Product.html":{}}}],["user.provider",{"_index":763,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["user.rating",{"_index":1120,"title":{},"body":{"entities/Rating.html":{}}}],["user.rating)@joincolumn",{"_index":1116,"title":{},"body":{"entities/Rating.html":{}}}],["user.reservation",{"_index":1176,"title":{},"body":{"entities/Reservation.html":{}}}],["user.reservation)@joincolumn",{"_index":1173,"title":{},"body":{"entities/Reservation.html":{}}}],["user.validatepassword",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["usergetall",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["usergetall(id",{"_index":1373,"title":{},"body":{"injectables/UsersService.html":{}}}],["usergetall(reservation?:reservation",{"_index":1378,"title":{},"body":{"injectables/UsersService.html":{}}}],["usergetall(user",{"_index":1382,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/UsersService.html":{}}}],["userinput",{"_index":760,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["userlogin",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["userlogin(@req",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["userlogin(req",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["username",{"_index":667,"title":{},"body":{"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{}}}],["username'})@isstring()@isnotempty",{"_index":668,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["usernamefield",{"_index":832,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["userrepository",{"_index":1366,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":1236,"title":{},"body":{"injectables/ReservationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users/dto/change",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/dto/confirm",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/dto/create",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users/dto/login",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/dto/new",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users/entities/provider.enum",{"_index":678,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"classes/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"entities/User.html":{}}}],["users/entities/user.entity",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Comment.html":{},"injectables/CommentService.html":{},"classes/CreateRatingDto.html":{},"injectables/LocalAuthStrategy.html":{},"entities/Product.html":{},"injectables/ProductService.html":{},"entities/Rating.html":{},"injectables/RatingService.html":{},"interfaces/RequestWithUserInterface.html":{},"entities/Reservation.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users/users.controller",{"_index":1359,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["userscontroller",{"_index":1340,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":1361,"title":{},"body":{"modules/UsersModule.html":{}}}],["usersignup",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["usersignup(@body",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["usersignup(createuserdto",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["usersmodule",{"_index":88,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["usersservice",{"_index":349,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["user})@apibody({type",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["v2",{"_index":842,"title":{},"body":{"injectables/NaverAuthStrategy.html":{},"dependencies.html":{}}}],["validate",{"_index":733,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["validate(_accesstoken",{"_index":735,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["validate(accesstoken",{"_index":814,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["validate(email",{"_index":830,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["validate(payload",{"_index":801,"title":{},"body":{"injectables/JwtAuthStrategy.html":{}}}],["validatepassword(apassword",{"_index":1336,"title":{},"body":{"entities/User.html":{}}}],["validationschema",{"_index":16,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["validator",{"_index":497,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/NewPasswordDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"dependencies.html":{}}}],["value",{"_index":465,"title":{},"body":{"classes/BaseAPIDocument.html":{},"classes/PageOptionsDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1414,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1499,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verificationemail",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["verificationemail(generatenumber",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["verificationtokenpayloadinterface",{"_index":387,"title":{"interfaces/VerificationTokenPayloadInterface.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/VerificationTokenPayloadInterface.html":{},"coverage.html":{}}}],["verify",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifycallback",{"_index":738,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["version",{"_index":1491,"title":{},"body":{"properties.html":{}}}],["vertical",{"_index":1546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["visibility",{"_index":1638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["want",{"_index":1668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webkit",{"_index":1528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["weight",{"_index":1592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["welcome",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["where('comment.id",{"_index":577,"title":{},"body":{"injectables/CommentService.html":{}}}],["where('product.id",{"_index":1105,"title":{},"body":{"injectables/ProductService.html":{}}}],["where('user.id",{"_index":1384,"title":{},"body":{"injectables/UsersService.html":{}}}],["width",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["window",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["window.localstorage.setitem('token",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["window.localstorage.setitem('user",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["window.opener.postmessage('logincomplete",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["works",{"_index":1682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["world",{"_index":110,"title":{},"body":{"injectables/AppService.html":{}}}],["wrapper",{"_index":1576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x",{"_index":1316,"title":{},"body":{"entities/User.html":{}}}],["yes",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ReservationController.html":{},"injectables/ReservationService.html":{},"injectables/UsersService.html":{}}}],["z\\d$@$!%*#?&]{8",{"_index":504,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["z\\d$@$!%*#?&]{8,}$/)@isstring",{"_index":490,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/NewPasswordDto.html":{}}}],["z])(?=.*\\d)(?=.*[$@$!%*#?&])[a",{"_index":489,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["za",{"_index":488,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/NewPasswordDto.html":{}}}],["zoom",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentModule.html":{},"modules/EmailModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/RatingModule.html":{},"modules/ReservationModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppConfigModule.html":{"url":"modules/AppConfigModule.html","title":"module - AppConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    AppConfigModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/config/config.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport * as Joi from '@hapi/joi';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      //환경변수 타입 체크\n      validationSchema: Joi.object({\n        POSTGRES_HOST: Joi.string().required(),\n        POSTGRES_PORT: Joi.number().required(),\n        POSTGRES_USERNAME: Joi.string().required(),\n        POSTGRES_PASSWORD: Joi.string().required(),\n        POSTGRES_DB: Joi.string().required(),\n\n        ACCESSTOKEN_SECRET_KEY: Joi.string().required(),\n        ACCESSTOKEN_EXPIRATION_TIME: Joi.number().required(),\n\n        EMAIL_SERVICE: Joi.string().required(),\n        EMAIL_USER: Joi.string().required(),\n        EMAIL_PASSWORD: Joi.string().required(),\n\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n        REDIS_USER: Joi.string().required(),\n        REDIS_PASSWORD: Joi.string().required(),\n        REDIS_TTL: Joi.number().required(),\n\n        GOOGLE_AUTH_CLIENTID: Joi.string().required(),\n        GOOGLE_AUTH_CLIENTSECRET: Joi.string().required(),\n        GOOGLE_AUTH_CALLBACK_URL: Joi.string().required(),\n\n        KAKAO_AUTH_CLIENTID: Joi.string().required(),\n        KAKAO_AUTH_CALLBACK_URL: Joi.string().required(),\n\n        NAVER_AUTH_CLIENTID: Joi.string().required(),\n        NAVER_AUTH_CLIENTSECRET: Joi.string().required(),\n        NAVAER_AUTH_CALLBACK_URL: Joi.string().required(),\n\n        JWT_CHAGNE_PASSWORD_SECRET: Joi.string().required(),\n        JWT_CHAGNE_PASSWORD_EXPIRESIN: Joi.string().required(),\n        PASSWORD_CHANGE_URL: Joi.string().required(),\n      }),\n    }),\n  ], //env파일을 인식해줌\n})\nexport class AppConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from '@root/app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAppConfigModule\n\nAppConfigModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommentModule\n\nCommentModule\n\nAppModule -->\n\nCommentModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nOrderModule\n\nOrderModule\n\nAppModule -->\n\nOrderModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nRatingModule\n\nRatingModule\n\nAppModule -->\n\nRatingModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nReservationModule\n\nReservationModule\n\nAppModule -->\n\nReservationModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppConfigModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            CommentModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EmailModule\n                        \n                        \n                            OrderModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            RatingModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            ReservationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { AppController } from '@root/app.controller';\nimport { AppService } from '@root/app.service';\nimport { AuthModule } from '@auth/auth.module';\nimport { ProductModule } from '@product/product.module';\nimport { OrderModule } from '@order/order.module';\nimport { DatabaseModule } from '@database/database.module';\nimport { UsersModule } from '@users/users.module';\nimport { EmailModule } from '@email/email.module';\nimport { ReservationModule } from '@reservation/reservation.module';\nimport { RatingModule } from '@rating/rating.module';\nimport { RedisModule } from '@redis/redis.module';\nimport { CommentModule } from '@comment/comment.module';\nimport { AppConfigModule } from '@common/config/config.module';\n\n@Module({\n  imports: [\n    AppConfigModule,\n    DatabaseModule,\n    AuthModule,\n    ProductModule,\n    OrderModule,\n    UsersModule,\n    EmailModule,\n    RedisModule,\n    CommentModule,\n    ReservationModule,\n    RatingModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                changePassword\n                            \n                            \n                                    \n                                    Async\n                                confirmEmail\n                            \n                            \n                                    \n                                    \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getUserInfoByToken\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                googleLogin\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                googleLoginCallBack\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                kakaoLogin\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                kakaoLoginCallBack\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                naverLogin\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                naverLoginCallBack\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                sendEmail\n                            \n                            \n                                    \n                                    Async\n                                test\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                userLogin\n                            \n                            \n                                    \n                                    \n                                    Async\n                                userSignup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(changePasswordDto: ChangePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('change/password')@ApiOperation({summary: '비밀번호 바꾸기', description: '비밀번호 수정'})@ApiBody({type: ChangePasswordDto})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                changePasswordDto\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    confirmEmail(confirmEmailDto: ConfirmEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('confirm/email')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                confirmEmailDto\n                                            \n                                                            ConfirmEmailDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('forgot/password')@ApiOperation({summary: '비밀번호 재설정을위한 메일전송', description: '재설정해줌'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getUserInfoByToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserInfoByToken(id: string, reservationQuery?: Reservation)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/profile/:id')@ApiBearerAuth('access-token')@HttpCode(200)@ApiOperation({summary: '프로필 정보', description: '프로필 정보'})@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                reservationQuery\n                                            \n                                                            Reservation\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        googleLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Get('google')@UseGuards(GoogleAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:140\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        googleLoginCallBack\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleLoginCallBack(req: RequestWithUserInterface, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Get('google/callback')@UseGuards(GoogleAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:148\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        kakaoLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    kakaoLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Get('kakao')@UseGuards(KakaoAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:172\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        kakaoLoginCallBack\n                        \n                    \n                \n            \n            \n                \n                        \n                    kakaoLoginCallBack(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Get('kakao/callback')@UseGuards(KakaoAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:179\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        naverLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    naverLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Get('naver')@UseGuards(NaverAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:189\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        naverLoginCallBack\n                        \n                    \n                \n            \n            \n                \n                        \n                    naverLoginCallBack(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Get('naver/callback')@UseGuards(NaverAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:195\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        newPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    newPassword(newPasswordDto: NewPasswordDto, req: RequestWithUserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('newpassword')@ApiOperation({summary: '비밀번호 바꾸기', description: '비밀번호 수정'})@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newPasswordDto\n                                            \n                                                            NewPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            RequestWithUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('send/email')@ApiResponse({description: 'email send verify'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        test\n                        \n                    \n                \n            \n            \n                \n                        \n                    test()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('1234')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        userLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    userLogin(req: RequestWithUserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@ApiOperation({summary: '로그인API', description: '로그인해주는 api'})@ApiCreatedResponse({description: '로그인함', type: User})@ApiBody({type: LoginUserDto})@HttpCode(200)@UseGuards(LocalAuthGuard)@ApiResponse({description: 'login success'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        userSignup\n                        \n                    \n                \n            \n            \n                \n                        \n                    userSignup(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')@ApiCreatedResponse({description: 'the record has been success with user', type: User})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  HttpCode,\n  UseGuards,\n  Req,\n  Get,\n  HttpStatus,\n  Query,\n  Param,\n  Res,\n} from '@nestjs/common';\n\nimport {\n  ApiBody,\n  ApiCreatedResponse,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { User } from '../users/entities/user.entity';\nimport { AuthService } from '@auth/auth.service';\nimport { CreateUserDto } from '@users/dto/create-user.dto';\nimport { ConfirmEmailDto } from '@users/dto/confirm-email.dto';\nimport { LoginUserDto } from '@users/dto/login-user.dto';\nimport { LocalAuthGuard } from '@auth/guards/local-auth.guard';\nimport { RequestWithUserInterface } from '@auth/interfaces/requestWithUser.interface';\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard';\nimport { ChangePasswordDto } from '@users/dto/change-password.dto';\nimport { GoogleAuthGuard } from '@auth/guards/google-auth.guard';\nimport { KakaoAuthGuard } from '@auth/guards/kakao-auth.guard';\nimport { NaverAuthGuard } from '@auth/guards/naver-auth.guard';\nimport { NewPasswordDto } from '@users/dto/new-password.dto';\nimport { Reservation } from '@reservation/entities/reservation.entity';\nimport { Response } from 'express';\n\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Get('1234')\n  async test(): Promise {\n    return 'ok';\n  }\n\n  //회원가입\n  @Post('signup')\n  @ApiCreatedResponse({\n    description: 'the record has been success with user',\n    type: User,\n  }) //성공시 응답을 해주겠다.\n  async userSignup(@Body() createUserDto: CreateUserDto) {\n    return await this.authService.createUser(createUserDto);\n  }\n\n  @Post('send/email')\n  @ApiResponse({\n    description: 'email send verify',\n  })\n  async sendEmail(@Body('email') email: string) {\n    return await this.authService.sendEmail(email);\n  }\n\n  @Post('confirm/email')\n  async confirmEmail(@Body() confirmEmailDto: ConfirmEmailDto) {\n    return await this.authService.confirmEmail(confirmEmailDto);\n  }\n  //로그인 이메일, 비밀번호맞는지 이메일먼저찾기,\n  @Post('login')\n  @ApiOperation({ summary: '로그인API', description: '로그인해주는 api' })\n  @ApiCreatedResponse({ description: '로그인함', type: User })\n  @ApiBody({ type: LoginUserDto })\n  @HttpCode(200)\n  @UseGuards(LocalAuthGuard) //Guard에서 검증됨\n  @ApiResponse({\n    description: 'login success',\n  })\n  async userLogin(@Req() req: RequestWithUserInterface) {\n    const user = req.user;\n    const token = await this.authService.generateAccessToken(user.id);\n    return { token, user };\n    // return await this.authService.Login(loginUserDto);\n  }\n\n  @Get('/profile/:id')\n  @ApiBearerAuth('access-token')\n  @HttpCode(200)\n  @ApiOperation({ summary: '프로필 정보', description: '프로필 정보' })\n  @UseGuards(JwtAuthGuard)\n  async getUserInfoByToken(\n    @Param('id') id: string,\n    @Query('reservation') reservationQuery?: Reservation,\n  ) {\n    // const { user } = req;\n    // user.password = undefined;\n    const data = await this.authService.profile(id, reservationQuery); // user를 profile 메서드에 전달\n    // console.log(\"dsdad\",reservationQuery)\n    return { data };\n  }\n\n  @Post('forgot/password') //비밀번호 재설정위한 메일전송\n  @ApiOperation({\n    summary: '비밀번호 재설정을위한 메일전송',\n    description: '재설정해줌',\n  })\n  async forgotPassword(@Body('email') email: string) {\n    return await this.authService.forgotPassword(email);\n  }\n\n  @Post('change/password') //비밀번호 바꾸기\n  @ApiOperation({ summary: '비밀번호 바꾸기', description: '비밀번호 수정' })\n  @ApiBody({ type: ChangePasswordDto })\n  async changePassword(@Body() changePasswordDto: ChangePasswordDto) {\n    return await this.authService.changePassword(changePasswordDto);\n  }\n\n  @Post('newpassword')\n  @ApiOperation({ summary: '비밀번호 바꾸기', description: '비밀번호 수정' })\n  @UseGuards(JwtAuthGuard)\n  async newPassword(\n    @Body() newPasswordDto: NewPasswordDto,\n    @Req() req: RequestWithUserInterface,\n  ) {\n    const newPassword = newPasswordDto.newPassword;\n    const user = req.user.email;\n    const updatedUser = await this.authService.changePasswordWithToken(\n      user,\n      newPassword,\n    );\n    return updatedUser;\n  }\n\n  //구글에 접속하는 코드(로그인요청 코드)\n  @HttpCode(200)\n  @Get('google')\n  @UseGuards(GoogleAuthGuard)\n  async googleLogin(): Promise {\n    console.log('google');\n    return HttpStatus.OK;\n  }\n  //\n  @HttpCode(200)\n  @Get('google/callback')\n  @UseGuards(GoogleAuthGuard)\n  async googleLoginCallBack(\n    @Req() req: RequestWithUserInterface,\n    @Res() res: Response,\n  ): Promise {\n    const { user } = req;\n    const token = await this.authService.generateAccessToken(user.id);\n    const mainPageUrl = 'http://localhost:3000';\n    // 사용자에게 로그인이 완료되었음을 안내하는 메시지를 표시\n    const script = `\n    \n      window.localStorage.setItem('user', '${JSON.stringify(user)}');\n      window.localStorage.setItem('token', '${token}');\n      window.opener.postMessage('loginComplete', '${mainPageUrl}');\n      alert('Login completed. You can now close this window.');\n    \n  `;\n\n    res.send(script);\n    res.send(script);\n  }\n\n  @HttpCode(200)\n  @Get('kakao')\n  @UseGuards(KakaoAuthGuard)\n  async kakaoLogin(): Promise {\n    return HttpStatus.OK;\n  }\n\n  @HttpCode(200)\n  @Get('kakao/callback')\n  @UseGuards(KakaoAuthGuard)\n  async kakaoLoginCallBack(@Req() req: any): Promise {\n    const { user } = req;\n    const token = await this.authService.generateAccessToken(user.id);\n    return { token, user };\n  }\n\n  //naver\n  @HttpCode(200)\n  @Get('naver')\n  @UseGuards(NaverAuthGuard)\n  async naverLogin(): Promise {\n    return HttpStatus.OK;\n  }\n  @HttpCode(200)\n  @Get('naver/callback')\n  @UseGuards(NaverAuthGuard)\n  async naverLoginCallBack(@Req() req: any): Promise {\n    const { user } = req;\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nEmailModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleAuthStrategy\n\nGoogleAuthStrategy\n\nAuthModule -->\n\nGoogleAuthStrategy->AuthModule\n\n\n\n\n\nJwtAuthStrategy\n\nJwtAuthStrategy\n\nAuthModule -->\n\nJwtAuthStrategy->AuthModule\n\n\n\n\n\nKakaoAuthStrategy\n\nKakaoAuthStrategy\n\nAuthModule -->\n\nKakaoAuthStrategy->AuthModule\n\n\n\n\n\nLocalAuthStrategy\n\nLocalAuthStrategy\n\nAuthModule -->\n\nLocalAuthStrategy->AuthModule\n\n\n\n\n\nNaverAuthStrategy\n\nNaverAuthStrategy\n\nAuthModule -->\n\nNaverAuthStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GoogleAuthStrategy\n                        \n                        \n                            JwtAuthStrategy\n                        \n                        \n                            KakaoAuthStrategy\n                        \n                        \n                            LocalAuthStrategy\n                        \n                        \n                            NaverAuthStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from '@users/users.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { EmailModule } from '@email/email.module';\nimport { AuthController } from '@auth/auth.controller';\nimport { AuthService } from '@auth/auth.service';\nimport { LocalAuthStrategy } from '@auth/strategies/local-auth.strategy';\nimport { JwtAuthStrategy } from '@auth/strategies/jwt-auth.strategy';\nimport { KakaoAuthStrategy } from '@auth/strategies/kakao-auth.strategy';\nimport { NaverAuthStrategy } from '@auth/strategies/naver-auth.strategy';\nimport { GoogleAuthStrategy } from '@auth/strategies/google-auth.strategy';\n\n@Module({\n  imports: [\n    ConfigModule,\n    JwtModule.register({}),\n    PassportModule,\n    EmailModule,\n    UsersModule,\n  ], //service형태로 내보냄\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    JwtAuthStrategy,\n    LocalAuthStrategy,\n    GoogleAuthStrategy,\n    KakaoAuthStrategy,\n    NaverAuthStrategy,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                changePasswordWithToken\n                            \n                            \n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                decodedConfirmationToken\n                            \n                            \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    Public\n                                generateAccessToken\n                            \n                            \n                                generateOTP\n                            \n                            \n                                    Async\n                                Login\n                            \n                            \n                                    Async\n                                newPassword\n                            \n                            \n                                    Async\n                                profile\n                            \n                            \n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService, emailService: EmailService, cacheManger: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManger\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(changePasswordDto: ChangePasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                changePasswordDto\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePasswordWithToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePasswordWithToken(userId: string, newPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    confirmEmail(confirmEmailDto: ConfirmEmailDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                confirmEmailDto\n                                            \n                                                            ConfirmEmailDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        decodedConfirmationToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    decodedConfirmationToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAccessToken(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateOTP\n                        \n                    \n                \n            \n            \n                \ngenerateOTP()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:157\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        Login\n                        \n                    \n                \n            \n            \n                \n                        \n                    Login(loginUserDto: LoginUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginUserDto\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        newPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    newPassword(newPasswordDto: NewPasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newPasswordDto\n                                            \n                                                            NewPasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                        \n                    profile(id: string, reservation?: Reservation)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:127\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                reservation\n                                            \n                                                            Reservation\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { CACHE_MANAGER } from '@nestjs/common/cache';\nimport { Cache } from 'cache-manager'; //확인잘하기\nimport { UsersService } from '@users/users.service';\nimport { EmailService } from '@email/email.service';\nimport { CreateUserDto } from '@users/dto/create-user.dto';\nimport { LoginUserDto } from '@users/dto/login-user.dto';\nimport { TokenPayloadInterface } from '@auth/interfaces/tokenPayload.interface';\nimport { verificationEmail } from '@common/template/verificationEmail';\nimport { ConfirmEmailDto } from '@users/dto/confirm-email.dto';\nimport { VerificationTokenPayloadInterface } from '@auth/interfaces/verificationTokenPayload.interface';\nimport { ChangePasswordDto } from '@users/dto/change-password.dto';\nimport {NewPasswordDto} from \"@users/dto/new-password.dto\";\nimport {User} from \"@users/entities/user.entity\";\nimport {Reservation} from \"@reservation/entities/reservation.entity\";\nimport {Product} from \"@product/entities/product.entity\";\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly emailService: EmailService,\n    @Inject(CACHE_MANAGER) private cacheManger: Cache, //redis db불러옴\n  ) {}\n\n  //회원가입 로직\n  async createUser(createUserDto: CreateUserDto) {\n    const user = await this.usersService.CreateUser(createUserDto);\n    user.password = undefined; //패스워드를 가려줌\n    await this.emailService.sendMail({\n      to: createUserDto.email,\n      subject: 'Welcome to koreanmarket',\n      text: 'welcome',\n      // html: sendEmail(createUserDto.name),\n    });\n    return user;\n  }\n\n  async Login(loginUserDto: LoginUserDto) {\n    const user = await this.usersService.getUserByEmail(loginUserDto.email);\n    const isPasswordMatched = await user.validatePassword(\n      loginUserDto.password,\n    ); //성공여부\n\n    if (!isPasswordMatched) {\n      throw new HttpException(\n        'Password do not matched',\n        HttpStatus.BAD_REQUEST,\n      );\n    } //email에서 입력한 패스워드랑 우리가 찾는 패스워드가 같지 않으면\n    user.password = undefined;\n    return user;\n  }\n\n  //access토큰 생성함수\n  public generateAccessToken(userId: string) {\n    const payload: TokenPayloadInterface = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('ACCESSTOKEN_SECRET_KEY'),\n      expiresIn: `${this.configService.get('ACCESSTOKEN_EXPIRATION_TIME')}m`,\n    });\n    return token;\n  }\n\n\n  async sendEmail(email: string) {\n    const generateNumber = this.generateOTP();\n    await this.cacheManger.set(email, generateNumber);\n    await this.emailService.sendMail({\n      to: email,\n      subject: '이메일확인',\n      // html: `이메일 확인용 메일입니다. 아래 번호를 인증해주세요 ${generateNumber}`,\n      html: verificationEmail(generateNumber),\n    });\n    return 'success';\n  }\n\n  async confirmEmail(confirmEmailDto: ConfirmEmailDto) {\n    const emailCodeByRedis = await this.cacheManger.get(confirmEmailDto.email);\n    if (emailCodeByRedis !== confirmEmailDto.code) {\n      throw new BadRequestException('Wrong code provided');\n    }\n    await this.cacheManger.del(confirmEmailDto.email);\n    return true;\n  }\n  async forgotPassword(email: string) {\n    const payload: VerificationTokenPayloadInterface = { email };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_CHAGNE_PASSWORD_SECRET'),\n      expiresIn: this.configService.get('JWT_CHAGNE_PASSWORD_EXPIRESIN'), //10분동안 유효한 token\n    });\n    const url = `${this.configService.get(\n      'PASSWORD_CHANGE_URL',\n    )}?token=${token}`;\n    await this.emailService.sendMail({\n      to: email,\n      subject: 'forgot password - koreamarket',\n      html: `\n        패스워드 변경하려면 아래 버튼을 눌러주세요 \n        ${url}\n        `,\n    });\n    return true;\n  }\n  async changePassword(changePasswordDto: ChangePasswordDto) {\n    const email = await this.decodedConfirmationToken(changePasswordDto.token);\n    return await this.usersService.changePassword(\n      email,\n      changePasswordDto.newPassword,\n    ); //패스워드바꾸기 함수 먼저만들고하기\n  }\n\n  async newPassword(newPasswordDto: NewPasswordDto) {\n\n  }\n\n  async profile( id: string, reservation?: Reservation) {\n    const queryBuilder = await this.usersService.userGetAll( id, reservation); // user를 userGetAll 메서드에 전달\n    return queryBuilder;\n  }\n\n\n  //토큰 푸는 함수\n  public async decodedConfirmationToken(token: string) {\n    try {\n      const payload = await this.jwtService.verify(token, {\n        secret: this.configService.get('JWT_CHAGNE_PASSWORD_SECRET'),\n      });\n      return payload.email;\n    } catch (err) {\n      if (err?.name === 'TokenExpiredError') {\n        throw new BadRequestException('token expired error');\n      } else {\n        throw new BadRequestException('token error');\n      }\n    }\n  }\n\n  //토큰 비밀번호\n  async changePasswordWithToken(userId: string, newPassword: string) {\n    const updatedUser = await this.usersService.changePassword(userId, newPassword)\n    return updatedUser;\n\n  }\n\n  //랜덤함수\n  generateOTP() {\n    let OTP = '';\n    for (let i = 1; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseAPIDocument.html":{"url":"classes/BaseAPIDocument.html","title":"class - BaseAPIDocument","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseAPIDocument\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/config/swagger.document.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                builder\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                initializeOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        builder\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DocumentBuilder()\n                    \n                \n                    \n                        \n                                Defined in src/common/config/swagger.document.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initializeOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/config/swagger.document.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DocumentBuilder } from '@nestjs/swagger';\n\nexport class BaseAPIDocument {\n  public builder = new DocumentBuilder();\n\n  public initializeOptions() {\n    return this.builder\n      .setTitle('KoreanmarketAPI') //명칭\n      .setDescription('public koreamarketAPI') //설명\n      .setVersion('1.0') //버전 (업데이트도가능 초기값 1.0)\n      .addBearerAuth(\n        { type: 'http', scheme: 'bearer', name: 'JWT', in: 'header' },\n        'access-token',\n      )\n      .setBasePath('api') //기본 베이스 url\n      .build();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert password', default: 'a1234567!'})@MinLength(7)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$/)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/change-password.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert token', default: ' '})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/change-password.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, isString, Matches, MinLength } from 'class-validator';\n\nexport class ChangePasswordDto {\n  @ApiProperty({\n    description: 'insert token',\n    default: ' ',\n  })\n  @IsString()\n  token: string;\n\n  @ApiProperty({\n    description: 'insert password',\n    default: 'a1234567!',\n  }) //swag적용\n  @MinLength(7) //최소 7자리\n  //최소 8 자, 최소 하나의 문자, 하나의 숫자 및 하나의 특수 문자 :\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$/)\n  @IsString()\n  newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Comment.html":{"url":"entities/Comment.html","title":"entity - Comment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comment/entities/comment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                desc\n                            \n                            \n                                    \n                                    \n                                    Public\n                                product\n                            \n                            \n                                    \n                                    \n                                    Public\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comment/entities/comment.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, product => product.comments)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comment/entities/comment.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.comments)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comment/entities/comment.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { CommonEntity } from '@common/entities/common.entity';\nimport { User } from '@users/entities/user.entity';\nimport { Product } from '@product/entities/product.entity';\n\n@Entity()\nexport class Comment extends CommonEntity {\n  //누가 적을건지, 어디에 적을건지(대상자) 어떤 게시물, 어떤내용을 할것인지\n  @Column()\n  public desc: string; //내용\n\n  @ManyToOne(() => User, (user: User) => user.comments) //누가 적을건지\n  @JoinColumn()\n  public user: User;\n\n  @ManyToOne(() => Product, (product: Product) => product.comments)\n  @JoinColumn()\n  public product: Product; //대상자 어디에 댓글을 달건지.\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentController.html":{"url":"controllers/CommentController.html","title":"controller - CommentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comment/comment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                comment\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createComment\n                            \n                            \n                                    \n                                    Async\n                                getCommentById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createComment(req: RequestWithUserInterface, createCommentDto: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')@ApiBody({type: CreateCommentDto})@ApiOperation({summary: '댓글등록', description: '댓글 등록해주는 api'})@ApiResponse({description: 'create comment'})@ApiBearerAuth('access-token')@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/comment/comment.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createCommentDto\n                                            \n                                                            CreateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getCommentById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCommentById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/comment/comment.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UseGuards,\n  Req,\n  Body,\n  Get,\n  Param,\n} from '@nestjs/common';\n\nimport {\n  ApiBearerAuth,\n  ApiBody,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { CommentService } from '@comment/comment.service';\nimport { CreateCommentDto } from '@comment/dto/create-comment.dto';\nimport { RequestWithUserInterface } from '@auth/interfaces/requestWithUser.interface';\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard';\n\n@ApiTags('Comment')\n@Controller('comment')\nexport class CommentController {\n  constructor(private readonly commentService: CommentService) {}\n\n  @Post('create')\n  @ApiBody({ type: CreateCommentDto })\n  @ApiOperation({ summary: '댓글등록', description: '댓글 등록해주는 api' })\n  @ApiResponse({\n    description: 'create comment',\n  })\n  @ApiBearerAuth('access-token')\n  @UseGuards(JwtAuthGuard)\n  async createComment(\n    @Req() req: RequestWithUserInterface,\n    @Body() createCommentDto: CreateCommentDto,\n  ) {\n    return await this.commentService.createComment(createCommentDto, req.user);\n  }\n\n  @Get(':id')\n  async getCommentById(@Param('id') id: string) {\n    const comment = await this.commentService.commentGeyById(id);\n    return comment;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentModule.html":{"url":"modules/CommentModule.html","title":"module - CommentModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommentModule\n\n\n\ncluster_CommentModule_providers\n\n\n\n\nCommentService\n\nCommentService\n\n\n\nCommentModule\n\nCommentModule\n\nCommentModule -->\n\nCommentService->CommentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/comment/comment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CommentController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CommentController } from '@comment/comment.controller';\nimport { CommentService } from '@comment/comment.service';\nimport { Comment } from '@comment/entities/comment.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Comment])],\n  controllers: [CommentController],\n  providers: [CommentService],\n})\nexport class CommentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentService.html":{"url":"injectables/CommentService.html","title":"injectable - CommentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comment/comment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                commentGeyById\n                            \n                            \n                                    Async\n                                createComment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/comment/comment.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        commentGeyById\n                        \n                    \n                \n            \n            \n                \n                        \n                    commentGeyById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/comment/comment.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createComment(createCommentDto: CreateCommentDto, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/comment/comment.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCommentDto\n                                            \n                                                            CreateCommentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateCommentDto } from '@comment/dto/create-comment.dto';\nimport { User } from '@users/entities/user.entity';\nimport { Comment } from '@comment/entities/comment.entity';\n\n@Injectable()\nexport class CommentService {\n  constructor(\n    @InjectRepository(Comment)\n    private commentRepository: Repository,\n  ) {}\n\n  async createComment(createCommentDto: CreateCommentDto, user: User) {\n    const newComment = await this.commentRepository.create({\n      ...createCommentDto,\n      user,\n    });\n    await this.commentRepository.save(newComment);\n    return newComment;\n  }\n\n  async commentGeyById(id: string) {\n    const comment = await this.commentRepository\n      .createQueryBuilder('comment')\n      .leftJoinAndSelect('comment.user', 'user')\n      .where('comment.id = :id', { id })\n      .getOne();\n\n    if (!comment) {\n      throw new HttpException('No id', HttpStatus.NOT_FOUND);\n    }\n\n    return comment;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommonEntity.html":{"url":"classes/CommonEntity.html","title":"class - CommonEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommonEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/entities/common.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createdAt\n                            \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/common.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/common.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/entities/common.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CreateDateColumn,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport abstract class CommonEntity {\n  @PrimaryGeneratedColumn('uuid')\n  public id: string;\n\n  @CreateDateColumn()\n  public createdAt: Date;\n\n  @UpdateDateColumn()\n  public updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmEmailDto.html":{"url":"classes/ConfirmEmailDto.html","title":"class - ConfirmEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/confirm-email.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/confirm-email.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/confirm-email.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ConfirmEmailDto {\n  email: string;\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAuthDto.html":{"url":"classes/CreateAuthDto.html","title":"class - CreateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-auth.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateAuthDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comment/dto/create-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                desc\n                            \n                            \n                                    \n                                    \n                                product\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert desc', default: 'Comment'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comment/dto/create-comment.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert productid', default: 'productId'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comment/dto/create-comment.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString } from 'class-validator';\nimport { Product } from '@product/entities/product.entity';\n\nexport class CreateCommentDto {\n  @ApiProperty({\n    description: 'insert desc',\n    default: 'Comment',\n  })\n  @IsString()\n  desc: string;\n\n  @ApiProperty({\n    description: 'insert productid',\n    default: 'productId',\n  })\n  @IsString()\n  product: Product;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOrderDto.html":{"url":"classes/CreateOrderDto.html","title":"class - CreateOrderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOrderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/dto/create-order.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateOrderDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/dto/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                brand\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                desc\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                productImg\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                region\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        brand\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert brand', default: 'productbrand'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert category', default: undefined, required: false})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert desc', default: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert productname', default: 'productname'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert price', default: 1})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        productImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert productImg', default: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        region\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert region', default: 'productname'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:49\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsArray, IsNotEmpty, IsNumber, IsString } from 'class-validator';\n\nexport class CreateProductDto {\n  @ApiProperty({\n    description: 'insert productname',\n    default: 'productname',\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string; //필수값아닐때는 ?을 붙여줌 ex) ?:\n\n  @ApiProperty({\n    // type: String,\n    description: 'insert desc',\n    default: ['desc'],\n  })\n  @IsArray()\n  desc?: string[];\n\n  @ApiProperty({\n    description: 'insert price',\n    default: 1,\n  })\n  @IsNumber()\n  price: number;\n\n  @ApiProperty({\n    // type: String,\n    description: 'insert productImg',\n    default: ['String'],\n  })\n  @IsArray()\n  productImg?: string[];\n\n  @ApiProperty({\n    description: 'insert category',\n    default: ['String'],\n    required: false,\n  })\n  @IsArray()\n  category?: string[];\n\n  @ApiProperty({\n    description: 'insert region',\n    default: 'productname',\n  })\n  @IsString()\n  region?: string;\n\n  @ApiProperty({\n    description: 'insert brand',\n    default: 'productbrand',\n  })\n  @IsString()\n  @IsNotEmpty()\n  brand: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRatingDto.html":{"url":"classes/CreateRatingDto.html","title":"class - CreateRatingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRatingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rating/dto/create-rating.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                buyer\n                            \n                            \n                                rating\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        buyer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/rating/dto/create-rating.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/rating/dto/create-rating.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '@users/entities/user.entity';\n\nexport class CreateRatingDto {\n  rating: number;\n  buyer: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateReservationDto.html":{"url":"classes/CreateReservationDto.html","title":"class - CreateReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservation/dto/create-reservation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                desc\n                            \n                            \n                                    \n                                    \n                                location\n                            \n                            \n                                    \n                                    \n                                product\n                            \n                            \n                                    \n                                    \n                                purchase\n                            \n                            \n                                    \n                                reservationDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert desc', default: 'Comment'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/dto/create-reservation.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert location', default: '뉴욕'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/dto/create-reservation.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert productid', default: 'productId'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/dto/create-reservation.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        purchase\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert purchase', default: true})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/dto/create-reservation.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert reservation date', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/dto/create-reservation.dto.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean, IsString } from 'class-validator';\nimport { Product } from '@product/entities/product.entity';\n\nexport class CreateReservationDto {\n  @ApiProperty({\n    description: 'insert location',\n    default: '뉴욕',\n  })\n  @IsString()\n  location: string;\n\n  @ApiProperty({\n    description: 'insert desc',\n    default: 'Comment',\n  })\n  @IsString()\n  desc: string;\n\n  @ApiProperty({\n    description: 'insert purchase',\n    default: true,\n  })\n  @IsBoolean()\n  purchase: boolean;\n\n  @ApiProperty({\n    description: 'insert productid',\n    default: 'productId',\n  })\n  @IsString()\n  product: Product;\n\n  @ApiProperty({\n    description: 'insert reservation date',\n    default: new Date()\n  })\n  reservationDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                profileImg\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                provider\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert email', default: 'abcd@google.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert username', default: 'username'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert password', default: 'a1234567!'})@IsString()@MinLength(7)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        profileImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Provider\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert provider', default: 'local'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  MinLength,\n  Matches,\n  IsOptional,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Provider } from '@users/entities/provider.enum';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: 'insert username',\n    default: 'username',\n  }) //swag적용\n  @IsString() //string아니면 에러\n  @IsNotEmpty()\n  name: string;\n\n  @ApiProperty({\n    description: 'insert email',\n    default: 'abcd@google.com',\n  }) //swag적용\n  @IsEmail() //email 아니면 에러\n  email: string;\n\n  @ApiProperty({\n    description: 'insert password',\n    default: 'a1234567!',\n  }) //swag적용\n  @IsString()\n  @MinLength(7) //최소 7자리\n  //최소 8 자, 최소 하나의 문자, 하나의 숫자 및 하나의 특수 문자 :\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$/)\n  password?: string;\n\n  @ApiProperty({\n    description: 'insert provider',\n    default: 'local',\n  }) //swag적용\n  @IsString()\n  @IsOptional()\n  provider?: Provider;\n\n  @ApiProperty() //swag적용\n  @IsOptional() //넣든 안넣든 상관없음 null값 허용\n  profileImg?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport * as process from 'process';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      //환경변수 불러오는 방법\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (cfg: ConfigService) => ({\n        type: 'postgres',\n        host: cfg.get('POSTGRES_HOST'),\n        port: cfg.get('POSTGRES_PORT'),\n        username: cfg.get('POSTGRES_USERNAME'),\n        password: cfg.get('POSTGRES_PASSWORD'),\n        database: cfg.get('POSTGRES_DB'),\n        entities: [__dirname + '/../**/*.entity{.ts,.js}'], //entity기반으로 모델기반\n        autoLoadEntities: true,\n        synchronize: true,\n      }),\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { EmailService } from '@email/email.service';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [EmailService],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: Mail.Options)\n                \n            \n\n\n                    \n                        \n                            Defined in src/email/email.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        Mail.Options\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport Mail from 'nodemailer/lib/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { createTransport } from 'nodemailer';\n\n@Injectable()\nexport class EmailService {\n  private nodemailerTransport: Mail;\n  constructor(private readonly configService: ConfigService) {\n    this.nodemailerTransport = createTransport({\n      service: configService.get('EMAIL_SERVICE'),\n      auth: {\n        user: configService.get('EMAIL_USER'),\n        pass: configService.get('EMAIL_PASSWORD'),\n      },\n    });\n  }\n\n  sendMail(options: Mail.Options) {\n    //보내는사람 받는ㅅㅏ람 타이틀이 다들어감 option에\n    return this.nodemailerTransport.sendMail(options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthGuard.html":{"url":"injectables/GoogleAuthGuard.html","title":"injectable - GoogleAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/google-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.GOOGLE)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@users/entities/provider.enum';\n\n@Injectable()\nexport class GoogleAuthGuard extends AuthGuard(Provider.GOOGLE) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthStrategy.html":{"url":"injectables/GoogleAuthStrategy.html","title":"injectable - GoogleAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/google-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(\n  Strategy,\n  Provider.GOOGLE,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/google-auth.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(_accessToken: string, _refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/google-auth.strategy.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                _refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                        VerifyCallback\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth2'; //확인 잘하기\nimport { ConfigService } from '@nestjs/config';\nimport { Provider } from '@users/entities/provider.enum';\nimport { UsersService } from '@users/users.service';\n\n@Injectable()\nexport class GoogleAuthStrategy extends PassportStrategy(\n  Strategy,\n  Provider.GOOGLE,\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      clientID: configService.get('GOOGLE_AUTH_CLIENTID'),\n      clientSecret: configService.get('GOOGLE_AUTH_CLIENTSECRET'),\n      callbackURL: configService.get('GOOGLE_AUTH_CALLBACK_URL'),\n      scope: ['profile', 'email'],\n    });\n  }\n\n  async validate(\n    _accessToken: string,\n    _refreshToken: string,\n    profile: any,\n    done: VerifyCallback,\n  ): Promise {\n    // done(null, profile);\n    const { displayName, emails, provider, picture } = profile;\n    const emailValue = emails.length > 0 ? emails[0].value : null;\n    const userInput = {\n      name: displayName,\n      email: emailValue,\n      provider,\n      picture,\n    };\n    console.log(userInput);\n    try {\n      const user = await this.usersService.getUserByEmail(emailValue);\n      //로그인 처리\n      if (user.provider !== provider) {\n        throw new HttpException(\n          `You are already subscribed to ${user.provider}`,\n          HttpStatus.CONFLICT,\n        );\n      }\n      done(null, user);\n    } catch (err) {\n      //이메일이 없으면 회원가입\n      if (err.status === 404) {\n        const newUser = await this.usersService.CreateUser({\n          email: emailValue,\n          name: displayName,\n          provider,\n          profileImg: picture,\n        });\n        done(null, newUser);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/http-exception.filter.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: any, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    const error = exception.getResponse() as\n      | string\n      | { error: string; statusCode: number; message: string | string[] };\n\n    if (typeof error === 'string') {\n      response.status(status).json({\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        message: error,\n        data: null,\n      });\n    } else {\n      response.status(status).json({\n        statusCode: status,\n        message: error.message,\n        timestamp: new Date().toISOString(),\n        data: null,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthStrategy.html":{"url":"injectables/JwtAuthStrategy.html","title":"injectable - JwtAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt-auth.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: TokenPayloadInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt-auth.strategy.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayloadInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { UsersService } from '@users/users.service';\nimport { TokenPayloadInterface } from '@auth/interfaces/tokenPayload.interface';\n\n@Injectable()\nexport class JwtAuthStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private usersService: UsersService,\n    private configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), //토큰을 헤더이담겨줌 (bearToken)\n      secretOrKey: configService.get('ACCESSTOKEN_SECRET_KEY'), //검증키 (열쇠같은거)\n    });\n  }\n  //토큰검증해주는 함수\n  async validate(payload: TokenPayloadInterface) {\n    return this.usersService.getUserById(payload.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KakaoAuthGuard.html":{"url":"classes/KakaoAuthGuard.html","title":"class - KakaoAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KakaoAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/kakao-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.KAKAO)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@users/entities/provider.enum';\n\nexport class KakaoAuthGuard extends AuthGuard(Provider.KAKAO) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KakaoAuthStrategy.html":{"url":"injectables/KakaoAuthStrategy.html","title":"injectable - KakaoAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KakaoAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/kakao-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(\n  Strategy,\n  Provider.KAKAO,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/kakao-auth.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: any, done: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/kakao-auth.strategy.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-kakao';\nimport { ConfigService } from '@nestjs/config';\nimport { Provider } from '@users/entities/provider.enum';\nimport { UsersService } from '@users/users.service';\n\n@Injectable()\nexport class KakaoAuthStrategy extends PassportStrategy(\n  Strategy,\n  Provider.KAKAO,\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      clientID: configService.get('KAKAO_AUTH_CLIENTID'),\n      callbackURL: configService.get('KAKAO_AUTH_CALLBACK_URL'),\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: any,\n  ): Promise {\n    const { displayName, provider } = profile;\n    const { profile_image } = profile._json.properties;\n    const { email } = profile._json.kakao_account;\n    const userInput = {\n      name: displayName,\n      email,\n      provider,\n      picture: profile_image,\n    };\n    console.log(userInput);\n    try {\n      const user = await this.usersService.getUserByEmail(email);\n      if (user.provider !== provider) {\n        throw new HttpException(\n          `You are already subscribed to ${user.provider}`,\n          HttpStatus.CONFLICT,\n        );\n      }\n      done(null, user);\n    } catch (err) {\n      if (err.status === 404) {\n        const newUser = await this.usersService.CreateUser({\n          email,\n          name: displayName,\n          provider,\n          profileImg: profile_image,\n        });\n        done(null, newUser);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.LOCAL)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@users/entities/provider.enum';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard(Provider.LOCAL) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthStrategy.html":{"url":"injectables/LocalAuthStrategy.html","title":"injectable - LocalAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local-auth.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/local-auth.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '@auth/auth.service';\nimport { User } from '@users/entities/user.entity';\n\n@Injectable()\nexport class LocalAuthStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({\n      usernameField: 'email', //이메일값을 기준\n    });\n  }\n  //검증되는 함수\n  async validate(email: string, password: string): Promise {\n    return this.authService.Login({ email, password });\n  } //User로 리턴\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert email', default: 'abcd@google.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/login-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert password', default: 'a1234567@'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/login-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsString, Matches, MinLength } from 'class-validator';\n\nexport class LoginUserDto {\n  @ApiProperty({\n    description: 'insert email',\n    default: 'abcd@google.com',\n  })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    description: 'insert password',\n    default: 'a1234567@',\n  })\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NaverAuthGuard.html":{"url":"injectables/NaverAuthGuard.html","title":"injectable - NaverAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NaverAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/naver-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.NAVER)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@users/entities/provider.enum';\n\n@Injectable()\nexport class NaverAuthGuard extends AuthGuard(Provider.NAVER) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NaverAuthStrategy.html":{"url":"injectables/NaverAuthStrategy.html","title":"injectable - NaverAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NaverAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/naver-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(\n  Strategy,\n  Provider.NAVER,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/naver-auth.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: Profile, done: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/naver-auth.strategy.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                        Profile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ConfigService } from '@nestjs/config';\nimport { Profile, Strategy } from 'passport-naver-v2';\nimport { Provider } from '@users/entities/provider.enum';\nimport { UsersService } from '@users/users.service';\n\n@Injectable()\nexport class NaverAuthStrategy extends PassportStrategy(\n  Strategy,\n  Provider.NAVER,\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      clientID: configService.get('NAVER_AUTH_CLIENTID'),\n      clientSecret: configService.get('NAVER_AUTH_CLIENTSECRET'),\n      callbackURL: configService.get('NAVER_AUTH_CALLBACK_URL'),\n      scope: ['email', 'name', 'nickname'],\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: Profile,\n    done: any,\n  ): Promise {\n    done(null, profile);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NewPasswordDto.html":{"url":"classes/NewPasswordDto.html","title":"class - NewPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NewPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/new-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'insert password', default: 'a1234567!'})@MinLength(7)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$/)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/new-password.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {ApiProperty} from \"@nestjs/swagger\";\nimport {IsString, Matches, MinLength} from \"class-validator\";\n\nexport class NewPasswordDto {\n    @ApiProperty({\n        description: 'insert password',\n        default: 'a1234567!',\n    }) // swag적용\n    @MinLength(7) //최소 7자리\n    //최소 8 자, 최소 하나의 문자, 하나의 숫자 및 하나의 특수 문자 :\n    @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$/)\n    @IsString()\n    newPassword: string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Order.html":{"url":"classes/Order.html","title":"class - Order","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Order\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/entities/order.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Order {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OrderController.html":{"url":"controllers/OrderController.html","title":"controller - OrderController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OrderController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/order.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                order\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createOrderDto: CreateOrderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/order/order.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/order/order.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/order/order.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/order/order.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateOrderDto: UpdateOrderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/order/order.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateOrderDto\n                                            \n                                                            UpdateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { OrderService } from '@order/order.service';\nimport { CreateOrderDto } from '@order/dto/create-order.dto';\nimport { UpdateOrderDto } from '@order/dto/update-order.dto';\n\n@ApiTags('Order') //api문서화 카테고리\n@Controller('order')\nexport class OrderController {\n  constructor(private readonly orderService: OrderService) {}\n\n  @Post()\n  create(@Body() createOrderDto: CreateOrderDto) {\n    return this.orderService.create(createOrderDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.orderService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.orderService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateOrderDto: UpdateOrderDto) {\n    return this.orderService.update(+id, updateOrderDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.orderService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OrderModule.html":{"url":"modules/OrderModule.html","title":"module - OrderModule","body":"\n                   \n\n\n\n\n    Modules\n    OrderModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OrderModule\n\n\n\ncluster_OrderModule_providers\n\n\n\n\nOrderService\n\nOrderService\n\n\n\nOrderModule\n\nOrderModule\n\nOrderModule -->\n\nOrderService->OrderModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/order/order.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OrderService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OrderController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OrderController } from '@order/order.controller';\nimport { OrderService } from '@order/order.service';\n\n@Module({\n  controllers: [OrderController],\n  providers: [OrderService],\n})\nexport class OrderModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrderService.html":{"url":"injectables/OrderService.html","title":"injectable - OrderService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OrderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/order.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createOrderDto: CreateOrderDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/order.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/order.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/order.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/order.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateOrderDto: UpdateOrderDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/order.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateOrderDto\n                                            \n                                                            UpdateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateOrderDto } from '@order/dto/create-order.dto';\nimport { UpdateOrderDto } from '@order/dto/update-order.dto';\n\n@Injectable()\nexport class OrderService {\n  create(createOrderDto: CreateOrderDto) {\n    return 'This action adds a new order';\n  }\n\n  findAll() {\n    return `This action returns all order`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} order`;\n  }\n\n  update(id: number, updateOrderDto: UpdateOrderDto) {\n    return `This action updates a #${id} order`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} order`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                data\n                            \n                            \n                                    \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page.dto.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { PageMetaDto } from '@common/dtos/page-meta.dto';\n\nexport class PageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  readonly meta: any;\n\n  constructor(data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    \n                                    Readonly\n                                page\n                            \n                            \n                                    \n                                    Readonly\n                                pageCount\n                            \n                            \n                                    \n                                    Readonly\n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaDtoParametersInterface)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page-meta.dto.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaDtoParametersInterface\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { PageMetaDtoParametersInterface } from '@common/interfaces/page-meta-dto-parameters.interface';\n\nexport class PageMetaDto {\n  @ApiProperty()\n  readonly page: number;\n\n  @ApiProperty()\n  readonly take: number;\n\n  @ApiProperty()\n  readonly itemCount: number;\n\n  @ApiProperty()\n  readonly pageCount: number;\n\n  @ApiProperty()\n  readonly hasPreviousPage: boolean;\n\n  @ApiProperty()\n  readonly hasNextPage: boolean;\n\n  constructor({ pageOptionsDto, itemCount }: PageMetaDtoParametersInterface) {\n    this.page = pageOptionsDto.page;\n    this.take = pageOptionsDto.take;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.take);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaDtoParametersInterface.html":{"url":"interfaces/PageMetaDtoParametersInterface.html","title":"interface - PageMetaDtoParametersInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaDtoParametersInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/page-meta-dto-parameters.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from '@common/dtos/page-options.dto';\n\nexport interface PageMetaDtoParametersInterface {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                order\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderConstants\n\n                    \n                \n                \n                    \n                        Default value : OrderConstants.ASC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderConstants, default: undefined})@IsEnum(OrderConstants)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 5\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 50, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(50)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dtos/page-options.dto.ts:34\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { OrderConstants } from '@common/constants/order.constants';\nimport { IsEnum, IsInt, IsOptional, Max, Min } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class PageOptionsDto {\n  @ApiPropertyOptional({ enum: OrderConstants, default: OrderConstants.ASC })\n  @IsEnum(OrderConstants)\n  @IsOptional()\n  readonly order?: OrderConstants = OrderConstants.ASC;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 50,\n    default: 10,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(50)\n  @IsOptional()\n  readonly take?: number = 5;\n\n  get skip(): number {\n    return (this.page - 1) * this.take;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/entities/product.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                brand\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    Public\n                                comments\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                desc\n                            \n                            \n                                    \n                                    Public\n                                isSelling\n                            \n                            \n                                    \n                                    Public\n                                name\n                            \n                            \n                                    \n                                    Public\n                                price\n                            \n                            \n                                    \n                                    Public\n                                productImg\n                            \n                            \n                                    \n                                    Public\n                                region\n                            \n                            \n                                    \n                                    \n                                    Public\n                                reservation\n                            \n                            \n                                    \n                                    \n                                    Public\n                                seller\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        brand\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text', {array: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.product)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text', {array: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isSelling\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        productImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text', {array: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        region\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        reservation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Reservation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, reservation => reservation.product)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        seller\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.products)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:52\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  ManyToOne,\n  JoinColumn,\n  OneToMany,\n  OneToOne,\n} from 'typeorm';\nimport { CommonEntity } from '../../common/entities/common.entity';\nimport { User } from '@users/entities/user.entity';\nimport { Reservation } from '@reservation/entities/reservation.entity';\nimport { Comment } from '@comment/entities/comment.entity';\n\n@Entity() //model\nexport class Product extends CommonEntity {\n  @Column()\n  public name: string;\n\n  @Column('text', {\n    array: true,\n    nullable: true,\n  })\n  public desc?: string[];\n\n  @Column()\n  public price: number;\n\n  @Column('text', {\n    //text형태로 넣어줘야함 ex) number, object등있다.\n    array: true,\n  })\n  public productImg: string[];\n\n  @Column('text', {\n    array: true,\n  })\n  public category?: string[];\n\n  @Column()\n  public region: string;\n\n  @Column({\n    default: true,\n  })\n  public isSelling: boolean;\n\n  @Column()\n  public brand: string;\n\n  @ManyToOne(() => User, (user: User) => user.products)\n  @JoinColumn()\n  public seller: User;\n\n  @OneToMany(() => Comment, (comment: Comment) => comment.product)\n  public comments: Comment[];\n\n  @OneToOne(\n    () => Reservation,\n    (reservation: Reservation) => reservation.product,\n  )\n  @JoinColumn()\n  public reservation: Reservation;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                product\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createProduct\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deleteProductByIId\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAllProducts\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getProductById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateProductById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProduct(req: RequestWithUserInterface, createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@ApiBody({type: CreateProductDto})@ApiOperation({summary: '상품등록', description: '상품을 등록해줌'})@ApiResponse({description: 'create all products'})@ApiBearerAuth('access-token')@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deleteProductByIId\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProductByIId(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: '상품삭제', description: '상품을 삭제한다.'})\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllProducts(pageOptionsDto: PageOptionsDto, category?: string[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: '상품조회', description: '전체상품을 조회한다'})\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pageOptionsDto\n                                            \n                                                            PageOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                category\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProductById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: '상품 상세정보 불러오기', description: '상품 상세정보를 불러온다.'})\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProductById(createProductDto: CreateProductDto, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOperation({summary: '상품 수정', description: '상품을 수정할수있음'})\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n  Req,\n  Query,\n} from '@nestjs/common';\n\nimport {\n  ApiBearerAuth,\n  ApiBody,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { ProductService } from '@product/product.service';\nimport { CreateProductDto } from '@product/dto/create-product.dto';\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard';\nimport { RequestWithUserInterface } from '@auth/interfaces/requestWithUser.interface';\nimport { PageDto } from '@common/dtos/page.dto';\nimport { Product } from '@product/entities/product.entity';\nimport { PageOptionsDto } from '@common/dtos/page-options.dto';\n\n@ApiTags('Product')\n@Controller('product')\nexport class ProductController {\n  constructor(private readonly productService: ProductService) {}\n  //product전체 불러오기\n  @Get()\n  @ApiOperation({ summary: '상품조회', description: '전체상품을 조회한다' })\n  // async getAllProducts(@Query('category') category?: string) {\n  //   const products = await this.productService.productGetAll(category);\n  //   return products;\n  // }\n  async getAllProducts(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @Query('category') category?: string[],\n  ): Promise> {\n    return await this.productService.getAllProducts(pageOptionsDto, category);\n  }\n\n  //product 등록하기\n  @Post('/create')\n  @ApiBody({ type: CreateProductDto })\n  @ApiOperation({ summary: '상품등록', description: '상품을 등록해줌' })\n  @ApiResponse({\n    description: 'create all products',\n  })\n  @ApiBearerAuth('access-token')\n  @UseGuards(JwtAuthGuard) //로그인유무 확인 등록하기위해서\n  async createProduct(\n    @Req() req: RequestWithUserInterface,\n    @Body() createProductDto: CreateProductDto,\n  ) {\n    const newProduct = await this.productService.productCreate(\n      createProductDto,\n      req.user,\n    );\n    return newProduct;\n  }\n\n  //product 상세정보 불러오기(id)\n  @Get(':id')\n  @ApiOperation({\n    summary: '상품 상세정보 불러오기',\n    description: '상품 상세정보를 불러온다.',\n  })\n  async getProductById(@Param('id') id: string) {\n    const product = await this.productService.productGetById(id);\n    return product;\n  }\n\n  //product update\n  @Put(':id')\n  @ApiOperation({ summary: '상품 수정', description: '상품을 수정할수있음' })\n  async updateProductById(\n    @Body() createProductDto: CreateProductDto,\n    @Param('id') id: string,\n  ) {\n    return await this.productService.productUpdateById(id, createProductDto);\n  }\n  //product delete\n  @Delete(':id')\n  @ApiOperation({ summary: '상품삭제', description: '상품을 삭제한다.' })\n  async deleteProductByIId(@Param('id') id: string) {\n    const product = await this.productService.productDeleteById(id);\n    return product;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProductInterface.html":{"url":"interfaces/ProductInterface.html","title":"interface - ProductInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProductInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/product.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            product\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        product\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        product:         Product\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Product\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Product } from '@product/entities/product.entity';\n\nexport interface ProductInterface extends Request {\n  product: Product;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductModule.html":{"url":"modules/ProductModule.html","title":"module - ProductModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\n\nProductService\n\nProductService\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { ProductController } from '@product/product.controller';\nimport { ProductService } from '@product/product.service';\nimport { Product } from '@product/entities/product.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product])],\n  controllers: [ProductController],\n  providers: [ProductService],\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/product.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllProducts\n                            \n                            \n                                    Async\n                                productCreate\n                            \n                            \n                                    Async\n                                productDeleteById\n                            \n                            \n                                    Async\n                                productGetById\n                            \n                            \n                                    Async\n                                productUpdateById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/product/product.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllProducts(pageOptionsDto: PageOptionsDto, category?: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pageOptionsDto\n                                            \n                                                            PageOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                category\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        productCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    productCreate(createProductDto: CreateProductDto, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        productDeleteById\n                        \n                    \n                \n            \n            \n                \n                        \n                    productDeleteById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        productGetById\n                        \n                    \n                \n            \n            \n                \n                        \n                    productGetById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        productUpdateById\n                        \n                    \n                \n            \n            \n                \n                        \n                    productUpdateById(id: string, createProductDto: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\n\nimport { Repository } from 'typeorm';\nimport { Product } from '@product/entities/product.entity';\nimport { CreateProductDto } from '@product/dto/create-product.dto';\nimport { User } from '@users/entities/user.entity';\nimport { PageOptionsDto } from '@common/dtos/page-options.dto';\nimport { PageDto } from '@common/dtos/page.dto';\nimport { PageMetaDto } from '@common/dtos/page-meta.dto';\n\n@Injectable()\nexport class ProductService {\n  constructor(\n    @InjectRepository(Product)\n    private productRepository: Repository,\n  ) {}\n\n  //등록해주는 로직\n  async productCreate(createProductDto: CreateProductDto, user: User) {\n    const newProduct = await this.productRepository.create({\n      ...createProductDto,\n      seller: user,\n    });\n\n    await this.productRepository.save(newProduct);\n    return newProduct;\n  }\n\n  //전체불러오는 로직\n  // async productGetAll(category?: string) {\n  //   //?옵션 있어도그만없어도그만\n  //   const queryBuilder = await this.productRepository.createQueryBuilder(\n  //     'product',\n  //   ); //db에 쿼리를직접 해줌\n  //   queryBuilder.leftJoinAndSelect('product.seller', 'seller'); //관계형\n  //   queryBuilder.leftJoinAndSelect('product.comments', 'comments'); //관계형\n  //   if (category && category.length > 0) {\n  //     //category에 검색키워드 이거를 검색하면 가져오겠다.\n  //     queryBuilder.andWhere(':category = ANY(product.category)', { category });\n  //   }\n  //   const { entities } = await queryBuilder.getRawAndEntities();\n  //   return entities;\n  // }\n\n  async getAllProducts(\n    pageOptionsDto: PageOptionsDto,\n    category?: string[],\n  ): Promise> {\n    const queryBuilder = await this.productRepository.createQueryBuilder(\n      'product',\n    );\n    queryBuilder.leftJoinAndSelect('product.seller', 'seller');\n    queryBuilder.leftJoinAndSelect('product.comments', 'comments');\n\n    console.log(category);\n\n    if (category !== undefined) {\n      if (Array.isArray(category)) {\n        queryBuilder.andWhere('product.category IN (:...category)', {\n          category,\n        });\n      } else {\n        queryBuilder.andWhere('product.category = :category', {\n          category,\n        });\n      }\n    }\n\n    await queryBuilder\n      .orderBy('product.createdAt', pageOptionsDto.order)\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take);\n\n    const itemCount = await queryBuilder.getCount();\n    const { entities } = await queryBuilder.getRawAndEntities();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async productGetById(id: string) {\n    const product = await this.productRepository\n      .createQueryBuilder('product')\n      .leftJoinAndSelect('product.seller', 'seller')\n      .leftJoinAndSelect('product.comments', 'comments')\n      .leftJoinAndSelect('comments.user', 'user')\n      .where('product.id = :id', { id })\n      .getOne();\n    // const product = await this.productRepository.findOneBy({\n    //   where: { id },\n    //   relations: {\n    //     seller: true,\n    //   },\n    // });\n    if (!product) {\n      // id가 없을때 만들어줌\n      throw new HttpException('No id', HttpStatus.NOT_FOUND);\n    }\n    return product;\n  }\n\n  async productDeleteById(id: string) {\n    await this.productRepository.delete({ id });\n    return 'deleted product';\n  }\n  async productUpdateById(id: string, createProductDto: CreateProductDto) {\n    // const product = await this.productRepository.findOneBy({ id });\n    // const updateProduct = await this.productRepository.update(createProductDto);\n    // return updateProduct;\n    await this.productRepository.update(id, createProductDto);\n    return 'updated product';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Rating.html":{"url":"entities/Rating.html","title":"entity - Rating","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Rating\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rating/entities/rating.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                buyer\n                            \n                            \n                                    \n                                    Public\n                                rating\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        buyer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.rating)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/rating/entities/rating.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/rating/entities/rating.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToMany, ManyToOne } from 'typeorm';\nimport { CommonEntity } from '@common/entities/common.entity';\nimport { User } from '@users/entities/user.entity';\n@Entity()\nexport class Rating extends CommonEntity {\n  @ManyToMany(() => User, (user: User) => user.rating)\n  @JoinColumn()\n  public buyer: User;\n\n  @Column({\n    default: 1,\n  })\n  public rating: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RatingController.html":{"url":"controllers/RatingController.html","title":"controller - RatingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RatingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rating/rating.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                rating\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Req,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n} from '@nestjs/common';\nimport { RatingService } from '@rating/rating.service';\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard';\nimport { CreateRatingDto } from '@rating/dto/create-rating.dto';\nimport { RequestWithUserInterface } from '@auth/interfaces/requestWithUser.interface';\n\n@Controller('rating')\nexport class RatingController {\n  constructor(private readonly ratingService: RatingService) {}\n\n  // @Post('/')\n  // @UseGuards(JwtAuthGuard)\n  // async createRating(@Body() createRatingDto: CreateRatingDto) {\n  //   const newRating = await this.ratingService.createRating(createRatingDto);\n  //   console.log(newRating);\n  //   return { newRating };\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RatingModule.html":{"url":"modules/RatingModule.html","title":"module - RatingModule","body":"\n                   \n\n\n\n\n    Modules\n    RatingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RatingModule\n\n\n\ncluster_RatingModule_providers\n\n\n\n\nRatingService\n\nRatingService\n\n\n\nRatingModule\n\nRatingModule\n\nRatingModule -->\n\nRatingService->RatingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/rating/rating.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RatingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RatingController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RatingService } from './rating.service';\nimport { RatingController } from './rating.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Rating } from './entities/rating.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Rating])],\n  controllers: [RatingController],\n  providers: [RatingService],\n})\nexport class RatingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RatingService.html":{"url":"injectables/RatingService.html","title":"injectable - RatingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RatingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rating/rating.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createRating\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ratingRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/rating/rating.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ratingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRating\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRating(createRatingDto: CreateRatingDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/rating/rating.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createRatingDto\n                                            \n                                                            CreateRatingDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Rating } from '@rating/entities/rating.entity';\nimport { CreateRatingDto } from '@rating/dto/create-rating.dto';\nimport { User } from '@users/entities/user.entity';\n\n@Injectable()\nexport class RatingService {\n  constructor(\n    @InjectRepository(Rating)\n    private ratingRepository: Repository,\n  ) {}\n\n  async createRating(createRatingDto: CreateRatingDto) {\n    const newRating = await this.ratingRepository.create({\n      ...createRatingDto,\n    });\n    console.log(createRatingDto);\n    await this.ratingRepository.save(newRating);\n    return newRating;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CacheModule } from '@nestjs/common/cache';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as redisStore from 'cache-manager-redis-store';\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (cfg: ConfigService) => ({\n        store: redisStore,\n        host: cfg.get('REDIS_HOST'),\n        port: cfg.get('REDIS_PORT'),\n        user: cfg.get('REDIS_USER'),\n        password: cfg.get('REDIS_PASSWORD'),\n        ttl: cfg.get('REDIS_TTL'),\n      }),\n      isGlobal: true,\n    }),\n  ],\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUserInterface.html":{"url":"interfaces/RequestWithUserInterface.html","title":"interface - RequestWithUserInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUserInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/requestWithUser.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { User } from '@users/entities/user.entity';\n\nexport interface RequestWithUserInterface extends Request {\n  user: User;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Reservation.html":{"url":"entities/Reservation.html","title":"entity - Reservation","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Reservation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservation/entities/reservation.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                desc\n                            \n                            \n                                    \n                                    Public\n                                location\n                            \n                            \n                                    \n                                    \n                                    Public\n                                product\n                            \n                            \n                                    \n                                    Public\n                                purchase\n                            \n                            \n                                    \n                                    Public\n                                reservationDate\n                            \n                            \n                                    \n                                    \n                                    Public\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/entities/reservation.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/entities/reservation.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, product => product.reservation)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/entities/reservation.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        purchase\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/entities/reservation.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        reservationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamptz'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/entities/reservation.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.reservation)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/reservation/entities/reservation.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToMany,\n  OneToOne,\n} from 'typeorm';\nimport { CommonEntity } from '@common/entities/common.entity';\nimport { Product } from '@product/entities/product.entity';\nimport { User } from '@users/entities/user.entity';\n\n@Entity()\nexport class Reservation extends CommonEntity {\n  @Column()\n  public location: string;\n\n  @OneToOne(() => Product, (product: Product) => product.reservation)\n  @JoinColumn()\n  public product: Product;\n\n  @Column({\n    default: true,\n  })\n  public purchase: boolean;\n\n  @ManyToOne(() => User, (user: User) => user.reservation)\n  @JoinColumn()\n  public user: User;\n\n  @Column()\n  public desc: string;\n\n  @Column({ type: 'timestamptz'} )\n  public reservationDate: Date;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReservationController.html":{"url":"controllers/ReservationController.html","title":"controller - ReservationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReservationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservation/reservation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                reservation\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createReservation\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                deleteReservationById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAllReservation\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getReservationById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        createReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReservation(req: RequestWithUserInterface, createReservationDto: CreateReservationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBody({type: CreateReservationDto})@ApiOperation({summary: '예약하기', description: '예약하기 api'})@ApiResponse({description: 'reservation success'})@ApiBearerAuth('access-token')@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/reservation/reservation.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createReservationDto\n                                            \n                                                            CreateReservationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        deleteReservationById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteReservationById(id: string, req: RequestWithUserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(JwtAuthGuard)@ApiOperation({summary: '예약취소', description: '예약삭제 api'})\n                \n            \n\n                    \n                        \n                            Defined in src/reservation/reservation.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            RequestWithUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAllReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllReservation(user?: User, product?: Product)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: '예약 전체리스트', description: '예약 전체 리스트 조회'})\n                \n            \n\n                    \n                        \n                            Defined in src/reservation/reservation.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                product\n                                            \n                                                            Product\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getReservationById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getReservationById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: '예약조회', description: '예약 조회'})\n                \n            \n\n                    \n                        \n                            Defined in src/reservation/reservation.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  UseGuards,\n  Req,\n  Query, Delete, Res,\n} from '@nestjs/common';\n\nimport {\n  ApiBearerAuth,\n  ApiBody,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { ReservationService } from '@reservation/reservation.service';\nimport { CreateReservationDto } from '@reservation/dto/create-reservation.dto';\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard';\nimport { RequestWithUserInterface } from '@auth/interfaces/requestWithUser.interface';\nimport { User } from '@users/entities/user.entity';\nimport { Product } from '@product/entities/product.entity';\n\n@ApiTags('Reservation')\n@Controller('reservation')\nexport class ReservationController {\n  constructor(private readonly reservationService: ReservationService) {}\n\n  @Post()\n  @ApiBody({ type: CreateReservationDto })\n  @ApiOperation({ summary: '예약하기', description: '예약하기 api' })\n  @ApiResponse({\n    description: 'reservation success',\n  })\n  @ApiBearerAuth('access-token')\n  @UseGuards(JwtAuthGuard)\n  async createReservation(\n    @Req() req: RequestWithUserInterface,\n    @Body() createReservationDto: CreateReservationDto,\n  ) {\n    const newReservation = await this.reservationService.productReservation(\n      createReservationDto,\n      req.user,\n    );\n    return newReservation;\n  }\n\n  @Get()\n  @ApiOperation({\n    summary: '예약 전체리스트',\n    description: '예약 전체 리스트 조회',\n  })\n  async getAllReservation(\n    // @Req() req: RequestWithUserInterface,\n    @Query('user') user?: User,\n    @Query('product') product?: Product,\n  ) {\n    const reservations = await this.reservationService.reservationGetAll(\n      user,\n      product,\n    );\n    return reservations;\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: '예약조회', description: '예약 조회' })\n  async getReservationById(@Param('id') id: string) {\n    const reservation = await this.reservationService.reservationGetById(id);\n    return reservation;\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtAuthGuard)\n  @ApiOperation({ summary: '예약취소', description: '예약삭제 api'})\n  async deleteReservationById(@Param('id') id: string, @Req() req: RequestWithUserInterface) {\n    const { user } = req;\n    return  await this.reservationService.deleteReservationById(id, user);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReservationModule.html":{"url":"modules/ReservationModule.html","title":"module - ReservationModule","body":"\n                   \n\n\n\n\n    Modules\n    ReservationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReservationModule\n\n\n\ncluster_ReservationModule_providers\n\n\n\n\nReservationService\n\nReservationService\n\n\n\nReservationModule\n\nReservationModule\n\nReservationModule -->\n\nReservationService->ReservationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/reservation/reservation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ReservationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReservationController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Reservation } from '@reservation/entities/reservation.entity';\nimport { ReservationController } from '@reservation/reservation.controller';\nimport { ReservationService } from '@reservation/reservation.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Reservation])],\n  controllers: [ReservationController],\n  providers: [ReservationService],\n})\nexport class ReservationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReservationService.html":{"url":"injectables/ReservationService.html","title":"injectable - ReservationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReservationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservation/reservation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteReservationById\n                            \n                            \n                                    Async\n                                productReservation\n                            \n                            \n                                    Async\n                                reservationGetAll\n                            \n                            \n                                    Async\n                                reservationGetById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reservationRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/reservation/reservation.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reservationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteReservationById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteReservationById(id: string, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservation/reservation.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        productReservation\n                        \n                    \n                \n            \n            \n                \n                        \n                    productReservation(createReservationDto: CreateReservationDto, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservation/reservation.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createReservationDto\n                                            \n                                                            CreateReservationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        reservationGetAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    reservationGetAll(user?: User, product?: Product)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservation/reservation.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                product\n                                            \n                                                            Product\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        reservationGetById\n                        \n                    \n                \n            \n            \n                \n                        \n                    reservationGetById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/reservation/reservation.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Reservation } from '@reservation/entities/reservation.entity';\nimport { CreateReservationDto } from '@reservation/dto/create-reservation.dto';\nimport { User } from '@users/entities/user.entity';\nimport { Product } from '@product/entities/product.entity';\nimport {use} from \"passport\";\n\n@Injectable()\nexport class ReservationService {\n  constructor(\n    @InjectRepository(Reservation)\n    private reservationRepository: Repository,\n  ) {}\n\n  //등록해주는 로직\n  async productReservation(\n    createReservationDto: CreateReservationDto,\n    user: User,\n  ) {\n    const newReservation = await this.reservationRepository.create({\n      ...createReservationDto,\n      user,\n    });\n    console.log(newReservation)\n    await this.reservationRepository.save(newReservation);\n    return newReservation;\n  }\n  async reservationGetAll(user?: User, product?: Product) {\n    const reservations = await this.reservationRepository.find({\n      relations: ['users', 'product'], //관계형으로 이어진것을 보여줌\n    });\n    return { count: reservations.length, reservations };\n    // const queryBuilder = await this.reservationRepository.createQueryBuilder(\n    //   'reservation',\n    // );\n    // queryBuilder.leftJoinAndSelect('reservation.user', 'users');\n    // queryBuilder.leftJoinAndSelect('reservation.product', 'product');\n    //\n    // if (user) {\n    //   queryBuilder.where('reservation.user = :user', { user });\n    // }\n    // if (product) {\n    //   queryBuilder.where('reservation.product.id = :product', { product });\n    // }\n    // const { entities } = await queryBuilder.getRawAndEntities();\n    // return entities;\n  }\n\n  async reservationGetById(id: string) {\n    const reservation = await this.reservationRepository.findOne({\n      where: { id },\n      relations: ['user', 'product', 'product.seller'],\n    });\n    if (reservation) return reservation;\n    throw new HttpException('No reservation', HttpStatus.NOT_FOUND);\n  }\n\n  async deleteReservationById(id: string, user: User) {\n    const reservation = await this.reservationRepository.findOne({\n      where: { id },\n      relations: ['user', 'product'],\n    });\n    console.log(\"++++++++++++++++++\", reservation.user)\n    console.log(\"------\", reservation.user.id === user.id)\n    // if (reservation) return reservation;\n    if(reservation.user.id === user.id) {\n      await this.reservationRepository.delete(id)\n\n      return \"deleted reservation\"\n\n    }\n    throw new HttpException(\"not reservation\", HttpStatus.FORBIDDEN)\n\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayloadInterface.html":{"url":"interfaces/TokenPayloadInterface.html","title":"interface - TokenPayloadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayloadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/tokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayloadInterface {\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/transform.interceptor.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { map, Observable } from 'rxjs';\n\nexport const Info = {\n  statusCode: 200,\n  message: 'success',\n};\n\nexport type Response = typeof Info & {\n  data: T;\n};\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map((data) => Object.assign({}, Info, { data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAuthDto.html":{"url":"classes/UpdateAuthDto.html","title":"class - UpdateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-auth.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateAuthDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAuthDto } from './create-auth.dto';\n\nexport class UpdateAuthDto extends PartialType(CreateAuthDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommentDto.html":{"url":"classes/UpdateCommentDto.html","title":"class - UpdateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comment/dto/update-comment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateCommentDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCommentDto } from './create-comment.dto';\n\nexport class UpdateCommentDto extends PartialType(CreateCommentDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateOrderDto.html":{"url":"classes/UpdateOrderDto.html","title":"class - UpdateOrderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateOrderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/dto/update-order.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateOrderDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateOrderDto } from './create-order.dto';\n\nexport class UpdateOrderDto extends PartialType(CreateOrderDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/dto/update-product.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateProductDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateProductDto } from '@product/dto/create-product.dto';\n\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRatingDto.html":{"url":"classes/UpdateRatingDto.html","title":"class - UpdateRatingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRatingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/rating/dto/update-rating.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateRatingDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateRatingDto } from '@rating/dto/create-rating.dto';\n\nexport class UpdateRatingDto extends PartialType(CreateRatingDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateReservationDto.html":{"url":"classes/UpdateReservationDto.html","title":"class - UpdateReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reservation/dto/update-reservation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateReservationDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateReservationDto } from '@reservation/dto/create-reservation.dto';\n\nexport class UpdateReservationDto extends PartialType(CreateReservationDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from '@users/dto/create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                comments\n                            \n                            \n                                    \n                                    Public\n                                email\n                            \n                            \n                                    \n                                    Public\n                                name\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    Public\n                                products\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                profileImg\n                            \n                            \n                                    \n                                    Public\n                                provider\n                            \n                            \n                                    \n                                    \n                                    Public\n                                rating\n                            \n                            \n                                    \n                                    \n                                    Public\n                                reservation\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        products\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, product => product.seller)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        profileImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Provider\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Provider, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        rating\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Rating\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, rating => rating.buyer)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        reservation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Reservation[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, reservation => reservation.user)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BeforeInsert,\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToMany,\n  OneToMany,\n} from 'typeorm';\n\nimport {\n  HttpException,\n  HttpStatus,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport * as bcrypt from 'bcryptjs';\nimport * as gravatar from 'gravatar';\nimport { CommonEntity } from '@common/entities/common.entity';\nimport { Product } from '@product/entities/product.entity';\nimport { Reservation } from '@reservation/entities/reservation.entity';\nimport { Provider } from '@users/entities/provider.enum';\nimport { Rating } from '@rating/entities/rating.entity';\nimport { Comment } from '@comment/entities/comment.entity';\n\n@Entity()\nexport class User extends CommonEntity {\n  @Column()\n  public name: string;\n  @Column({ unique: true }) //중복값 허용 x\n  public email: string;\n  @Column({ nullable: true }) //null값을 허용\n  public password?: string;\n\n  @OneToMany(() => Product, (product: Product) => product.seller)\n  public products: Product[];\n\n  // @OneToMany(() => Reservation, (reservation: Reservation) => reservation.user)\n  // public reservations: Reservation[];\n  @OneToMany(() => Reservation, (reservation: Reservation) => reservation.user)\n  @JoinColumn()\n  public reservation: Reservation[];\n\n  @Column({\n    type: 'enum',\n    enum: Provider,\n    default: Provider.LOCAL, //선택이 없으면 자동으로 이메일로 선택\n  })\n  public provider: Provider; //Provider에있는 4개중에 하나만 골라야함\n\n  @OneToMany(() => Comment, (comment: Comment) => comment.user)\n  public comments: Comment[];\n\n  @Column({ nullable: true })\n  public profileImg?: string;\n\n  @ManyToMany(() => Rating, (rating: Rating) => rating.buyer)\n  @JoinColumn()\n  public rating: Rating;\n\n  @BeforeInsert() //데이터를 넣기전에 실행하는 함수\n  async beforeSaveFunction(): Promise {\n    try {\n      if (this.provider !== Provider.LOCAL) {\n        return;\n      } else {\n        //패스워드 암호화\n        const saltValue = await bcrypt.genSalt(10); //암호화되는 키값\n        this.password = await bcrypt.hash(this.password, saltValue);\n\n        //프로필 이미지 자동생성\n        this.profileImg = await gravatar.url(this.email, {\n          s: '200',\n          r: 'pg',\n          d: 'mm',\n          protocol: 'https',\n        });\n      }\n    } catch (err) {\n      console.log(err);\n      throw new InternalServerErrorException();\n    }\n  }\n  //로그인할때 패스워드인증(암호화된패스워드를 맞는지 안맞는지 확인해줌)\n  async validatePassword(aPassword: string) {\n    try {\n      const isPasswordMatch = await bcrypt.compare(aPassword, this.password);\n      return isPasswordMatch;\n    } catch (err) {\n      console.log(err);\n      throw new HttpException(err.message, HttpStatus.CONFLICT);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getUserById\n                            \n                            \n                                    \n                                    Async\n                                postSignup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        postSignup\n                        \n                    \n                \n            \n            \n                \n                        \n                    postSignup(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { UsersService } from '@users/users.service';\nimport { CreateUserDto } from '@users/dto/create-user.dto';\n\n@ApiTags('Users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  //회원가입 전체를 불러옴\n  // @Get()\n  // async getAllUsers() {\n  //   const users = await this.usersService.userGetAll();\n  //   return users;\n  // }\n  //회원가입\n  @Post('/create')\n  async postSignup(@Body() createUserDto: CreateUserDto) {\n    const newSignup = await this.usersService.CreateUser(createUserDto);\n    return newSignup;\n  }\n\n  @Get(':id')\n  async getUserById(@Param('id') id: string) {\n    const user = await this.usersService.getUserById(id);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '@users/entities/user.entity';\nimport { UsersController } from '@users/users.controller';\nimport { UsersService } from '@users/users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService], //UserService를 내보냄\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                CreateUser\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                userGetAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        CreateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    CreateUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        userGetAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    userGetAll(id: string, reservation?: Reservation)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                reservation\n                                            \n                                                            Reservation\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable, NotFoundException, Req} from '@nestjs/common';\n\nimport { InjectRepository } from '@nestjs/typeorm';\nimport {FindOperator, Repository} from 'typeorm';\n\nimport * as bcrypt from 'bcryptjs';\nimport { User } from '@users/entities/user.entity';\nimport { CreateUserDto } from '@users/dto/create-user.dto';\nimport {Reservation} from \"@reservation/entities/reservation.entity\";\nimport {Product} from \"@product/entities/product.entity\";\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User) //db활용\n    private userRepository: Repository,\n  ) {}\n\n  // //프로필\n  // async userGetAll(reservation?:Reservation) {\n  //   const queryBuilder = await this.userRepository.createQueryBuilder('user',);\n  //   queryBuilder.leftJoinAndSelect('user.reservation', 'reservation')\n  //\n  //   if (reservation) {\n  //     queryBuilder.where('user.reservation = :reservation', { reservation})\n  //   }\n  //   const {entities } = await queryBuilder.getRawAndEntities()\n  //   return entities\n  // }\n\n  // async userGetAll(user: User, reservation?: Reservation, product?: Product) {\n  //   const query = this.userRepository.createQueryBuilder('user')\n  //       .leftJoinAndSelect('user.reservation', 'reservation') // 관련 예약을 가져오도록 수정\n  //       .where('user.id = :userId', { userId: user.id }); // 특정 사용자에 대한 것만 가져오도록 수정\n  //\n  //   if (reservation) {\n  //     query.andWhere('reservation.id = :reservationId', { reservationId: reservation.id });\n  //   }\n  //\n  //   if (product) {\n  //     query.andWhere('product.id = :productId', { productId: product.id });\n  //   }\n  //\n  //   return query.getOne()\n  // }\n\n  async userGetAll( id: string,reservation?: Reservation) {\n    const profile = await  this.userRepository.findOne({\n      where: {id},\n      relations : ['reservation', 'reservation.product', 'reservation.product.seller']\n    });\n    return { profile }\n    // const queryBuilder = await this.userRepository.createQueryBuilder(\n    //     'user',\n    // );\n    // queryBuilder.leftJoinAndSelect('user.reservation', 'users');\n    //\n    // if (reservation) {\n    //   queryBuilder.where('user.reservation = :reservation', { reservation });\n    // }\n    //\n    // const { entities } = await queryBuilder.getRawAndEntities();\n    // return entities;\n  }\n\n  //user생성로직\n  async CreateUser(createUserDto: CreateUserDto) {\n    const newSignup = await this.userRepository.create(createUserDto);\n    // newSignup.provider = Provider.LOCAL;\n    await this.userRepository.save(newSignup);\n    return newSignup;\n  }\n\n  //user 찾기(by id)\n  async getUserById(id: string) {\n    const user = await this.userRepository.findOneBy({ id });\n    if (!user) {\n      throw new NotFoundException('No user Id');\n    }\n    return user;\n  }\n\n  //email로 찾기\n  async getUserByEmail(email: string) {\n    const user = await this.userRepository.findOneBy({ email });\n    if (!user) {\n      throw new NotFoundException('No user Email');\n    }\n    return user;\n  }\n\n  //패스워드 바꾸기\n  async changePassword(email: string, password: string) {\n    const user = await this.userRepository.findOneBy({ email });\n    user.password = await bcrypt.hash(password, 10);\n    return this.userRepository.save(user);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VerificationTokenPayloadInterface.html":{"url":"interfaces/VerificationTokenPayloadInterface.html","title":"interface - VerificationTokenPayloadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VerificationTokenPayloadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/verificationTokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface VerificationTokenPayloadInterface {\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/auth/dto/create-auth.dto.ts\n            \n            class\n            CreateAuthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/update-auth.dto.ts\n            \n            class\n            UpdateAuthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/google-auth.guard.ts\n            \n            injectable\n            GoogleAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/kakao-auth.guard.ts\n            \n            class\n            KakaoAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/naver-auth.guard.ts\n            \n            injectable\n            NaverAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interfaces/product.interface.ts\n            \n            interface\n            ProductInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/interfaces/requestWithUser.interface.ts\n            \n            interface\n            RequestWithUserInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/interfaces/tokenPayload.interface.ts\n            \n            interface\n            TokenPayloadInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/interfaces/verificationTokenPayload.interface.ts\n            \n            interface\n            VerificationTokenPayloadInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/strategies/google-auth.strategy.ts\n            \n            injectable\n            GoogleAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt-auth.strategy.ts\n            \n            injectable\n            JwtAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/kakao-auth.strategy.ts\n            \n            injectable\n            KakaoAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local-auth.strategy.ts\n            \n            injectable\n            LocalAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/naver-auth.strategy.ts\n            \n            injectable\n            NaverAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comment/comment.controller.ts\n            \n            controller\n            CommentController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comment/comment.service.ts\n            \n            injectable\n            CommentService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/comment/dto/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comment/dto/update-comment.dto.ts\n            \n            class\n            UpdateCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/comment/entities/comment.entity.ts\n            \n            entity\n            Comment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/config/swagger.document.ts\n            \n            class\n            BaseAPIDocument\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/decorator/user.decorator.ts\n            \n            variable\n            CustomUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta.dto.ts\n            \n            class\n            PageMetaDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/dtos/page-options.dto.ts\n            \n            class\n            PageOptionsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/dtos/page.dto.ts\n            \n            class\n            PageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/entities/common.entity.ts\n            \n            class\n            CommonEntity\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/transform.interceptor.ts\n            \n            variable\n            Info\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/interfaces/page-meta-dto-parameters.interface.ts\n            \n            interface\n            PageMetaDtoParametersInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/template/verificationEmail.ts\n            \n            variable\n            verificationEmail\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/order/dto/create-order.dto.ts\n            \n            class\n            CreateOrderDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/order/dto/update-order.dto.ts\n            \n            class\n            UpdateOrderDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/order/entities/order.entity.ts\n            \n            class\n            Order\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/order/order.controller.ts\n            \n            controller\n            OrderController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/order/order.service.ts\n            \n            injectable\n            OrderService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/product/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/product/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/product/entities/product.entity.ts\n            \n            entity\n            Product\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/rating/dto/create-rating.dto.ts\n            \n            class\n            CreateRatingDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/rating/dto/update-rating.dto.ts\n            \n            class\n            UpdateRatingDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/rating/entities/rating.entity.ts\n            \n            entity\n            Rating\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/rating/rating.controller.ts\n            \n            controller\n            RatingController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/rating/rating.service.ts\n            \n            injectable\n            RatingService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/reservation/dto/create-reservation.dto.ts\n            \n            class\n            CreateReservationDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/reservation/dto/update-reservation.dto.ts\n            \n            class\n            UpdateReservationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/reservation/entities/reservation.entity.ts\n            \n            entity\n            Reservation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/reservation/reservation.controller.ts\n            \n            controller\n            ReservationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/reservation/reservation.service.ts\n            \n            injectable\n            ReservationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/change-password.dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/confirm-email.dto.ts\n            \n            class\n            ConfirmEmailDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/new-password.dto.ts\n            \n            class\n            NewPasswordDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.22\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.1.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.1.8\n        \n            @nestjs/typeorm : ^10.0.0\n        \n            @types/bcryptjs : ^2.4.2\n        \n            @types/cookie-parser : ^1.4.3\n        \n            @types/gravatar : ^1.8.3\n        \n            @types/hapi__joi : ^17.1.9\n        \n            @types/nodemailer : ^6.4.9\n        \n            @types/passport-google-oauth2 : ^0.1.8\n        \n            @types/passport-jwt : ^3.0.9\n        \n            @types/passport-kakao : ^1.0.0\n        \n            @types/passport-local : ^1.0.35\n        \n            @types/passport-naver : ^1.0.1\n        \n            bcryptjs : ^2.4.3\n        \n            cache-manager : 4.1\n        \n            cache-manager-redis-store : 2.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            cookie-parser : ^1.4.6\n        \n            gravatar : ^1.8.2\n        \n            nodemailer : ^6.9.4\n        \n            passport : ^0.6.0\n        \n            passport-google-oauth2 : ^0.2.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-kakao : ^1.0.1\n        \n            passport-local : ^1.0.0\n        \n            passport-naver : ^1.0.6\n        \n            passport-naver-v2 : ^2.0.8\n        \n            pg : ^8.11.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.17\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            OrderConstants   (src/.../order.constants.ts)\n                        \n                        \n                            Provider   (src/.../provider.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/constants/order.constants.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderConstants\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/users/entities/provider.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Provider\n                    \n                \n                        \n                            \n                                 LOCAL\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 GOOGLE\n                            \n                        \n                        \n                            \n                                Value : google\n                            \n                        \n                        \n                            \n                                 NAVER\n                            \n                        \n                        \n                            \n                                Value : naver\n                            \n                        \n                        \n                            \n                                 KAKAO\n                            \n                        \n                        \n                            \n                                Value : kakao\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CommentModule\n\n\n\ncluster_CommentModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_OrderModule\n\n\n\ncluster_OrderModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_RatingModule\n\n\n\ncluster_RatingModule_providers\n\n\n\ncluster_ReservationModule\n\n\n\ncluster_ReservationModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAppConfigModule\n\nAppConfigModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommentModule\n\nCommentModule\n\nAppModule -->\n\nCommentModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAuthModule -->\n\nEmailModule->AuthModule\n\n\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nOrderModule\n\nOrderModule\n\nAppModule -->\n\nOrderModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nRatingModule\n\nRatingModule\n\nAppModule -->\n\nRatingModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nReservationModule\n\nReservationModule\n\nAppModule -->\n\nReservationModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleAuthStrategy\n\nGoogleAuthStrategy\n\nAuthModule -->\n\nGoogleAuthStrategy->AuthModule\n\n\n\n\n\nJwtAuthStrategy\n\nJwtAuthStrategy\n\nAuthModule -->\n\nJwtAuthStrategy->AuthModule\n\n\n\n\n\nKakaoAuthStrategy\n\nKakaoAuthStrategy\n\nAuthModule -->\n\nKakaoAuthStrategy->AuthModule\n\n\n\n\n\nLocalAuthStrategy\n\nLocalAuthStrategy\n\nAuthModule -->\n\nLocalAuthStrategy->AuthModule\n\n\n\n\n\nNaverAuthStrategy\n\nNaverAuthStrategy\n\nAuthModule -->\n\nNaverAuthStrategy->AuthModule\n\n\n\n\n\nCommentService\n\nCommentService\n\nCommentModule -->\n\nCommentService->CommentModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nOrderService\n\nOrderService\n\nOrderModule -->\n\nOrderService->OrderModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nRatingService\n\nRatingService\n\nRatingModule -->\n\nRatingService->RatingModule\n\n\n\n\n\nReservationService\n\nReservationService\n\nReservationModule -->\n\nReservationService->ReservationModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        12 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    27 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OrderModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RatingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReservationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Response   (src/.../transform.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/interceptors/transform.interceptor.ts\n    \n    \n        \n            \n                \n                    \n                    Response\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CustomUser   (src/.../user.decorator.ts)\n                        \n                        \n                            Info   (src/.../transform.interceptor.ts)\n                        \n                        \n                            verificationEmail   (src/.../verificationEmail.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorator/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CustomUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as User;\n    },\n)\n                    \n                \n\n\n        \n    \n\n    src/common/interceptors/transform.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Info\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  statusCode: 200,\n  message: 'success',\n}\n                    \n                \n\n\n        \n    \n\n    src/common/template/verificationEmail.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        verificationEmail\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (number) => `\n  \n\n  \n    \n    \n    Simple Transactional Email\n    \n      /* -------------------------------------\n          GLOBAL RESETS\n      ------------------------------------- */\n      \n      /*All the styling goes here*/\n      \n      img {\n        border: none;\n        -ms-interpolation-mode: bicubic;\n        max-width: 100%; \n      }\n\n      body {\n        background-color: #f6f6f6;\n        font-family: sans-serif;\n        -webkit-font-smoothing: antialiased;\n        font-size: 14px;\n        line-height: 1.4;\n        margin: 0;\n        padding: 0;\n        -ms-text-size-adjust: 100%;\n        -webkit-text-size-adjust: 100%; \n      }\n\n      table {\n        border-collapse: separate;\n        mso-table-lspace: 0pt;\n        mso-table-rspace: 0pt;\n        width: 100%; }\n        table td {\n          font-family: sans-serif;\n          font-size: 14px;\n          vertical-align: top; \n      }\n\n      /* -------------------------------------\n          BODY & CONTAINER\n      ------------------------------------- */\n\n      .body {\n        background-color: #f6f6f6;\n        width: 100%; \n      }\n\n      /* Set a max-width, and make it display as block so it will automatically stretch to that width, but will also shrink down on a phone or something */\n      .container {\n        display: block;\n        margin: 0 auto !important;\n        /* makes it centered */\n        max-width: 580px;\n        padding: 10px;\n        width: 580px; \n      }\n\n      /* This should also be a block element, so that it will fill 100% of the .container */\n      .content {\n        box-sizing: border-box;\n        display: block;\n        margin: 0 auto;\n        max-width: 580px;\n        padding: 10px; \n      }\n\n      /* -------------------------------------\n          HEADER, FOOTER, MAIN\n      ------------------------------------- */\n      .main {\n        background: #ffffff;\n        border-radius: 3px;\n        width: 100%; \n      }\n\n      .wrapper {\n        box-sizing: border-box;\n        padding: 20px; \n      }\n\n      .content-block {\n        padding-bottom: 10px;\n        padding-top: 10px;\n      }\n\n      .footer {\n        clear: both;\n        margin-top: 10px;\n        text-align: center;\n        width: 100%; \n      }\n        .footer td,\n        .footer p,\n        .footer span,\n        .footer a {\n          color: #999999;\n          font-size: 12px;\n          text-align: center; \n      }\n\n      /* -------------------------------------\n          TYPOGRAPHY\n      ------------------------------------- */\n      h1,\n      h2,\n      h3,\n      h4 {\n        color: #000000;\n        font-family: sans-serif;\n        font-weight: 400;\n        line-height: 1.4;\n        margin: 0;\n        margin-bottom: 30px; \n      }\n\n      h1 {\n        font-size: 35px;\n        font-weight: 300;\n        text-align: center;\n        text-transform: capitalize; \n      }\n\n      p,\n      ul,\n      ol {\n        font-family: sans-serif;\n        font-size: 14px;\n        font-weight: normal;\n        margin: 0;\n        margin-bottom: 15px; \n      }\n        p li,\n        ul li,\n        ol li {\n          list-style-position: inside;\n          margin-left: 5px; \n      }\n\n      a {\n        color: #3498db;\n        text-decoration: underline; \n      }\n\n      /* -------------------------------------\n          BUTTONS\n      ------------------------------------- */\n      .btn {\n        box-sizing: border-box;\n        width: 100%; }\n        .btn > tbody > tr > td {\n          padding-bottom: 15px; }\n        .btn table {\n          width: auto; \n      }\n        .btn table td {\n          background-color: #ffffff;\n          border-radius: 5px;\n          text-align: center; \n      }\n        .btn a {\n          background-color: #ffffff;\n          border: solid 1px #3498db;\n          border-radius: 5px;\n          box-sizing: border-box;\n          color: #3498db;\n          cursor: pointer;\n          display: inline-block;\n          font-size: 14px;\n          font-weight: bold;\n          margin: 0;\n          padding: 12px 25px;\n          text-decoration: none;\n          text-transform: capitalize; \n      }\n\n      .btn-primary table td {\n        background-color: #3498db; \n      }\n\n      .btn-primary a {\n        background-color: #3498db;\n        border-color: #3498db;\n        color: #ffffff; \n      }\n\n      /* -------------------------------------\n          OTHER STYLES THAT MIGHT BE USEFUL\n      ------------------------------------- */\n      .last {\n        margin-bottom: 0; \n      }\n\n      .first {\n        margin-top: 0; \n      }\n\n      .align-center {\n        text-align: center; \n      }\n\n      .align-right {\n        text-align: right; \n      }\n\n      .align-left {\n        text-align: left; \n      }\n\n      .clear {\n        clear: both; \n      }\n\n      .mt0 {\n        margin-top: 0; \n      }\n\n      .mb0 {\n        margin-bottom: 0; \n      }\n\n      .preheader {\n        color: transparent;\n        display: none;\n        height: 0;\n        max-height: 0;\n        max-width: 0;\n        opacity: 0;\n        overflow: hidden;\n        mso-hide: all;\n        visibility: hidden;\n        width: 0; \n      }\n\n      .powered-by a {\n        text-decoration: none; \n      }\n\n      hr {\n        border: 0;\n        border-bottom: 1px solid #f6f6f6;\n        margin: 20px 0; \n      }\n\n      /* -------------------------------------\n          RESPONSIVE AND MOBILE FRIENDLY STYLES\n      ------------------------------------- */\n      @media only screen and (max-width: 620px) {\n        table.body h1 {\n          font-size: 28px !important;\n          margin-bottom: 10px !important; \n        }\n        table.body p,\n        table.body ul,\n        table.body ol,\n        table.body td,\n        table.body span,\n        table.body a {\n          font-size: 16px !important; \n        }\n        table.body .wrapper,\n        table.body .article {\n          padding: 10px !important; \n        }\n        table.body .content {\n          padding: 0 !important; \n        }\n        table.body .container {\n          padding: 0 !important;\n          width: 100% !important; \n        }\n        table.body .main {\n          border-left-width: 0 !important;\n          border-radius: 0 !important;\n          border-right-width: 0 !important; \n        }\n        table.body .btn table {\n          width: 100% !important; \n        }\n        table.body .btn a {\n          width: 100% !important; \n        }\n        table.body .img-responsive {\n          height: auto !important;\n          max-width: 100% !important;\n          width: auto !important; \n        }\n      }\n\n      /* -------------------------------------\n          PRESERVE THESE STYLES IN THE HEAD\n      ------------------------------------- */\n      @media all {\n        .ExternalClass {\n          width: 100%; \n        }\n        .ExternalClass,\n        .ExternalClass p,\n        .ExternalClass span,\n        .ExternalClass font,\n        .ExternalClass td,\n        .ExternalClass div {\n          line-height: 100%; \n        }\n        .apple-link a {\n          color: inherit !important;\n          font-family: inherit !important;\n          font-size: inherit !important;\n          font-weight: inherit !important;\n          line-height: inherit !important;\n          text-decoration: none !important; \n        }\n        #MessageViewBody a {\n          color: inherit;\n          text-decoration: none;\n          font-size: inherit;\n          font-family: inherit;\n          font-weight: inherit;\n          line-height: inherit;\n        }\n        .btn-primary table td:hover {\n          background-color: #34495e !important; \n        }\n        .btn-primary a:hover {\n          background-color: #34495e !important;\n          border-color: #34495e !important; \n        } \n      }\n\n    \n  \n  \n    This is preheader text. Some clients will show this text as a preview.\n    \n      \n        &nbsp;\n        \n          \n\n            \n            \n\n              \n              \n                \n                  \n                    \n                      \n                        Hi there,\n                        Sometimes you just want to send a simple HTML email with a simple design and clear call to action. This is it.\n                        \n                          \n                            \n                              \n                                \n                                  \n                                    \n                                      ${number}\n                                    \n                                  \n                                \n                              \n                            \n                          \n                        \n                        This is a really simple email template. Its sole purpose is to get the recipient to click the button with no distractions.\n                        Good luck! Hope it works.\n                      \n                    \n                  \n                \n              \n\n            \n            \n            \n\n            \n            \n              \n                \n                  \n                    Company Inc, 3 Abbey Road, San Francisco CA 94102\n                     Don't like these emails? Unsubscribe.\n                  \n                \n                \n                  \n                    Powered by HTMLemail.\n                  \n                \n              \n            \n            \n\n          \n        \n        &nbsp;\n      \n    \n  \n\n`\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
